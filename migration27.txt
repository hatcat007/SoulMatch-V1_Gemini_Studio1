-- Migration 27: Fix organization chat fetching and update thread timestamps

-- 1. Update the RPC function to correctly fetch organization chat threads
-- The previous version failed due to using `to_jsonb(u.*)` which could cause permission errors.
-- This version explicitly builds the JSON for participants.
CREATE OR REPLACE FUNCTION public.get_organization_chat_threads()
RETURNS TABLE (
    id bigint,
    last_message text,
    "timestamp" timestamptz,
    unread_count integer,
    match_timestamp timestamptz,
    created_at timestamptz,
    creator_auth_id uuid,
    event_id bigint,
    is_event_chat boolean,
    participants jsonb
)
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
    v_org_id bigint;
    v_host_user_id bigint;
BEGIN
    -- Get the organization ID for the currently authenticated user
    SELECT o.id INTO v_org_id
    FROM public.organizations o
    WHERE o.auth_id = auth.uid()
    LIMIT 1;

    IF v_org_id IS NULL THEN
        RAISE EXCEPTION 'No organization found for the current user.';
    END IF;

    -- Get the host's user ID from the organization's host_name
    SELECT u.id INTO v_host_user_id
    FROM public.users u
    JOIN public.organizations o ON u.name = o.host_name
    WHERE o.id = v_org_id
    LIMIT 1;

    IF v_host_user_id IS NULL THEN
        RETURN;
    END IF;

    -- Return the threads the host is a part of
    RETURN QUERY
    SELECT
        mt.id,
        mt.last_message,
        mt."timestamp",
        mt.unread_count,
        mt.match_timestamp,
        mt.created_at,
        mt.creator_auth_id,
        mt.event_id,
        mt.is_event_chat,
        (
            SELECT jsonb_agg(
                jsonb_build_object(
                    'user', jsonb_build_object(
                        'id', u.id,
                        'name', u.name,
                        'age', u.age,
                        'avatar_url', u.avatar_url,
                        'online', u.online,
                        'bio', u.bio,
                        'location', u.location,
                        'personality_type', u.personality_type,
                        'emojis', u.emojis,
                        'personality_test_completed', u.personality_test_completed,
                        'is_admin', u.is_admin
                    )
                )
            )
            FROM message_thread_participants mtp
            JOIN users u ON mtp.user_id = u.id
            WHERE mtp.thread_id = mt.id
        ) AS participants
    FROM message_threads mt
    WHERE mt.id IN (
        SELECT mtp.thread_id
        FROM message_thread_participants mtp
        WHERE mtp.user_id = v_host_user_id
    )
    ORDER BY mt."timestamp" DESC;
END;
$$;


-- 2. Create a function and trigger to automatically update thread timestamps and last message
-- This ensures the chat list is always sorted correctly and displays the latest message time.
CREATE OR REPLACE FUNCTION public.update_thread_timestamp_and_message()
RETURNS TRIGGER AS $$
BEGIN
  UPDATE public.message_threads
  SET 
    "timestamp" = NEW.created_at,
    last_message = CASE
      WHEN NEW.text IS NOT NULL AND NEW.text != '' THEN NEW.text
      WHEN NEW.image_url IS NOT NULL THEN 'Billede sendt'
      ELSE last_message -- Keep the old message if the new one is empty
    END
  WHERE id = NEW.thread_id;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 3. Attach the trigger to the messages table
DROP TRIGGER IF EXISTS on_new_message_update_thread ON public.messages;
CREATE TRIGGER on_new_message_update_thread
AFTER INSERT ON public.messages
FOR EACH ROW EXECUTE FUNCTION public.update_thread_timestamp_and_message();

-- 4. Grant execute permissions
GRANT EXECUTE ON FUNCTION public.get_organization_chat_threads() TO authenticated;
GRANT EXECUTE ON FUNCTION public.update_thread_timestamp_and_message() TO authenticated;