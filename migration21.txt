-- Migration 21: Add Activities to User-Created Events

-- 1. Create the event_activities join table
CREATE TABLE IF NOT EXISTS "public"."event_activities" (
    "event_id" bigint NOT NULL,
    "activity_id" bigint NOT NULL,
    CONSTRAINT "event_activities_pkey" PRIMARY KEY (event_id, activity_id),
    CONSTRAINT "event_activities_event_id_fkey" FOREIGN KEY (event_id) REFERENCES public.events(id) ON DELETE CASCADE,
    CONSTRAINT "event_activities_activity_id_fkey" FOREIGN KEY (activity_id) REFERENCES public.activities(id) ON DELETE CASCADE
);

-- 2. Enable RLS on the new table
ALTER TABLE "public"."event_activities" ENABLE ROW LEVEL SECURITY;

-- 3. Add RLS Policies for event_activities
-- Allow public read access
CREATE POLICY "Allow public read access on event_activities"
ON "public"."event_activities"
FOR SELECT USING (true);

-- Allow event creators (both users and orgs) to manage their event activities
CREATE POLICY "Allow creators to manage their event activities"
ON "public"."event_activities"
FOR ALL USING (
    (
        (SELECT creator_user_id FROM public.events WHERE id = event_id) = get_current_user_id()
    ) OR (
        (SELECT organization_id FROM public.events WHERE id = event_id) IN (SELECT id FROM public.organizations WHERE auth_id = auth.uid())
    )
);

-- 4. Create an RPC function to add/update activities for an event securely
CREATE OR REPLACE FUNCTION public.add_activities_to_event(p_event_id bigint, p_activity_ids int[])
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public AS $$
DECLARE
  activity_id_val int;
  is_authorized boolean;
BEGIN
  -- Check if the current user is the creator (user or organization) of the event
  SELECT EXISTS (
    SELECT 1 FROM events e WHERE e.id = p_event_id AND (e.creator_user_id = get_current_user_id() OR e.organization_id IN (SELECT o.id FROM organizations o WHERE o.auth_id = auth.uid()))
  ) INTO is_authorized;

  IF NOT is_authorized THEN
    RAISE EXCEPTION 'Permission denied to modify activities for this event.';
  END IF;

  -- Delete existing activities for this event
  DELETE FROM event_activities WHERE event_id = p_event_id;

  -- Insert new activities
  IF array_length(p_activity_ids, 1) > 0 THEN
    FOREACH activity_id_val IN ARRAY p_activity_ids LOOP
      INSERT INTO event_activities(event_id, activity_id) VALUES(p_event_id, activity_id_val);
    END LOOP;
  END IF;
END;
$$;

-- 5. Grant execute permission on the new function
GRANT EXECUTE ON FUNCTION public.add_activities_to_event(bigint, int[]) TO authenticated;
