-- Migration 19: Add suggestion and approval system for interests and activities

-- 1. Add 'approved' and 'created_by' columns to interests table
ALTER TABLE public.interests
ADD COLUMN IF NOT EXISTS approved boolean DEFAULT true NOT NULL,
ADD COLUMN IF NOT EXISTS created_by_organization_id bigint REFERENCES public.organizations(id) ON DELETE SET NULL;

-- 2. Add 'approved' and 'created_by' columns to activities table
ALTER TABLE public.activities
ADD COLUMN IF NOT EXISTS approved boolean DEFAULT true NOT NULL,
ADD COLUMN IF NOT EXISTS created_by_organization_id bigint REFERENCES public.organizations(id) ON DELETE SET NULL;

-- 3. Helper function to get the organization ID for the current authenticated user
CREATE OR REPLACE FUNCTION public.get_current_organization_id()
RETURNS bigint
LANGUAGE sql STABLE SECURITY DEFINER
AS $$
  SELECT id FROM public.organizations WHERE auth_id = auth.uid() LIMIT 1;
$$;
GRANT EXECUTE ON FUNCTION public.get_current_organization_id() TO authenticated;


-- 4. Create RPC function for suggesting a new interest
CREATE OR REPLACE FUNCTION public.suggest_interest(p_name text, p_category_id bigint)
RETURNS "public"."interests"
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  v_org_id bigint := get_current_organization_id();
  new_interest "public"."interests";
BEGIN
  IF v_org_id IS NULL THEN
    RAISE EXCEPTION 'Only organizations can suggest new interests.';
  END IF;

  INSERT INTO public.interests (name, category_id, approved, created_by_organization_id)
  VALUES (p_name, p_category_id, false, v_org_id)
  RETURNING * INTO new_interest;

  RETURN new_interest;
END;
$$;
GRANT EXECUTE ON FUNCTION public.suggest_interest(text, bigint) TO authenticated;


-- 5. Create RPC function for suggesting a new activity
CREATE OR REPLACE FUNCTION public.suggest_activity(p_name text, p_icon text)
RETURNS "public"."activities"
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  v_org_id bigint := get_current_organization_id();
  new_activity "public"."activities";
BEGIN
  IF v_org_id IS NULL THEN
    RAISE EXCEPTION 'Only organizations can suggest new activities.';
  END IF;

  INSERT INTO public.activities (name, icon, approved, created_by_organization_id)
  VALUES (p_name, p_icon, false, v_org_id)
  RETURNING * INTO new_activity;

  RETURN new_activity;
END;
$$;
GRANT EXECUTE ON FUNCTION public.suggest_activity(text, text) TO authenticated;


-- 6. Update RLS policies for SELECT
-- For interests
DROP POLICY IF EXISTS "Allow public read access to interests" ON public.interests;
CREATE POLICY "Public can see approved interests, orgs can see their own suggestions"
ON public.interests
FOR SELECT
USING (
  approved = true
  OR
  created_by_organization_id = get_current_organization_id()
);
-- Add admin policy for interests
CREATE POLICY "Admins can see all interests"
ON public.interests
FOR SELECT
USING ( (SELECT is_admin FROM users WHERE auth_id = auth.uid()) = true );

-- For activities
ALTER TABLE public.activities ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Public can see approved activities, orgs can see their own suggestions" ON public.activities;
CREATE POLICY "Public can see approved activities, orgs can see their own suggestions"
ON public.activities
FOR SELECT
USING (
  approved = true
  OR
  created_by_organization_id = get_current_organization_id()
);
-- Allow admins to see everything
CREATE POLICY "Admins can see all activities" ON public.activities FOR SELECT USING ((SELECT is_admin FROM users WHERE auth_id = auth.uid()) = true);


-- For organization_activities
ALTER TABLE public.organization_activities ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Orgs can manage their own activities" ON public.organization_activities;
CREATE POLICY "Orgs can manage their own activities" ON public.organization_activities FOR ALL USING (organization_id = get_current_organization_id());
DROP POLICY IF EXISTS "Public can read organization activities" ON public.organization_activities;
CREATE POLICY "Public can read organization activities" ON public.organization_activities FOR SELECT USING (true);


-- 7. Update RLS policies for INSERT/UPDATE/DELETE
DROP POLICY IF EXISTS "Allow authenticated users to add new interests" ON public.interests;
-- INSERTs will be handled by the RPC functions, so we don't need a broad INSERT policy. Admins will bypass RLS.
CREATE POLICY "Admins can manage interests" ON public.interests FOR ALL USING ( (SELECT is_admin FROM users WHERE auth_id = auth.uid()) = true );

-- For Activities
CREATE POLICY "Admins can manage activities" ON public.activities FOR ALL USING ( (SELECT is_admin FROM users WHERE auth_id = auth.uid()) = true );