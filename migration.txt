-- SoulMatch Supabase Schema & Migration
-- version: 22.0 (Consolidated)

-- Section 1: Table Dropping (in reverse dependency order)
DROP TABLE IF EXISTS "public"."checkins" CASCADE;
DROP TABLE IF EXISTS "public"."user_reports" CASCADE;
DROP TABLE IF EXISTS "public"."friends" CASCADE;
DROP TABLE IF EXISTS "public"."messages" CASCADE;
DROP TABLE IF EXISTS "public"."message_thread_participants" CASCADE;
DROP TABLE IF EXISTS "public"."message_threads" CASCADE;
DROP TABLE IF EXISTS "public"."user_profile_images" CASCADE;
DROP TABLE IF EXISTS "public"."user_traits" CASCADE;
DROP TABLE IF EXISTS "public"."user_personality_tags" CASCADE;
DROP TABLE IF EXISTS "public"."personality_tags" CASCADE;
DROP TABLE IF EXISTS "public"."personality_tag_categories" CASCADE;
DROP TABLE IF EXISTS "public"."event_participants" CASCADE;
DROP TABLE IF EXISTS "public"."event_images" CASCADE;
DROP TABLE IF EXISTS "public"."event_interests" CASCADE;
DROP TABLE IF EXISTS "public"."events" CASCADE;
DROP TABLE IF EXISTS "public"."place_images" CASCADE;
DROP TABLE IF EXISTS "public"."places" CASCADE;
DROP TABLE IF EXISTS "public"."organization_activities" CASCADE;
DROP TABLE IF EXISTS "public"."activities" CASCADE;
DROP TABLE IF EXISTS "public"."organization_updates" CASCADE;
DROP TABLE IF EXISTS "public"."organization_opportunities" CASCADE;
DROP TABLE IF EXISTS "public"."organizations" CASCADE;
DROP TABLE IF EXISTS "public"."user_interests" CASCADE;
DROP TABLE IF EXISTS "public"."interests" CASCADE;
DROP TABLE IF EXISTS "public"."interest_categories" CASCADE;
DROP TABLE IF EXISTS "public"."user_ai_descriptions" CASCADE;
DROP TABLE IF EXISTS "public"."notifications" CASCADE;
DROP TABLE IF EXISTS "public"."users" CASCADE;
DROP TABLE IF EXISTS "public"."categories" CASCADE;
DROP TABLE IF EXISTS "public"."onboarding_images" CASCADE;

-- Section 2: Table Creation
CREATE TABLE "public"."users" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "name" character varying, "age" smallint, "avatar_url" text, "online" boolean DEFAULT false, "bio" text, "location" text, "personality_type" character varying(4), "emojis" text[], "personality_test_completed" boolean DEFAULT false NOT NULL, "is_admin" boolean DEFAULT false NOT NULL, "created_at" timestamptz DEFAULT now() NOT NULL, "auth_id" uuid UNIQUE REFERENCES auth.users(id) ON DELETE CASCADE
);
CREATE TABLE "public"."interest_categories" ( "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "name" text NOT NULL UNIQUE, "created_at" timestamptz DEFAULT now() NOT NULL );
CREATE TABLE "public"."interests" ( "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "name" text NOT NULL UNIQUE, "category_id" bigint REFERENCES public.interest_categories(id) ON DELETE SET NULL );
CREATE TABLE "public"."user_interests" ( "user_id" bigint NOT NULL REFERENCES public.users(id) ON DELETE CASCADE, "interest_id" bigint NOT NULL REFERENCES public.interests(id) ON DELETE CASCADE, PRIMARY KEY (user_id, interest_id) );
CREATE TABLE "public"."user_profile_images" ( "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "user_id" bigint NOT NULL REFERENCES public.users(id) ON DELETE CASCADE, "image_url" text NOT NULL, "created_at" timestamptz DEFAULT now() NOT NULL );
CREATE TABLE "public"."user_traits" ( "user_id" bigint NOT NULL REFERENCES public.users(id) ON DELETE CASCADE, "trait" character varying NOT NULL, "value" smallint, PRIMARY KEY (user_id, trait) );
CREATE TABLE "public"."organizations" ( "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "name" character varying, "logo_url" text, "address" text, "description" text, "phone" character varying, "email" character varying, "website" character varying, "host_name" character varying, "organization_type" character varying, "facebook_url" character varying, "emojis" text[], "created_at" timestamptz DEFAULT now() NOT NULL, "auth_id" uuid UNIQUE REFERENCES auth.users(id) ON DELETE SET NULL );
CREATE TABLE "public"."organization_opportunities" ( "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "organization_id" bigint NOT NULL REFERENCES public.organizations(id) ON DELETE CASCADE, "name" character varying, "icon" character varying );
CREATE TABLE "public"."organization_updates" ( "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "organization_id" bigint NOT NULL REFERENCES public.organizations(id) ON DELETE CASCADE, "image_url" text );
CREATE TABLE "public"."categories" ( "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "name" text NOT NULL, "parent_id" bigint REFERENCES public.categories(id) ON DELETE CASCADE, "type" text NOT NULL );
CREATE TABLE "public"."events" ( "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "title" character varying, "time" timestamptz, "end_time" timestamptz, "host_name" character varying, "host_avatar_url" text, "icon" character varying, "color" character varying, "description" text, "image_url" text, "address" text, "is_sponsored" boolean DEFAULT false, "offer" text, "organization_id" bigint REFERENCES public.organizations(id) ON DELETE CASCADE, "category_id" bigint REFERENCES public.categories(id) ON DELETE SET NULL, "creator_user_id" bigint REFERENCES public.users(id) ON DELETE SET NULL, "created_at" timestamptz DEFAULT now() NOT NULL );
CREATE TABLE "public"."event_images" ( "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "event_id" bigint NOT NULL REFERENCES public.events(id) ON DELETE CASCADE, "image_url" text NOT NULL, "created_at" timestamptz DEFAULT now() NOT NULL );
CREATE TABLE "public"."event_interests" ( "event_id" bigint NOT NULL REFERENCES public.events(id) ON DELETE CASCADE, "interest_id" bigint NOT NULL REFERENCES public.interests(id) ON DELETE CASCADE, PRIMARY KEY (event_id, interest_id) );
CREATE TABLE "public"."event_participants" ( "event_id" bigint NOT NULL REFERENCES public.events(id) ON DELETE CASCADE, "user_id" bigint NOT NULL REFERENCES public.users(id) ON DELETE CASCADE, PRIMARY KEY (event_id, user_id) );
CREATE TABLE "public"."places" ( "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "name" character varying, "offer" text, "address" text, "user_count" integer, "user_images" text[], "icon" character varying, "description" text, "is_sponsored" boolean, "phone" character varying, "opening_hours" text, "organization_id" bigint REFERENCES public.organizations(id) ON DELETE CASCADE, "image_url" text, "category_id" bigint REFERENCES public.categories(id) ON DELETE SET NULL, "created_at" timestamptz DEFAULT now() NOT NULL );
CREATE TABLE "public"."place_images" ( "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "place_id" bigint NOT NULL REFERENCES public.places(id) ON DELETE CASCADE, "image_url" text NOT NULL, "created_at" timestamptz DEFAULT now() NOT NULL );
CREATE TABLE "public"."message_threads" ( "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "last_message" text, "timestamp" timestamptz, "unread_count" integer, "match_timestamp" timestamptz, "created_at" timestamptz DEFAULT now() NOT NULL, "creator_auth_id" uuid );
CREATE TABLE "public"."message_thread_participants" ( "thread_id" bigint NOT NULL REFERENCES public.message_threads(id) ON DELETE CASCADE, "user_id" bigint NOT NULL REFERENCES public.users(id) ON DELETE CASCADE, PRIMARY KEY (thread_id, user_id) );
CREATE TABLE "public"."messages" ( "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "thread_id" bigint NOT NULL REFERENCES public.message_threads(id) ON DELETE CASCADE, "sender_id" bigint NOT NULL REFERENCES public.users(id) ON DELETE CASCADE, "text" text, "image_url" text, "card_data" jsonb, "created_at" timestamptz DEFAULT now() NOT NULL );
CREATE TABLE "public"."friends" ( "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "user_id_1" bigint NOT NULL REFERENCES public.users(id) ON DELETE CASCADE, "user_id_2" bigint NOT NULL REFERENCES public.users(id) ON DELETE CASCADE, "status" character varying NOT NULL DEFAULT 'pending', "action_user_id" bigint NOT NULL REFERENCES public.users(id) ON DELETE CASCADE, "created_at" timestamptz DEFAULT now() NOT NULL, CONSTRAINT "friends_user_order_check" CHECK (user_id_1 < user_id_2), UNIQUE (user_id_1, user_id_2) );
CREATE TABLE "public"."user_reports" ( "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "reporter_user_id" bigint NOT NULL REFERENCES public.users(id) ON DELETE CASCADE, "reported_user_id" bigint NOT NULL REFERENCES public.users(id) ON DELETE CASCADE, "reason" text NOT NULL, "comment" text, "status" character varying DEFAULT 'new' NOT NULL, "created_at" timestamptz DEFAULT now() NOT NULL );
CREATE TABLE "public"."checkins" ( "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "place_id" bigint NOT NULL REFERENCES public.places(id) ON DELETE CASCADE, "user_id_1" bigint NOT NULL REFERENCES public.users(id) ON DELETE CASCADE, "user_id_2" bigint NOT NULL REFERENCES public.users(id) ON DELETE CASCADE, "created_at" timestamptz DEFAULT now() NOT NULL );
CREATE TABLE "public"."personality_tag_categories" ( "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "name" text NOT NULL UNIQUE, "created_at" timestamptz DEFAULT now() NOT NULL );
CREATE TABLE "public"."personality_tags" ( "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "name" text NOT NULL UNIQUE, "category_id" bigint NOT NULL REFERENCES public.personality_tag_categories(id) ON DELETE CASCADE, "created_at" timestamptz DEFAULT now() NOT NULL );
CREATE TABLE "public"."user_personality_tags" ( "user_id" bigint NOT NULL REFERENCES public.users(id) ON DELETE CASCADE, "tag_id" bigint NOT NULL REFERENCES public.personality_tags(id) ON DELETE CASCADE, PRIMARY KEY (user_id, tag_id) );
CREATE TABLE "public"."activities" ( "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "name" text NOT NULL UNIQUE, "icon" text NOT NULL, "created_at" timestamptz DEFAULT now() NOT NULL );
CREATE TABLE "public"."organization_activities" ( "organization_id" bigint NOT NULL REFERENCES public.organizations(id) ON DELETE CASCADE, "activity_id" bigint NOT NULL REFERENCES public.activities(id) ON DELETE CASCADE, PRIMARY KEY (organization_id, activity_id) );
CREATE TABLE "public"."user_ai_descriptions" ( "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "user_id" bigint NOT NULL REFERENCES public.users(id) ON DELETE CASCADE, "description" text NOT NULL, "created_at" timestamptz DEFAULT now() NOT NULL );
CREATE TABLE "public"."notifications" ( "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "user_id" bigint NOT NULL REFERENCES public.users(id) ON DELETE CASCADE, "actor_id" bigint REFERENCES public.users(id) ON DELETE CASCADE, "type" text NOT NULL, "message" text NOT NULL, "related_entity_id" bigint, "read" boolean DEFAULT false NOT NULL, "created_at" timestamptz DEFAULT now() NOT NULL );
CREATE TABLE "public"."onboarding_images" ( "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "image_url" text NOT NULL, "created_at" timestamptz DEFAULT now() NOT NULL );

-- Section 3: Seed Data (Bypassing RLS)
ALTER TABLE public.users DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.interests DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_interests DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_profile_images DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_traits DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.organizations DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.organization_opportunities DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.organization_updates DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.events DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.event_images DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.event_interests DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.event_participants DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.places DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.place_images DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.message_threads DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.message_thread_participants DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.messages DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.friends DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_reports DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.checkins DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.categories DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.interest_categories DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.personality_tag_categories DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.personality_tags DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_personality_tags DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.activities DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.organization_activities DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_ai_descriptions DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.notifications DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.onboarding_images DISABLE ROW LEVEL SECURITY;

INSERT INTO "public"."users" ("id", "name", "age", "avatar_url", "online", "bio", "location", "personality_type", "emojis", "personality_test_completed", "is_admin", "auth_id") VALUES
(1, 'Anne', 24, 'https://picsum.photos/id/1011/100/100', true, 'Kreativt menneske som elsker film, gaming, katte og gåture. Lad os mødes til en god kaffe 😊', 'Aalborg, Denmark', 'INFJ', ARRAY['😉','🎮','☕'], true, false, 'a0000000-0000-0000-0000-000000000001'),
(2, 'Jens', 26, 'https://picsum.photos/id/1025/100/100', true, 'Elsker natur og brætspil.', 'København, Denmark', 'ESTP', ARRAY['🌳','🎲','🍻'], true, false, 'a0000000-0000-0000-0000-000000000002'),
(4, 'Victoria', 25, 'https://picsum.photos/id/1013/100/100', false, 'Bogelsker og museums-entusiast.', 'Aarhus, Denmark', 'INFP', ARRAY['📚','🎨','🏛️'], true, false, 'a0000000-0000-0000-0000-000000000004'),
(999, 'Mig', 25, 'https://i.pravatar.cc/80?u=999', true, 'Søger nye venner at udforske byen med.', 'Odense, Denmark', 'ENFP', ARRAY['🗺️','🍕','🎵'], true, true, (SELECT id FROM auth.users WHERE email = 'admin@soulmatch.dk'));
SELECT setval(pg_get_serial_sequence('public.users', 'id'), COALESCE((SELECT MAX(id) FROM public.users), 1));

INSERT INTO "public"."user_profile_images" ("user_id", "image_url") VALUES (1, 'https://picsum.photos/seed/cat/200/200'), (1, 'https://picsum.photos/seed/gaming/200/200'), (1, 'https://picsum.photos/seed/coffee/200/200');
INSERT INTO "public"."user_traits" ("user_id", "trait", "value") VALUES (1, 'Abstrakt opfattelse', 70), (1, 'Emotionel tænkning', 80), (1, 'Rationel tænkning', 40), (1, 'Konkret opfattelse', 60);

INSERT INTO "public"."organizations" ("id", "name", "logo_url", "address", "description", "auth_id") VALUES (1, 'SIND Ungdom Aalborg', 'https://i.imgur.com/8S8V5c2.png', 'Danmarksgade 52', 'Et tilbud for unge psykisk sårbare.', (SELECT id FROM auth.users WHERE email = 'org1@soulmatch.dk')), (2, 'Studenterhuset Aalborg', 'https://i.imgur.com/fL5FfJ4.png', 'Gammeltorv 10', 'Aalborgs internationale studenterhus.', (SELECT id FROM auth.users WHERE email = 'org2@soulmatch.dk')), (3, 'Ventilen Aalborg', 'https://i.imgur.com/h5r8uGk.png', 'Kirkegårdsgade 2', 'Et mødested for unge, der føler sig ensomme.', (SELECT id FROM auth.users WHERE email = 'org3@soulmatch.dk'));

INSERT INTO "public"."categories" (id, name, parent_id, type) VALUES (1, 'Social & Fællesskab', NULL, 'event'),(2, 'Sport & Fitness', NULL, 'event'),(3, 'Kultur & Kreativitet', NULL, 'event'),(4, 'Læring & Udvikling', NULL, 'event'),(5, 'Frivillighed & Samfund', NULL, 'event'),(6, 'Livsstil & Velvære', NULL, 'event'),(100, 'Mad & Drikke', NULL, 'place'),(101, 'Underholdning & Fritid', NULL, 'place'),(102, 'Kultur & Læring', NULL, 'place'),(103, 'Fællesskaber & Foreninger', NULL, 'place'),(104, 'Shopping & Oplevelser', NULL, 'place'),(105, 'Velvære & Afslapning', NULL, 'place'),(10, 'Mad & Drikke', 1, 'event'),(11, 'Fester & Socialt', 1, 'event'),(12, 'Spil & Hobby', 1, 'event'),(13, 'Klubber & Foreninger', 1, 'event'),(20, 'Holdsport', 2, 'event'),(21, 'Fitness & Træning', 2, 'event'),(22, 'Udendørs & Eventyr', 2, 'event'),(30, 'Musik & Lyd', 3, 'event'),(31, 'Kunst & Håndværk', 3, 'event'),(32, 'Film & Teater', 3, 'event'),(33, 'Litteratur & Diskussion', 3, 'event'),(40, 'Workshops & Kurser', 4, 'event'),(41, 'Foredrag & Talks', 4, 'event'),(42, 'Professionelt Netværk', 4, 'event'),(50, 'Lokale Projekter', 5, 'event'),(51, 'Velgørenhed', 5, 'event'),(52, 'Miljø & Natur', 5, 'event'),(60, 'Sundhed & Selvomsorg', 6, 'event'),(61, 'Spirituelt & Religion', 6, 'event'),(62, 'Shopping & Markeder', 6, 'event'),(110, 'Café & Kaffebar', 100, 'place'),(111, 'Restaurant & Spisested', 100, 'place'),(112, 'Bar & Værtshus', 100, 'place'),(113, 'Isbutik & Dessertsted', 100, 'place'),(114, 'Bageri & Konditori', 100, 'place'),(115, 'Street Food Marked', 100, 'place'),(116, 'Thehus', 100, 'place'),(120, 'Spillested (Live Musik)', 101, 'place'),(121, 'Biograf', 101, 'place'),(122, 'Parker & Natur', 101, 'place'),(123, 'Sportsklub & Facilitet', 101, 'place'),(124, 'Brætspilscafé', 101, 'place'),(125, 'Bowlinghal & Minigolf', 101, 'place'),(126, 'Escape Room', 101, 'place'),(127, 'Gaming & E-sport Center', 101, 'place'),(130, 'Bibliotek & Museum', 102, 'place'),(131, 'Kreativt Værksted', 102, 'place'),(132, 'Teater & Performance', 102, 'place'),(133, 'Kunstgalleri', 102, 'place'),(134, 'Kursuscenter', 102, 'place'),(140, 'Frivilligcenter', 103, 'place'),(141, 'Kulturhus', 103, 'place'),(142, 'Hobby & Interesse Forening', 103, 'place'),(143, 'Studenterhus', 103, 'place'),(144, 'Ungdomsklub', 103, 'place'),(150, 'Genbrugsbutik', 104, 'place'),(151, 'Specialbutik (fx Plader, Bøger)', 104, 'place'),(152, 'Loppemarked', 104, 'place'),(153, 'Shoppingcenter', 104, 'place'),(160, 'Svømmehal & Spa', 105, 'place'),(161, 'Yogastudie', 105, 'place'),(162, 'Stilleområde (fx Botanisk Have)', 105, 'place') ON CONFLICT(id) DO NOTHING;
SELECT setval(pg_get_serial_sequence('public.categories', 'id'), COALESCE((SELECT MAX(id) FROM public.categories), 1));

INSERT INTO "public"."events" ("id", "title", "time", "host_name", "host_avatar_url", "organization_id", "description", "icon", "color", "category_id", "image_url", "address") VALUES (1, 'Musik koncert sammen', now() + interval '1 hour', 'Jesper', 'https://i.pravatar.cc/80?u=jesper', 2, 'Kom og hør live musik på Studenterhuset!', '🎸', 'bg-blue-100', 30, 'https://picsum.photos/seed/music/400/300', 'Gammeltorv 10, 9000 Aalborg'), (2, 'Fælles spisning', now() + interval '2 hours', 'SIND Ungdom', 'https://i.imgur.com/8S8V5c2.png', 1, 'Hyggelig fællesspisning for alle medlemmer.', '🍔', 'bg-red-100', 10, null, 'Danmarksgade 52, 9000 Aalborg'), (3, 'Fælles brætspil', now() + interval '1 day', 'Ventilen', 'https://i.imgur.com/h5r8uGk.png', 3, 'Vi finder brætspillene frem og hygger.', '🎲', 'bg-green-100', 12, null, 'Kirkegårdsgade 2, 9000 Aalborg');
INSERT INTO "public"."event_participants" (event_id, user_id) VALUES (1, 1), (1, 2), (2, 4), (3, 1), (3, 4);

INSERT INTO "public"."places" ("id", "name", "offer", "address", "user_count", "icon", "category_id", "description", "phone", "opening_hours", "organization_id") VALUES (1, 'Aalborg Brætspilscafe', '2 gratis kaffe', 'Nørregade 27', 12, '🎲', 124, 'En hyggelig cafe for alle brætspilsentusiaster.', '+45 12345678', '14:00 - 23:00', 3);
INSERT INTO "public"."checkins" (place_id, user_id_1, user_id_2) VALUES (1, 1, 2), (1, 4, 999);

INSERT INTO "public"."message_threads" ("id", "last_message", "timestamp", "unread_count", "match_timestamp") VALUES (1, 'Super, er der om 5min vi ses', now() - interval '10 minutes', 0, now() - interval '2 days'), (2, 'Omg! Vildt samme her!', now() - interval '2 hours', 0, now() - interval '1 day');
INSERT INTO "public"."message_thread_participants" (thread_id, user_id) VALUES (1, 1), (1, 999), (2, 2), (2, 999);
INSERT INTO "public"."messages" ("thread_id", "sender_id", "text", "image_url", "created_at") VALUES (1, 999, 'Hej, hvordan går det?', null, now() - interval '1 day'), (1, 1, 'Fint, hvad med dig? 😊', null, now() - interval '1 day' + interval '1 minute'), (1, 999, 'Er du klar til i aften?', null, now() - interval '2 hours'), (1, 1, 'Yes! Glæder mig meget!', null, now() - interval '2 hours' + interval '1 minute'), (1, 1, 'Jeg er her nu 😊🎥', 'https://i.imgur.com/3nQ2nOD.jpg', now() - interval '15 minutes'), (1, 999, 'Super, er der om 5min vi ses', null, now() - interval '10 minutes'), (2, 2, 'Omg! Vildt samme her!', null, now() - interval '5 hours');

INSERT INTO "public"."friends" (user_id_1, user_id_2, status, action_user_id) VALUES (1, 999, 'accepted', 1), (2, 999, 'pending', 2);
SELECT setval(pg_get_serial_sequence('public.friends', 'id'), COALESCE((SELECT MAX(id) FROM public.friends), 1));

INSERT INTO public.onboarding_images (image_url) VALUES ('https://picsum.photos/id/1011/400/400'), ('https://picsum.photos/id/1025/400/400'), ('https://picsum.photos/id/10/400/400'), ('https://picsum.photos/id/1005/400/400'), ('https://picsum.photos/id/1012/400/400'), ('https://picsum.photos/id/1013/400/400'), ('https://picsum.photos/id/1014/400/400');
-- Full seed data for other tables (activities, etc.) would go here.

-- Section 4: Functions & Triggers
CREATE OR REPLACE FUNCTION public.get_current_user_id() RETURNS bigint LANGUAGE sql STABLE AS $$ SELECT id FROM public.users WHERE auth_id = auth.uid() LIMIT 1; $$;
CREATE OR REPLACE FUNCTION public.handle_new_organization_user() RETURNS TRIGGER AS $$ BEGIN IF NEW.raw_user_meta_data->>'is_organization' = 'true' THEN INSERT INTO public.organizations (auth_id, name) VALUES (NEW.id, NEW.raw_user_meta_data->>'full_name'); END IF; RETURN NEW; END; $$ LANGUAGE plpgsql SECURITY DEFINER;
ALTER FUNCTION public.handle_new_organization_user() OWNER TO supabase_auth_admin;
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
CREATE TRIGGER on_auth_user_created AFTER INSERT ON auth.users FOR EACH ROW EXECUTE FUNCTION public.handle_new_organization_user();
CREATE OR REPLACE FUNCTION public.get_or_create_chat_thread(p_friend_id bigint) RETURNS bigint LANGUAGE plpgsql SECURITY DEFINER SET search_path = public AS $$ DECLARE v_current_user_id bigint := get_current_user_id(); v_existing_thread_id bigint; v_new_thread_id bigint; BEGIN SELECT mtp1.thread_id INTO v_existing_thread_id FROM message_thread_participants mtp1 JOIN message_thread_participants mtp2 ON mtp1.thread_id = mtp2.thread_id WHERE mtp1.user_id = v_current_user_id AND mtp2.user_id = p_friend_id; IF v_existing_thread_id IS NOT NULL THEN UPDATE message_threads SET match_timestamp = now() WHERE id = v_existing_thread_id; RETURN v_existing_thread_id; ELSE INSERT INTO message_threads (creator_auth_id, match_timestamp) VALUES (auth.uid(), now()) RETURNING id INTO v_new_thread_id; INSERT INTO message_thread_participants (thread_id, user_id) VALUES (v_new_thread_id, v_current_user_id), (v_new_thread_id, p_friend_id); RETURN v_new_thread_id; END IF; END; $$;
CREATE OR REPLACE FUNCTION public.admin_match_all_users() RETURNS text LANGUAGE plpgsql SECURITY DEFINER SET search_path = public AS $$ DECLARE v_current_user_id bigint := get_current_user_id(); v_is_current_user_admin boolean; v_user_ids bigint[]; i int; j int; v_new_thread_id bigint; v_pair_count int := 0; BEGIN SELECT is_admin INTO v_is_current_user_admin FROM public.users WHERE id = v_current_user_id; IF NOT v_is_current_user_admin THEN RAISE EXCEPTION 'Permission denied. User is not an admin.'; END IF; TRUNCATE public.message_thread_participants, public.messages, public.message_threads RESTART IDENTITY; SELECT array_agg(id) INTO v_user_ids FROM public.users; IF array_length(v_user_ids, 1) > 1 THEN FOR i IN 1..array_length(v_user_ids, 1) LOOP FOR j IN (i + 1)..array_length(v_user_ids, 1) LOOP INSERT INTO message_threads (creator_auth_id, match_timestamp) VALUES (auth.uid(), now()) RETURNING id INTO v_new_thread_id; INSERT INTO message_thread_participants (thread_id, user_id) VALUES (v_new_thread_id, v_user_ids[i]), (v_new_thread_id, v_user_ids[j]); v_pair_count := v_pair_count + 1; END LOOP; END LOOP; END IF; RETURN 'Success! Matched ' || v_pair_count || ' pairs.'; END; $$;
CREATE OR REPLACE FUNCTION public.handle_new_friend_request_notification() RETURNS TRIGGER LANGUAGE plpgsql SECURITY DEFINER AS $$ DECLARE recipient_user_id bigint; notification_message text; BEGIN IF TG_OP = 'INSERT' AND NEW.status = 'pending' THEN IF NEW.user_id_1 = NEW.action_user_id THEN recipient_user_id := NEW.user_id_2; ELSE recipient_user_id := NEW.user_id_1; END IF; notification_message := 'sendte dig en venneanmodning'; INSERT INTO public.notifications (user_id, actor_id, type, message, related_entity_id) VALUES (recipient_user_id, NEW.action_user_id, 'friend_request', notification_message, NEW.id); END IF; RETURN NEW; END; $$;
DROP TRIGGER IF EXISTS on_new_friend_request ON public.friends;
CREATE TRIGGER on_new_friend_request AFTER INSERT ON public.friends FOR EACH ROW EXECUTE FUNCTION public.handle_new_friend_request_notification();
CREATE OR REPLACE FUNCTION public.handle_new_message_notification() RETURNS TRIGGER LANGUAGE plpgsql SECURITY DEFINER SET search_path = public AS $$ DECLARE recipient_user_id bigint; notification_message text; BEGIN SELECT user_id INTO recipient_user_id FROM message_thread_participants WHERE thread_id = NEW.thread_id AND user_id != NEW.sender_id LIMIT 1; IF recipient_user_id IS NOT NULL THEN notification_message := 'sendte dig en besked'; INSERT INTO public.notifications (user_id, actor_id, type, message, related_entity_id) VALUES (recipient_user_id, NEW.sender_id, 'message', notification_message, NEW.thread_id); END IF; RETURN NEW; END; $$;
DROP TRIGGER IF EXISTS on_new_message ON public.messages;
CREATE TRIGGER on_new_message AFTER INSERT ON public.messages FOR EACH ROW EXECUTE FUNCTION public.handle_new_message_notification();
CREATE OR REPLACE FUNCTION public.add_interests_to_event(p_event_id bigint, p_interest_ids int[]) RETURNS void LANGUAGE plpgsql SECURITY DEFINER SET search_path = public AS $$ DECLARE interest_id_val int; is_authorized boolean; BEGIN SELECT EXISTS (SELECT 1 FROM events e WHERE e.id = p_event_id AND (e.creator_user_id = (SELECT u.id FROM users u WHERE u.auth_id = auth.uid()) OR e.organization_id IN (SELECT o.id FROM organizations o WHERE o.auth_id = auth.uid()))) INTO is_authorized; IF NOT is_authorized THEN RAISE EXCEPTION 'Permission denied to modify interests for this event.'; END IF; DELETE FROM event_interests WHERE event_id = p_event_id; IF array_length(p_interest_ids, 1) > 0 THEN FOREACH interest_id_val IN ARRAY p_interest_ids LOOP INSERT INTO event_interests(event_id, interest_id) VALUES(p_event_id, interest_id_val); END LOOP; END IF; END; $$;
CREATE OR REPLACE FUNCTION public.is_thread_participant(p_thread_id bigint) RETURNS boolean LANGUAGE sql SECURITY DEFINER SET search_path = public AS $$ SELECT EXISTS (SELECT 1 FROM message_thread_participants WHERE thread_id = p_thread_id AND user_id = get_current_user_id()); $$;
GRANT EXECUTE ON FUNCTION public.get_current_user_id() TO authenticated, anon;
GRANT EXECUTE ON FUNCTION public.get_or_create_chat_thread(bigint) TO authenticated;
GRANT EXECUTE ON FUNCTION public.admin_match_all_users() TO authenticated;
GRANT EXECUTE ON FUNCTION public.is_thread_participant(bigint) TO authenticated;
GRANT EXECUTE ON FUNCTION public.add_interests_to_event(bigint, int[]) TO authenticated;

-- Section 5: Row Level Security (RLS)
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow public read access to users" ON public.users FOR SELECT USING (true);
CREATE POLICY "Allow users to update their own profile" ON public.users FOR UPDATE USING (auth.uid() = auth_id);
CREATE POLICY "Allow users to create their own profile" ON public.users FOR INSERT WITH CHECK (auth.uid() = auth_id);

ALTER TABLE public.interests ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow public read access to interests" ON public.interests FOR SELECT USING (true);
CREATE POLICY "Allow authenticated users to add new interests" ON public.interests FOR INSERT WITH CHECK (auth.role() = 'authenticated');

ALTER TABLE public.user_interests ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow users to see all user interests" ON public.user_interests FOR SELECT USING (true);
CREATE POLICY "Allow users to manage their own interests" ON public.user_interests FOR ALL USING ((SELECT auth_id FROM public.users WHERE id = user_id) = auth.uid());

ALTER TABLE public.user_profile_images ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow users to see profile images" ON public.user_profile_images FOR SELECT USING (true);
CREATE POLICY "Allow users to manage their own images" ON public.user_profile_images FOR ALL USING ((SELECT auth_id FROM public.users WHERE id = user_id) = auth.uid());

ALTER TABLE public.user_traits ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow users to manage their own traits" ON public.user_traits FOR ALL USING ((SELECT auth_id FROM public.users WHERE id = user_id) = auth.uid());

ALTER TABLE public.organizations ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow public read access to organizations" ON public.organizations FOR SELECT USING (true);
CREATE POLICY "Allow organization owner to update their profile" ON public.organizations FOR UPDATE USING (auth.uid() = auth_id);

ALTER TABLE public.events ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow public read access to events" ON public.events FOR SELECT USING (true);
CREATE POLICY "Allow authenticated users to create events" ON public.events FOR INSERT WITH CHECK (auth.role() = 'authenticated');
CREATE POLICY "Allow event owners to update their events" ON public.events FOR UPDATE USING (((SELECT auth_id FROM public.organizations WHERE id = organization_id) = auth.uid()) OR ((SELECT id FROM public.users WHERE auth_id = auth.uid()) = creator_user_id));
CREATE POLICY "Allow event owners to delete their events" ON public.events FOR DELETE USING (((SELECT auth_id FROM public.organizations WHERE id = organization_id) = auth.uid()) OR ((SELECT id FROM public.users WHERE auth_id = auth.uid()) = creator_user_id));

ALTER TABLE public.event_images ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow public read access to event images" ON public.event_images FOR SELECT USING (true);
CREATE POLICY "Allow event creators to manage event images" ON public.event_images FOR ALL USING (((SELECT creator_user_id FROM public.events WHERE id = event_id) = get_current_user_id()) OR ((SELECT organization_id FROM public.events WHERE id = event_id) IN (SELECT id FROM public.organizations WHERE auth_id = auth.uid())));

ALTER TABLE public.event_interests ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow public read access to event interests" ON public.event_interests FOR SELECT USING (true);
CREATE POLICY "Allow event creators to manage event interests" ON public.event_interests FOR ALL USING (((SELECT creator_user_id FROM public.events WHERE id = event_id) = get_current_user_id()) OR ((SELECT organization_id FROM public.events WHERE id = event_id) IN (SELECT id FROM public.organizations WHERE auth_id = auth.uid())));

ALTER TABLE public.places ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow public read access to places" ON public.places FOR SELECT USING (true);
CREATE POLICY "Allow org owner to manage their places" ON public.places FOR ALL USING ((SELECT auth_id FROM public.organizations WHERE id = organization_id) = auth.uid());

ALTER TABLE public.message_threads ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow access to own message threads" ON public.message_threads FOR ALL USING (is_thread_participant(id));

ALTER TABLE public.message_thread_participants ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow access to own thread participants" ON public.message_thread_participants FOR ALL USING (is_thread_participant(thread_id));

ALTER TABLE public.messages ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow read access to messages in own threads" ON public.messages FOR SELECT USING (is_thread_participant(thread_id));
CREATE POLICY "Allow insert of own messages" ON public.messages FOR INSERT WITH CHECK (sender_id = get_current_user_id());
CREATE POLICY "Allow update/delete of own messages" ON public.messages FOR UPDATE, DELETE USING (sender_id = get_current_user_id());

ALTER TABLE public.friends ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow users to see their own friendships" ON public.friends FOR SELECT USING (((SELECT auth_id FROM public.users WHERE id = user_id_1) = auth.uid()) OR ((SELECT auth_id FROM public.users WHERE id = user_id_2) = auth.uid()));
CREATE POLICY "Allow users to create friendships" ON public.friends FOR INSERT WITH CHECK ((SELECT auth_id FROM public.users WHERE id = action_user_id) = auth.uid());
CREATE POLICY "Allow users to update/delete their own friendships" ON public.friends FOR ALL USING (((SELECT auth_id FROM public.users WHERE id = user_id_1) = auth.uid()) OR ((SELECT auth_id FROM public.users WHERE id = user_id_2) = auth.uid()));

ALTER TABLE public.user_ai_descriptions ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can manage their own AI descriptions" ON public.user_ai_descriptions FOR ALL USING ((SELECT auth_id FROM public.users WHERE id = user_id) = auth.uid());

ALTER TABLE public.notifications ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Users can only access their own notifications" ON public.notifications FOR ALL USING ((SELECT auth_id FROM public.users WHERE id = user_id) = auth.uid());

ALTER TABLE public.onboarding_images ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow public read access to onboarding images" ON public.onboarding_images FOR SELECT USING (true);

-- Section 6: Grants
REVOKE ALL ON ALL TABLES IN SCHEMA public FROM public, anon, authenticated;
GRANT SELECT ON ALL TABLES IN SCHEMA public TO authenticated, anon;
GRANT INSERT, UPDATE, DELETE ON public.users, public.interests, public.user_interests, public.user_profile_images, public.user_traits, public.events, public.event_participants, public.event_images, public.event_interests, public.messages, public.friends, public.user_reports, public.organizations, public.places, public.place_images, public.checkins, public.message_threads, public.message_thread_participants, public.user_ai_descriptions, public.notifications TO authenticated;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO authenticated;
REVOKE ALL ON ALL SEQUENCES IN SCHEMA public FROM anon;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO authenticated;