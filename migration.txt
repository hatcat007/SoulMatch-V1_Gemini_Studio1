-- SoulMatch Supabase Schema & Migration
-- version: 5.0

-- Section 1: Table Dropping
-- Drop tables in reverse order of dependency, using CASCADE to handle RLS policies and other dependencies.
DROP TABLE IF EXISTS "public"."friends" CASCADE;
DROP TABLE IF EXISTS "public"."messages" CASCADE;
DROP TABLE IF EXISTS "public"."user_profile_images" CASCADE;
DROP TABLE IF EXISTS "public"."message_thread_participants" CASCADE;
DROP TABLE IF EXISTS "public"."user_traits" CASCADE;
DROP TABLE IF EXISTS "public"."event_participants" CASCADE;
DROP TABLE IF EXISTS "public"."organization_updates" CASCADE;
DROP TABLE IF EXISTS "public"."organization_opportunities" CASCADE;
DROP TABLE IF EXISTS "public"."places" CASCADE;
DROP TABLE IF EXISTS "public"."message_threads" CASCADE;
DROP TABLE IF EXISTS "public"."events" CASCADE;
DROP TABLE IF EXISTS "public"."organizations" CASCADE;
DROP TABLE IF EXISTS "public"."user_interests" CASCADE;
DROP TABLE IF EXISTS "public"."interests" CASCADE;
DROP TABLE IF EXISTS "public"."users" CASCADE;

-- Section 2: Table Creation
CREATE TABLE "public"."users" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "name" character varying,
    "age" smallint,
    "avatar_url" text,
    "online" boolean DEFAULT false,
    "bio" text,
    "location" text,
    "personality_type" character varying(4),
    "emojis" text[],
    "personality_test_completed" boolean DEFAULT false NOT NULL,
    "created_at" timestamptz DEFAULT now() NOT NULL,
    "auth_id" uuid UNIQUE REFERENCES auth.users(id) ON DELETE CASCADE
);

CREATE TABLE "public"."interests" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "name" text NOT NULL UNIQUE
);

CREATE TABLE "public"."user_interests" (
    "user_id" bigint NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    "interest_id" bigint NOT NULL REFERENCES public.interests(id) ON DELETE CASCADE,
    PRIMARY KEY (user_id, interest_id)
);

CREATE TABLE "public"."user_profile_images" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "user_id" bigint NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    "image_url" text NOT NULL,
    "created_at" timestamptz DEFAULT now() NOT NULL
);

CREATE TABLE "public"."user_traits" (
    "user_id" bigint NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    "trait" character varying NOT NULL,
    "value" smallint,
    PRIMARY KEY (user_id, trait)
);

CREATE TABLE "public"."organizations" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "name" character varying,
    "logo_url" text,
    "address" text,
    "description" text,
    "phone" character varying,
    "email" character varying,
    "website" character varying,
    "created_at" timestamptz DEFAULT now() NOT NULL
);

CREATE TABLE "public"."organization_opportunities" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "organization_id" bigint NOT NULL REFERENCES public.organizations(id) ON DELETE CASCADE,
    "name" character varying,
    "icon" character varying
);

CREATE TABLE "public"."organization_updates" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "organization_id" bigint NOT NULL REFERENCES public.organizations(id) ON DELETE CASCADE,
    "image_url" text
);

CREATE TABLE "public"."events" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "title" character varying,
    "time" timestamptz,
    "host_name" character varying,
    "host_avatar_url" text,
    "icon" character varying,
    "color" character varying,
    "category" character varying,
    "description" text,
    "organization_id" bigint REFERENCES public.organizations(id),
    "created_at" timestamptz DEFAULT now() NOT NULL
);

CREATE TABLE "public"."event_participants" (
    "event_id" bigint NOT NULL REFERENCES public.events(id) ON DELETE CASCADE,
    "user_id" bigint NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    PRIMARY KEY (event_id, user_id)
);

CREATE TABLE "public"."places" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "name" character varying,
    "offer" text,
    "address" text,
    "user_count" integer,
    "user_images" text[],
    "icon" character varying,
    "category" character varying,
    "description" text,
    "is_sponsored" boolean,
    "phone" character varying,
    "opening_hours" text,
    "created_at" timestamptz DEFAULT now() NOT NULL
);

CREATE TABLE "public"."message_threads" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "last_message" text,
    "timestamp" timestamptz,
    "unread_count" integer,
    "match_timestamp" timestamptz,
    "created_at" timestamptz DEFAULT now() NOT NULL
);

CREATE TABLE "public"."message_thread_participants" (
    "thread_id" bigint NOT NULL REFERENCES public.message_threads(id) ON DELETE CASCADE,
    "user_id" bigint NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    PRIMARY KEY (thread_id, user_id)
);

CREATE TABLE "public"."messages" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "thread_id" bigint NOT NULL REFERENCES public.message_threads(id) ON DELETE CASCADE,
    "sender_id" bigint NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    "text" text,
    "image_url" text,
    "created_at" timestamptz DEFAULT now() NOT NULL
);

CREATE TABLE "public"."friends" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "user_id_1" bigint NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    "user_id_2" bigint NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    "status" character varying NOT NULL DEFAULT 'pending', -- pending, accepted, blocked
    "action_user_id" bigint NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    "created_at" timestamptz DEFAULT now() NOT NULL,
    CONSTRAINT "friends_user_order_check" CHECK (user_id_1 < user_id_2),
    UNIQUE (user_id_1, user_id_2)
);

-- Section 3: Seed Data
-- Bypassing RLS for seeding. In a real environment, this would be done by a privileged user.
ALTER TABLE public.users DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.interests DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_interests DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_profile_images DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_traits DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.organizations DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.events DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.message_threads DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.message_thread_participants DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.messages DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.event_participants DISABLE ROW LEVEL SECURITY;
ALTER TABLE public.friends DISABLE ROW LEVEL SECURITY;

INSERT INTO "public"."users" ("id", "name", "age", "avatar_url", "online", "bio", "location", "personality_type", "emojis", "personality_test_completed") VALUES
(1, 'Anne', 24, 'https://picsum.photos/id/1011/100/100', true, 'Kreativt menneske som elsker film, gaming, katte og gåture. Lad os mødes til en god kaffe 😊', 'Aalborg, Denmark', 'INFJ', ARRAY['😉','🎮','☕'], true),
(2, 'Jens', 26, 'https://picsum.photos/id/1025/100/100', true, 'Elsker natur og brætspil.', 'København, Denmark', 'ESTP', ARRAY['🌳','🎲','🍻'], true),
(4, 'Victoria', 25, 'https://picsum.photos/id/1013/100/100', false, 'Bogelsker og museums-entusiast.', 'Aarhus, Denmark', 'INFP', ARRAY['📚','🎨','🏛️'], true),
(999, 'Mig', 25, 'https://i.pravatar.cc/80?u=999', true, 'Søger nye venner at udforske byen med.', 'Odense, Denmark', 'ENFP', ARRAY['🗺️','🍕','🎵'], true);

INSERT INTO "public"."interests" ("id", "name") VALUES
(1, 'Gaming'), (2, 'Film'), (3, 'Kaffe'), (4, 'Brætspil'), (5, 'Musik'), (6, 'Gåtur'), (7, 'Madlavning'), (8, 'Fotografering'), (9, 'Bøger');

INSERT INTO "public"."user_interests" ("user_id", "interest_id") VALUES
(1, 1), (1, 2), (1, 3), (1, 6),
(2, 4), (2, 6),
(4, 9),
(999, 5);

INSERT INTO "public"."user_profile_images" ("user_id", "image_url") VALUES
(1, 'https://picsum.photos/seed/cat/200/200'),
(1, 'https://picsum.photos/seed/gaming/200/200'),
(1, 'https://picsum.photos/seed/coffee/200/200');

INSERT INTO "public"."user_traits" ("user_id", "trait", "value") VALUES
(1, 'Abstrakt opfattelse', 70),
(1, 'Emotionel tænkning', 80),
(1, 'Rationel tænkning', 40),
(1, 'Konkret opfattelse', 60);

INSERT INTO "public"."organizations" ("id", "name", "logo_url", "address", "description") VALUES
(1, 'SIND Ungdom Aalborg', 'https://i.imgur.com/8S8V5c2.png', 'Danmarksgade 52', 'Et tilbud for unge psykisk sårbare.'),
(2, 'Studenterhuset Aalborg', 'https://i.imgur.com/fL5FfJ4.png', 'Gammeltorv 10', 'Aalborgs internationale studenterhus.'),
(3, 'Ventilen Aalborg', 'https://i.imgur.com/h5r8uGk.png', 'Kirkegårdsgade 2', 'Et mødested for unge, der føler sig ensomme.');

INSERT INTO "public"."events" ("id", "title", "time", "host_name", "organization_id", "description", "icon", "color", "category") VALUES
(1, 'Musik koncert sammen', now() + interval '1 hour', 'Jesper', 2, 'Kom og hør live musik på Studenterhuset!', '🎸', 'bg-blue-100', 'Musik'),
(2, 'Fælles spisning', now() + interval '2 hours', 'SIND Ungdom', 1, 'Hyggelig fællesspisning for alle medlemmer.', '🍔', 'bg-red-100', 'Mad'),
(3, 'Fælles brætspil', now() + interval '1 day', 'Ventilen', 3, 'Vi finder brætspillene frem og hygger.', '🎲', 'bg-green-100', 'Brætspil');

INSERT INTO "public"."message_threads" ("id", "last_message", "timestamp", "unread_count", "match_timestamp") VALUES
(1, 'Super, er der om 5min vi ses', now() - interval '10 minutes', 0, now() - interval '2 days'),
(2, 'Omg! Vildt samme her!', now() - interval '2 hours', 0, now() - interval '1 day');

INSERT INTO "public"."message_thread_participants" (thread_id, user_id) VALUES
(1, 1), (1, 999),
(2, 2), (2, 999);

INSERT INTO "public"."messages" ("thread_id", "sender_id", "text", "image_url", "created_at") VALUES
(1, 999, 'Hej, hvordan går det?', null, now() - interval '1 day'),
(1, 1, 'Fint, hvad med dig? 😊', null, now() - interval '1 day' + interval '1 minute'),
(1, 999, 'Er du klar til i aften?', null, now() - interval '2 hours'),
(1, 1, 'Yes! Glæder mig meget!', null, now() - interval '2 hours' + interval '1 minute'),
(1, 1, 'Jeg er her nu 😊🎥', 'https://i.imgur.com/3nQ2nOD.jpg', now() - interval '15 minutes'),
(1, 999, 'Super, er der om 5min vi ses', null, now() - interval '10 minutes'),
(2, 2, 'Omg! Vildt samme her!', null, now() - interval '5 hours');

INSERT INTO "public"."event_participants" (event_id, user_id) VALUES
(1, 1), (1, 2), (2, 4), (3, 1), (3, 4);

INSERT INTO "public"."friends" (user_id_1, user_id_2, status, action_user_id) VALUES
(1, 999, 'accepted', 1), -- Anne and Me are friends
(2, 999, 'pending', 2); -- Jens sent a request to Me

-- Sync primary key sequences after manually inserting IDs to prevent duplicate key errors
SELECT setval(pg_get_serial_sequence('public.users', 'id'), COALESCE((SELECT MAX(id) FROM public.users), 1));
SELECT setval(pg_get_serial_sequence('public.interests', 'id'), COALESCE((SELECT MAX(id) FROM public.interests), 1));
SELECT setval(pg_get_serial_sequence('public.friends', 'id'), COALESCE((SELECT MAX(id) FROM public.friends), 1));

-- Section 4: Row Level Security (RLS)
-- Re-enable RLS for all tables after seeding
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.interests ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_interests ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_profile_images ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_traits ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.organizations ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.organization_opportunities ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.organization_updates ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.events ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.places ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.event_participants ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.message_threads ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.message_thread_participants ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.messages ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.friends ENABLE ROW LEVEL SECURITY;

-- RLS Policies
-- Users
CREATE POLICY "Allow public read access to users" ON public.users FOR SELECT USING (true);
CREATE POLICY "Allow users to update their own profile" ON public.users FOR UPDATE USING (auth.uid() = auth_id);
CREATE POLICY "Allow users to create their own profile" ON public.users FOR INSERT WITH CHECK (auth.uid() = auth_id);
-- Interests
CREATE POLICY "Allow public read access to interests" ON public.interests FOR SELECT USING (true);
CREATE POLICY "Allow authenticated users to add new interests" ON public.interests FOR INSERT WITH CHECK (auth.role() = 'authenticated');
-- User Interests
CREATE POLICY "Allow users to see all user interests" ON public.user_interests FOR SELECT USING (true);
CREATE POLICY "Allow users to manage their own interests" ON public.user_interests FOR ALL USING (
    (SELECT auth_id FROM public.users WHERE id = user_id) = auth.uid()
);
-- User Profile Images
CREATE POLICY "Allow users to see profile images" ON public.user_profile_images FOR SELECT USING (true);
CREATE POLICY "Allow users to manage their own images" ON public.user_profile_images FOR ALL USING (
    (SELECT auth_id FROM public.users WHERE id = user_id) = auth.uid()
);
-- User Traits
CREATE POLICY "Allow users to manage their own traits" ON public.user_traits FOR ALL USING (
    (SELECT auth_id FROM public.users WHERE id = user_id) = auth.uid()
);
-- Events
CREATE POLICY "Allow public read access to events" ON public.events FOR SELECT USING (true);
CREATE POLICY "Allow authenticated users to create events" ON public.events FOR INSERT WITH CHECK (auth.role() = 'authenticated');
-- Event Participants
CREATE POLICY "Allow public read access to event participants" ON public.event_participants FOR SELECT USING (true);
CREATE POLICY "Allow users to manage their own event participation" ON public.event_participants FOR ALL USING (
    (SELECT auth_id FROM public.users WHERE id = user_id) = auth.uid()
);
-- Messages and Threads
CREATE POLICY "Allow users to access their own threads" ON public.message_threads FOR SELECT USING (
    id IN (
        SELECT thread_id FROM public.message_thread_participants 
        WHERE user_id IN (SELECT id from public.users where auth_id = auth.uid())
    )
);
CREATE POLICY "Allow users to see their own messages" ON public.messages FOR SELECT USING (
    thread_id IN (
        SELECT thread_id FROM public.message_thread_participants 
        WHERE user_id IN (SELECT id from public.users where auth_id = auth.uid())
    )
);
CREATE POLICY "Allow users to send messages in their threads" ON public.messages FOR INSERT WITH CHECK (
    thread_id IN (
        SELECT thread_id FROM public.message_thread_participants 
        WHERE user_id IN (SELECT id from public.users where auth_id = auth.uid())
    )
    AND sender_id IN (SELECT id from public.users where auth_id = auth.uid())
);
-- Organizations
CREATE POLICY "Allow public read access to organizations" ON public.organizations FOR SELECT USING (true);
CREATE POLICY "Allow public read access to organization opportunities" ON public.organization_opportunities FOR SELECT USING (true);
CREATE POLICY "Allow public read access to organization updates" ON public.organization_updates FOR SELECT USING (true);
-- Friends
CREATE POLICY "Allow users to see their own friendships" ON public.friends FOR SELECT USING (
    (SELECT auth_id FROM public.users WHERE id = user_id_1) = auth.uid() OR
    (SELECT auth_id FROM public.users WHERE id = user_id_2) = auth.uid()
);
CREATE POLICY "Allow users to create friendships" ON public.friends FOR INSERT WITH CHECK (
    (SELECT auth_id FROM public.users WHERE id = action_user_id) = auth.uid()
);
CREATE POLICY "Allow users to update/delete their own friendships" ON public.friends FOR ALL USING (
    (SELECT auth_id FROM public.users WHERE id = user_id_1) = auth.uid() OR
    (SELECT auth_id FROM public.users WHERE id = user_id_2) = auth.uid()
);

-- Section 5: Grants
REVOKE ALL ON ALL TABLES IN SCHEMA public FROM public, anon, authenticated;
GRANT SELECT ON ALL TABLES IN SCHEMA public TO authenticated, anon;
GRANT INSERT, UPDATE, DELETE ON public.users, public.interests, public.user_interests, public.user_profile_images, public.user_traits, public.events, public.event_participants, public.messages, public.friends TO authenticated;
GRANT USAGE ON ALL SEQUENCES IN SCHEMA public TO authenticated;
REVOKE ALL ON ALL SEQUENCES IN SCHEMA public FROM anon;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO authenticated;