-- SoulMatch Migration
-- version: 13.0
-- Implements a hierarchical, database-driven interest category system.

-- 1. Create the new interest_categories table
CREATE TABLE IF NOT EXISTS "public"."interest_categories" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "name" text NOT NULL UNIQUE,
    "created_at" timestamptz DEFAULT now() NOT NULL
);

-- 2. Add category_id to interests table
ALTER TABLE public.interests
ADD COLUMN IF NOT EXISTS category_id bigint REFERENCES public.interest_categories(id) ON DELETE SET NULL;

-- 3. Populate the new categories table
-- Using ON CONFLICT DO NOTHING to make it safe to re-run
INSERT INTO public.interest_categories (id, name) VALUES
(1, 'Kreativt & Hobby'),
(2, 'Sport & Fitness'),
(3, 'Gaming & Tech'),
(4, 'Mad & Drikke'),
(5, 'Udendørs & Rejser'),
(6, 'Socialt & Fællesskab'),
(7, 'Musik & Kultur')
ON CONFLICT (id) DO NOTHING;

-- Reset sequence to avoid conflicts if IDs were manually inserted
SELECT setval(pg_get_serial_sequence('public.interest_categories', 'id'), COALESCE((SELECT MAX(id) FROM public.interest_categories), 1));


-- 4. Map existing interests to new categories
-- This maps the initial seed data. Any user-added interests might not be categorized.
UPDATE public.interests SET category_id = 3 WHERE name IN ('Gaming', 'Brætspil');
UPDATE public.interests SET category_id = 7 WHERE name IN ('Film', 'Musik');
UPDATE public.interests SET category_id = 4 WHERE name IN ('Kaffe', 'Madlavning');
UPDATE public.interests SET category_id = 5 WHERE name IN ('Gåtur');
UPDATE public.interests SET category_id = 1 WHERE name IN ('Fotografering', 'Bøger');

-- 5. Enable RLS and set policies
ALTER TABLE public.interest_categories ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Allow public read access to interest categories" ON public.interest_categories;
CREATE POLICY "Allow public read access to interest categories" ON public.interest_categories FOR SELECT USING (true);

DROP POLICY IF EXISTS "Allow admin to manage interest categories" ON public.interest_categories;
CREATE POLICY "Allow admin to manage interest categories" ON public.interest_categories FOR ALL USING ((
    SELECT is_admin FROM public.users WHERE auth_id = auth.uid()
) = true);

-- 6. Grants
GRANT SELECT ON public.interest_categories TO authenticated, anon;
GRANT INSERT, UPDATE, DELETE ON public.interest_categories TO authenticated; -- For admins only via RLS