-- SoulMatch Migration
-- version: 20.0
-- Fixes RLS policies for user-created content and adds an RPC for linking interests to events.

-- 1. Update RLS Policy for event_images
-- This policy allows event creators (both users and orgs) to manage images for their events.
DROP POLICY IF EXISTS "Allow org owners to manage event images" ON public.event_images;
DROP POLICY IF EXISTS "Allow event creators to manage their event images" ON public.event_images;

CREATE POLICY "Allow event creators to manage their event images"
ON public.event_images
FOR ALL USING (
    -- Case 1: The current user is the direct creator of the event
    (SELECT creator_user_id FROM public.events WHERE id = event_id) = (SELECT id FROM public.users WHERE auth_id = auth.uid())
    OR
    -- Case 2: The current user is part of the organization that owns the event
    (SELECT organization_id FROM public.events WHERE id = event_id) IN (SELECT id FROM public.organizations WHERE auth_id = auth.uid())
);


-- 2. Update RLS Policy for event_interests for consistency
-- This ensures the policy is robust and matches the one for images.
DROP POLICY IF EXISTS "Allow event creators to manage their event interests" ON public.event_interests;

CREATE POLICY "Allow event creators to manage their event interests"
ON public.event_interests
FOR ALL USING (
    -- Case 1: The current user is the direct creator of the event
    (SELECT creator_user_id FROM public.events WHERE id = event_id) = (SELECT id FROM public.users WHERE auth_id = auth.uid())
    OR
    -- Case 2: The current user is part of the organization that owns the event
    (SELECT organization_id FROM public.events WHERE id = event_id) IN (SELECT id FROM public.organizations WHERE auth_id = auth.uid())
);


-- 3. Create RPC function to add interests to an event
-- This helps bypass potential schema cache issues and simplifies client-side logic.
CREATE OR REPLACE FUNCTION public.add_interests_to_event(p_event_id bigint, p_interest_ids int[])
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  interest_id_val int;
  is_authorized boolean;
BEGIN
  -- Manual authorization check because SECURITY DEFINER bypasses RLS
  SELECT EXISTS (
    SELECT 1 FROM events e
    WHERE e.id = p_event_id
    AND (
      -- User is the direct creator
      e.creator_user_id = (SELECT u.id FROM users u WHERE u.auth_id = auth.uid())
      OR
      -- User is part of the organization that created it
      e.organization_id IN (SELECT o.id FROM organizations o WHERE o.auth_id = auth.uid())
    )
  ) INTO is_authorized;

  IF NOT is_authorized THEN
    RAISE EXCEPTION 'Permission denied to modify interests for this event.';
  END IF;

  -- Clear existing interests for simplicity before adding new ones
  DELETE FROM event_interests WHERE event_id = p_event_id;

  -- Insert the new interests
  IF array_length(p_interest_ids, 1) > 0 THEN
    FOREACH interest_id_val IN ARRAY p_interest_ids LOOP
      INSERT INTO event_interests(event_id, interest_id)
      VALUES(p_event_id, interest_id_val);
    END LOOP;
  END IF;
END;
$$;

-- 4. Grant execute permissions on the new function
GRANT EXECUTE ON FUNCTION public.add_interests_to_event(bigint, int[]) TO authenticated;