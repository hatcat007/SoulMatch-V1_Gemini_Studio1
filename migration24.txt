-- Migration 24: Add Activities and Interests to Places

-- 1. Create join table for places and activities
CREATE TABLE IF NOT EXISTS "public"."place_activities" (
    "place_id" bigint NOT NULL,
    "activity_id" bigint NOT NULL,
    CONSTRAINT "place_activities_pkey" PRIMARY KEY (place_id, activity_id),
    CONSTRAINT "place_activities_place_id_fkey" FOREIGN KEY (place_id) REFERENCES public.places(id) ON DELETE CASCADE,
    CONSTRAINT "place_activities_activity_id_fkey" FOREIGN KEY (activity_id) REFERENCES public.activities(id) ON DELETE CASCADE
);

-- 2. Create join table for places and interests
CREATE TABLE IF NOT EXISTS "public"."place_interests" (
    "place_id" bigint NOT NULL,
    "interest_id" bigint NOT NULL,
    CONSTRAINT "place_interests_pkey" PRIMARY KEY (place_id, interest_id),
    CONSTRAINT "place_interests_place_id_fkey" FOREIGN KEY (place_id) REFERENCES public.places(id) ON DELETE CASCADE,
    CONSTRAINT "place_interests_interest_id_fkey" FOREIGN KEY (interest_id) REFERENCES public.interests(id) ON DELETE CASCADE
);

-- 3. Enable RLS on new tables
ALTER TABLE "public"."place_activities" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "public"."place_interests" ENABLE ROW LEVEL SECURITY;

-- 4. Add RLS Policies
-- Public can read
CREATE POLICY "Allow public read access on place_activities" ON "public"."place_activities" FOR SELECT USING (true);
CREATE POLICY "Allow public read access on place_interests" ON "public"."place_interests" FOR SELECT USING (true);

-- Organization owners can manage
CREATE POLICY "Allow org owners to manage their place activities"
ON "public"."place_activities"
FOR ALL USING (
    (SELECT organization_id FROM public.places WHERE id = place_id) IN (SELECT id FROM public.organizations WHERE auth_id = auth.uid())
);
CREATE POLICY "Allow org owners to manage their place interests"
ON "public"."place_interests"
FOR ALL USING (
    (SELECT organization_id FROM public.places WHERE id = place_id) IN (SELECT id FROM public.organizations WHERE auth_id = auth.uid())
);

-- 5. Create RPC functions to manage tags securely
-- For Activities
CREATE OR REPLACE FUNCTION public.add_activities_to_place(p_place_id bigint, p_activity_ids int[])
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public AS $$
DECLARE
  activity_id_val int;
  is_authorized boolean;
BEGIN
  SELECT EXISTS (
    SELECT 1 FROM places p WHERE p.id = p_place_id AND p.organization_id IN (SELECT o.id FROM organizations o WHERE o.auth_id = auth.uid())
  ) INTO is_authorized;

  IF NOT is_authorized THEN
    RAISE EXCEPTION 'Permission denied to modify activities for this place.';
  END IF;

  DELETE FROM place_activities WHERE place_id = p_place_id;

  IF array_length(p_activity_ids, 1) > 0 THEN
    FOREACH activity_id_val IN ARRAY p_activity_ids LOOP
      INSERT INTO place_activities(place_id, activity_id) VALUES(p_place_id, activity_id_val);
    END LOOP;
  END IF;
END;
$$;
GRANT EXECUTE ON FUNCTION public.add_activities_to_place(bigint, int[]) TO authenticated;


-- For Interests
CREATE OR REPLACE FUNCTION public.add_interests_to_place(p_place_id bigint, p_interest_ids int[])
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public AS $$
DECLARE
  interest_id_val int;
  is_authorized boolean;
BEGIN
  SELECT EXISTS (
    SELECT 1 FROM places p WHERE p.id = p_place_id AND p.organization_id IN (SELECT o.id FROM organizations o WHERE o.auth_id = auth.uid())
  ) INTO is_authorized;

  IF NOT is_authorized THEN
    RAISE EXCEPTION 'Permission denied to modify interests for this place.';
  END IF;

  DELETE FROM place_interests WHERE place_id = p_place_id;

  IF array_length(p_interest_ids, 1) > 0 THEN
    FOREACH interest_id_val IN ARRAY p_interest_ids LOOP
      INSERT INTO place_interests(place_id, interest_id) VALUES(p_place_id, interest_id_val);
    END LOOP;
  END IF;
END;
$$;
GRANT EXECUTE ON FUNCTION public.add_interests_to_place(bigint, int[]) TO authenticated;