-- Migration 18: Add event_interests table and related functions/policies to fix creation flow.

-- 1. Create the missing event_interests table
CREATE TABLE IF NOT EXISTS "public"."event_interests" (
    "event_id" bigint NOT NULL,
    "interest_id" bigint NOT NULL,
    CONSTRAINT "event_interests_pkey" PRIMARY KEY (event_id, interest_id),
    CONSTRAINT "event_interests_event_id_fkey" FOREIGN KEY (event_id) REFERENCES public.events(id) ON DELETE CASCADE,
    CONSTRAINT "event_interests_interest_id_fkey" FOREIGN KEY (interest_id) REFERENCES public.interests(id) ON DELETE CASCADE
);

-- 2. Clean up redundant/incorrect columns from the events table
ALTER TABLE public.events
DROP COLUMN IF EXISTS "selectedInterestIds",
DROP COLUMN IF EXISTS "emoji";
-- Note: isDiagnosisFriendly is kept as it's in the frontend form state.

-- 3. Create helper function to get current user's public.users.id
CREATE OR REPLACE FUNCTION public.get_current_user_id()
RETURNS bigint
LANGUAGE sql STABLE
AS $$
  SELECT id FROM public.users WHERE auth_id = auth.uid() LIMIT 1;
$$;
GRANT EXECUTE ON FUNCTION public.get_current_user_id() TO authenticated, anon;


-- 4. Create RPC function to link interests to an event with authorization
CREATE OR REPLACE FUNCTION public.add_interests_to_event(p_event_id bigint, p_interest_ids int[])
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
  interest_id_val int;
  is_authorized boolean;
BEGIN
  -- Check if the current user is the creator (user or organization) of the event
  SELECT EXISTS (
    SELECT 1
    FROM events e
    WHERE e.id = p_event_id
      AND (
        e.creator_user_id = get_current_user_id()
        OR
        e.organization_id IN (SELECT o.id FROM organizations o WHERE o.auth_id = auth.uid())
      )
  ) INTO is_authorized;

  IF NOT is_authorized THEN
    RAISE EXCEPTION 'Permission denied to modify interests for this event.';
  END IF;

  -- Delete existing interests for this event
  DELETE FROM event_interests WHERE event_id = p_event_id;

  -- Insert new interests
  IF array_length(p_interest_ids, 1) > 0 THEN
    FOREACH interest_id_val IN ARRAY p_interest_ids
    LOOP
      INSERT INTO event_interests(event_id, interest_id) VALUES(p_event_id, interest_id_val);
    END LOOP;
  END IF;
END;
$$;
GRANT EXECUTE ON FUNCTION public.add_interests_to_event(bigint, int[]) TO authenticated;

-- 5. Re-apply RLS policies for event_images and add for event_interests
ALTER TABLE public.event_images ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Allow public read access to event images" ON public.event_images;
CREATE POLICY "Allow public read access to event images" ON public.event_images FOR SELECT USING (true);
DROP POLICY IF EXISTS "Allow event creators to manage event images" ON public.event_images;
CREATE POLICY "Allow event creators to manage event images"
ON public.event_images
FOR ALL
USING (
  ( (SELECT creator_user_id FROM public.events WHERE id = event_id) = get_current_user_id() )
  OR
  ( (SELECT organization_id FROM public.events WHERE id = event_id) IN (SELECT id FROM public.organizations WHERE auth_id = auth.uid()) )
);

ALTER TABLE public.event_interests ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Allow public read access to event interests" ON public.event_interests;
CREATE POLICY "Allow public read access to event interests" ON public.event_interests FOR SELECT USING (true);

DROP POLICY IF EXISTS "Allow event creators to manage event interests" ON public.event_interests;
CREATE POLICY "Allow event creators to manage event interests" ON public.event_interests
FOR ALL
USING (
  ( (SELECT creator_user_id FROM public.events WHERE id = event_id) = get_current_user_id() )
  OR
  ( (SELECT organization_id FROM public.events WHERE id = event_id) IN (SELECT id FROM public.organizations WHERE auth_id = auth.uid()) )
);
