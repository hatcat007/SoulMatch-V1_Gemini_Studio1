-- SoulMatch Migration
-- version: 11.0
-- Implements a hierarchical, database-driven category system.

-- 1. Create the new categories table
CREATE TABLE "public"."categories" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "name" text NOT NULL,
    "parent_id" bigint REFERENCES public.categories(id) ON DELETE CASCADE,
    "type" text NOT NULL -- 'event' or 'place'
);

-- 2. Populate the categories table
-- The IDs are hardcoded to make the data migration step predictable.
-- Main Categories (parent_id is NULL)
INSERT INTO public.categories (id, name, parent_id, type) VALUES
(1, 'Social & Fællesskab', NULL, 'event'),
(2, 'Sport & Fitness', NULL, 'event'),
(3, 'Kultur & Kreativitet', NULL, 'event'),
(4, 'Læring & Udvikling', NULL, 'event'),
(5, 'Frivillighed & Samfund', NULL, 'event'),
(6, 'Livsstil & Velvære', NULL, 'event'),
(100, 'Mad & Drikke', NULL, 'place'),
(101, 'Underholdning & Fritid', NULL, 'place'),
(102, 'Kultur & Læring', NULL, 'place'),
(103, 'Fællesskaber & Foreninger', NULL, 'place');

-- Event Sub-categories
INSERT INTO public.categories (id, name, parent_id, type) VALUES
(10, 'Mad & Drikke', 1, 'event'),
(11, 'Fester & Socialt', 1, 'event'),
(12, 'Spil & Hobby', 1, 'event'),
(13, 'Klubber & Foreninger', 1, 'event'),
(20, 'Holdsport', 2, 'event'),
(21, 'Fitness & Træning', 2, 'event'),
(22, 'Udendørs & Eventyr', 2, 'event'),
(30, 'Musik & Lyd', 3, 'event'),
(31, 'Kunst & Håndværk', 3, 'event'),
(32, 'Film & Teater', 3, 'event'),
(33, 'Litteratur & Diskussion', 3, 'event'),
(40, 'Workshops & Kurser', 4, 'event'),
(41, 'Foredrag & Talks', 4, 'event'),
(42, 'Professionelt Netværk', 4, 'event'),
(50, 'Lokale Projekter', 5, 'event'),
(51, 'Velgørenhed', 5, 'event'),
(52, 'Miljø & Natur', 5, 'event'),
(60, 'Sundhed & Selvomsorg', 6, 'event'),
(61, 'Spirituelt & Religion', 6, 'event'),
(62, 'Shopping & Markeder', 6, 'event');

-- Place Sub-categories
INSERT INTO public.categories (id, name, parent_id, type) VALUES
(110, 'Café & Kaffebar', 100, 'place'),
(111, 'Restaurant & Spisested', 100, 'place'),
(112, 'Bar & Værtshus', 100, 'place'),
(120, 'Spillesteder', 101, 'place'),
(121, 'Biograf', 101, 'place'),
(122, 'Parker & Natur', 101, 'place'),
(123, 'Sportsklubber', 101, 'place'),
(130, 'Bibliotek & Museum', 102, 'place'),
(131, 'Kreative Værksteder', 102, 'place'),
(140, 'Frivilligcenter', 103, 'place'),
(141, 'Kulturhus', 103, 'place'),
(142, 'Foreninger', 103, 'place');

-- 3. Alter events and places tables to use the new category system
ALTER TABLE public.events ADD COLUMN category_id bigint REFERENCES public.categories(id) ON DELETE SET NULL;
ALTER TABLE public.places ADD COLUMN category_id bigint REFERENCES public.categories(id) ON DELETE SET NULL;

-- 4. Migrate existing data from old string category to new category_id
-- This is a best-effort mapping. Unmapped categories will be NULL.
UPDATE public.events SET category_id = CASE
    WHEN "category" ILIKE '%Mad%' OR "category" ILIKE '%Drikke%' THEN 10
    WHEN "category" ILIKE '%Spil%' THEN 12
    WHEN "category" ILIKE '%Musik%' THEN 30
    WHEN "category" ILIKE '%Kunst%' OR "category" ILIKE '%Håndværk%' THEN 31
    WHEN "category" ILIKE '%Film%' OR "category" ILIKE '%Teater%' THEN 32
    WHEN "category" ILIKE '%Fitness%' OR "category" ILIKE '%Sport%' THEN 21
    WHEN "category" ILIKE '%Sund%' THEN 60
    ELSE NULL
END;

UPDATE public.places SET category_id = CASE
    WHEN "category" ILIKE '%Café%' THEN 110
    WHEN "category" ILIKE '%Bar%' THEN 112
    WHEN "category" ILIKE '%Gratis%' THEN 141 -- Map 'Gratis' to Kulturhus as a guess
    ELSE NULL
END;

-- 5. Drop the old category columns
ALTER TABLE public.events DROP COLUMN IF EXISTS "category";
ALTER TABLE public.places DROP COLUMN IF EXISTS "category";

-- 6. Enable RLS and set up policies for the new table
ALTER TABLE public.categories ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Allow public read access to categories" ON public.categories FOR SELECT USING (true);
CREATE POLICY "Allow admin to manage categories" ON public.categories FOR ALL USING ((SELECT is_admin FROM public.users WHERE auth_id = auth.uid()) = true);

-- 7. Grants
GRANT SELECT ON public.categories TO authenticated, anon;
GRANT INSERT, UPDATE, DELETE ON public.categories TO authenticated; -- Allow admins
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO authenticated;
