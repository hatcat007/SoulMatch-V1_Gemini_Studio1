-- SoulMatch Migration
-- version: 11.2
-- Implements a hierarchical, database-driven category system.
-- This version is non-destructive and adds categories without deleting existing data.

-- 1. Create the categories table if it doesn't exist
CREATE TABLE IF NOT EXISTS "public"."categories" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "name" text NOT NULL,
    "parent_id" bigint REFERENCES public.categories(id) ON DELETE CASCADE,
    "type" text NOT NULL -- 'event' or 'place'
);

-- 2. Populate the categories table, ignoring conflicts if categories already exist
-- The IDs are hardcoded to make the data migration step predictable.
-- Main Categories (parent_id is NULL)
INSERT INTO public.categories (id, name, parent_id, type) VALUES
(1, 'Social & Fællesskab', NULL, 'event'),
(2, 'Sport & Fitness', NULL, 'event'),
(3, 'Kultur & Kreativitet', NULL, 'event'),
(4, 'Læring & Udvikling', NULL, 'event'),
(5, 'Frivillighed & Samfund', NULL, 'event'),
(6, 'Livsstil & Velvære', NULL, 'event'),
(100, 'Mad & Drikke', NULL, 'place'),
(101, 'Underholdning & Fritid', NULL, 'place'),
(102, 'Kultur & Læring', NULL, 'place'),
(103, 'Fællesskaber & Foreninger', NULL, 'place'),
(104, 'Shopping & Oplevelser', NULL, 'place'),
(105, 'Velvære & Afslapning', NULL, 'place')
ON CONFLICT (id) DO NOTHING;

-- Event Sub-categories
INSERT INTO public.categories (id, name, parent_id, type) VALUES
(10, 'Mad & Drikke', 1, 'event'),
(11, 'Fester & Socialt', 1, 'event'),
(12, 'Spil & Hobby', 1, 'event'),
(13, 'Klubber & Foreninger', 1, 'event'),
(20, 'Holdsport', 2, 'event'),
(21, 'Fitness & Træning', 2, 'event'),
(22, 'Udendørs & Eventyr', 2, 'event'),
(30, 'Musik & Lyd', 3, 'event'),
(31, 'Kunst & Håndværk', 3, 'event'),
(32, 'Film & Teater', 3, 'event'),
(33, 'Litteratur & Diskussion', 3, 'event'),
(40, 'Workshops & Kurser', 4, 'event'),
(41, 'Foredrag & Talks', 4, 'event'),
(42, 'Professionelt Netværk', 4, 'event'),
(50, 'Lokale Projekter', 5, 'event'),
(51, 'Velgørenhed', 5, 'event'),
(52, 'Miljø & Natur', 5, 'event'),
(60, 'Sundhed & Selvomsorg', 6, 'event'),
(61, 'Spirituelt & Religion', 6, 'event'),
(62, 'Shopping & Markeder', 6, 'event')
ON CONFLICT (id) DO NOTHING;

-- Place Sub-categories (Expanded)
INSERT INTO public.categories (id, name, parent_id, type) VALUES
-- Mad & Drikke (100)
(110, 'Café & Kaffebar', 100, 'place'),
(111, 'Restaurant & Spisested', 100, 'place'),
(112, 'Bar & Værtshus', 100, 'place'),
(113, 'Isbutik & Dessertsted', 100, 'place'),
(114, 'Bageri & Konditori', 100, 'place'),
(115, 'Street Food Marked', 100, 'place'),
(116, 'Thehus', 100, 'place'),
-- Underholdning & Fritid (101)
(120, 'Spillested (Live Musik)', 101, 'place'),
(121, 'Biograf', 101, 'place'),
(122, 'Parker & Natur', 101, 'place'),
(123, 'Sportsklub & Facilitet', 101, 'place'),
(124, 'Brætspilscafé', 101, 'place'),
(125, 'Bowlinghal & Minigolf', 101, 'place'),
(126, 'Escape Room', 101, 'place'),
(127, 'Gaming & E-sport Center', 101, 'place'),
-- Kultur & Læring (102)
(130, 'Bibliotek & Museum', 102, 'place'),
(131, 'Kreativt Værksted', 102, 'place'),
(132, 'Teater & Performance', 102, 'place'),
(133, 'Kunstgalleri', 102, 'place'),
(134, 'Kursuscenter', 102, 'place'),
-- Fællesskaber & Foreninger (103)
(140, 'Frivilligcenter', 103, 'place'),
(141, 'Kulturhus', 103, 'place'),
(142, 'Hobby & Interesse Forening', 103, 'place'),
(143, 'Studenterhus', 103, 'place'),
(144, 'Ungdomsklub', 103, 'place'),
-- Shopping & Oplevelser (104)
(150, 'Genbrugsbutik', 104, 'place'),
(151, 'Specialbutik (fx Plader, Bøger)', 104, 'place'),
(152, 'Loppemarked', 104, 'place'),
(153, 'Shoppingcenter', 104, 'place'),
-- Velvære & Afslapning (105)
(160, 'Svømmehal & Spa', 105, 'place'),
(161, 'Yogastudie', 105, 'place'),
(162, 'Stilleområde (fx Botanisk Have)', 105, 'place')
ON CONFLICT (id) DO NOTHING;

-- 3. Alter events and places tables to use the new category system
ALTER TABLE public.events ADD COLUMN IF NOT EXISTS category_id bigint REFERENCES public.categories(id) ON DELETE SET NULL;
ALTER TABLE public.places ADD COLUMN IF NOT EXISTS category_id bigint REFERENCES public.categories(id) ON DELETE SET NULL;

-- 4. Migrate existing data from old string category to new category_id
-- This is a best-effort mapping. Unmapped categories will be NULL.
DO $$
BEGIN
   IF EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='events' AND column_name='category') THEN
      UPDATE public.events SET category_id = CASE
          WHEN "category" ILIKE '%Mad%' OR "category" ILIKE '%Drikke%' THEN 10
          WHEN "category" ILIKE '%Spil%' THEN 12
          WHEN "category" ILIKE '%Musik%' THEN 30
          WHEN "category" ILIKE '%Kunst%' OR "category" ILIKE '%Håndværk%' THEN 31
          WHEN "category" ILIKE '%Film%' OR "category" ILIKE '%Teater%' THEN 32
          WHEN "category" ILIKE '%Fitness%' OR "category" ILIKE '%Sport%' THEN 21
          WHEN "category" ILIKE '%Sund%' THEN 60
          ELSE category_id
      END WHERE category_id IS NULL;
   END IF;
   IF EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='places' AND column_name='category') THEN
      UPDATE public.places SET category_id = CASE
          WHEN "category" ILIKE '%Café%' THEN 110
          WHEN "category" ILIKE '%Bar%' THEN 112
          WHEN "category" ILIKE '%Gratis%' THEN 141
          ELSE category_id
      END WHERE category_id IS NULL;
   END IF;
END $$;


-- 5. Drop the old category columns
-- These are commented out to prevent accidental data loss, per user request "don't delete anything".
-- Uncomment if you are sure the migration is complete and the old columns are no longer needed.
-- ALTER TABLE public.events DROP COLUMN IF EXISTS "category";
-- ALTER TABLE public.places DROP COLUMN IF EXISTS "category";

-- 6. Enable RLS and set up policies for the new table
ALTER TABLE public.categories ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Allow public read access to categories" ON public.categories;
CREATE POLICY "Allow public read access to categories" ON public.categories FOR SELECT USING (true);

DROP POLICY IF EXISTS "Allow admin to manage categories" ON public.categories;
CREATE POLICY "Allow admin to manage categories" ON public.categories FOR ALL USING ((SELECT is_admin FROM public.users WHERE auth_id = auth.uid()) = true);

-- 7. Grants
GRANT SELECT ON public.categories TO authenticated, anon;
GRANT INSERT, UPDATE, DELETE ON public.categories TO authenticated; -- RLS restricts to admins
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO authenticated;

-- 8. Reset sequence to avoid conflicts after hardcoding IDs
-- Ensures that new categories created via the app don't conflict with seeded IDs.
SELECT setval(pg_get_serial_sequence('public.categories', 'id'), COALESCE((SELECT MAX(id) FROM public.categories), 1));