-- SoulMatch Supabase Schema
-- version: 3.0

-- Section 1: Table Dropping
-- Drop tables in reverse order of dependency to avoid foreign key conflicts.
DROP TABLE IF EXISTS "public"."message_thread_participants";
DROP TABLE IF EXISTS "public"."user_traits";
DROP TABLE IF EXISTS "public"."event_participants";
DROP TABLE IF EXISTS "public"."organization_updates";
DROP TABLE IF EXISTS "public"."organization_opportunities";
DROP TABLE IF EXISTS "public"."places";
DROP TABLE IF EXISTS "public"."message_threads";
DROP TABLE IF EXISTS "public"."events";
DROP TABLE IF EXISTS "public"."organizations";
DROP TABLE IF EXISTS "public"."users";

-- Section 2: Table Creation
CREATE TABLE "public"."users" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "name" character varying,
    "age" smallint,
    "avatar_url" text,
    "online" boolean DEFAULT false,
    "bio" text,
    "location" text,
    "personality_type" character varying(4),
    "created_at" timestamptz DEFAULT now() NOT NULL,
    -- Add auth.users reference
    "auth_id" uuid REFERENCES auth.users(id)
);

CREATE TABLE "public"."organizations" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "name" character varying,
    "logo_url" text,
    "address" text,
    "description" text,
    "phone" character varying,
    "email" character varying,
    "website" character varying,
    "created_at" timestamptz DEFAULT now() NOT NULL
);

CREATE TABLE "public"."organization_opportunities" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "organization_id" bigint NOT NULL REFERENCES public.organizations(id) ON DELETE CASCADE,
    "name" character varying,
    "icon" character varying
);

CREATE TABLE "public"."organization_updates" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "organization_id" bigint NOT NULL REFERENCES public.organizations(id) ON DELETE CASCADE,
    "image_url" text
);

CREATE TABLE "public"."events" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "title" character varying,
    "time" timestamptz,
    "host_name" character varying,
    "host_avatar_url" text,
    "icon" character varying,
    "color" character varying,
    "category" character varying,
    "description" text,
    "organization_id" bigint REFERENCES public.organizations(id),
    "created_at" timestamptz DEFAULT now() NOT NULL
);

CREATE TABLE "public"."places" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "name" character varying,
    "offer" text,
    "address" text,
    "user_count" integer,
    "user_images" text[],
    "icon" character varying,
    "category" character varying,
    "description" text,
    "is_sponsored" boolean,
    "phone" character varying,
    "opening_hours" text,
    "created_at" timestamptz DEFAULT now() NOT NULL
);

CREATE TABLE "public"."event_participants" (
    "event_id" bigint NOT NULL REFERENCES public.events(id) ON DELETE CASCADE,
    "user_id" bigint NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    PRIMARY KEY (event_id, user_id)
);

CREATE TABLE "public"."user_traits" (
    "user_id" bigint NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    "trait" character varying NOT NULL,
    "value" smallint,
    PRIMARY KEY (user_id, trait)
);

CREATE TABLE "public"."message_threads" (
    "id" bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "last_message" text,
    "timestamp" timestamptz,
    "unread_count" integer,
    "match_timestamp" timestamptz,
    "created_at" timestamptz DEFAULT now() NOT NULL
);

CREATE TABLE "public"."message_thread_participants" (
    "thread_id" bigint NOT NULL REFERENCES public.message_threads(id) ON DELETE CASCADE,
    "user_id" bigint NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
    PRIMARY KEY (thread_id, user_id)
);

-- Section 3: Seed Data
-- Bypassing RLS for seeding. In a real environment, this would be done by a privileged user.
ALTER TABLE public.users DISABLE ROW LEVEL SECURITY;
-- ... disable for all tables ...

INSERT INTO "public"."users" ("id", "name", "age", "avatar_url", "online", "bio", "location", "personality_type") VALUES
(1, 'Anne', 24, 'https://picsum.photos/id/1011/100/100', true, 'Kreativt menneske...', 'Aalborg, Denmark', 'INFJ'),
(2, 'Jens', 26, 'https://picsum.photos/id/1025/100/100', true, NULL, NULL, NULL),
(4, 'Victoria', 25, 'https://picsum.photos/id/1013/100/100', false, NULL, NULL, NULL),
(999, 'Mig', 25, 'https://i.pravatar.cc/80?u=999', true, NULL, NULL, NULL);

INSERT INTO "public"."organizations" ("id", "name", "logo_url", "address", "description") VALUES
(1, 'SIND Ungdom Aalborg', 'https://i.imgur.com/8S8V5c2.png', 'Danmarksgade 52', 'Et tilbud for unge psykisk s√•rbare.'),
(2, 'Studenterhuset Aalborg', 'https://i.imgur.com/fL5FfJ4.png', 'Gammeltorv 10', 'Aalborgs internationale studenterhus.'),
(3, 'Ventilen Aalborg', 'https://i.imgur.com/h5r8uGk.png', 'Kirkeg√•rdsgade 2', 'Et m√∏dested for unge, der f√∏ler sig ensomme.');

INSERT INTO "public"."events" ("id", "title", "time", "host_name", "organization_id") VALUES
(1, 'Musik koncert sammen', now() + interval '1 hour', 'Jesper', 2),
(2, 'F√¶lles spisning', now() + interval '2 hours', 'SIND Ungdom', 1),
(3, 'F√¶lles br√¶tspil', now() + interval '1 day', 'Ventilen', 3);

INSERT INTO "public"."message_threads" ("id", "last_message", "timestamp", "unread_count") VALUES
(1, 'Super! Vi ses i bio i morgen üòä', now() - interval '1 hour', 3),
(2, 'Omg! Vildt samme her!', now() - interval '2 hours', 0);

INSERT INTO "public"."message_thread_participants" (thread_id, user_id) VALUES
(1, 1), (1, 999),
(2, 2), (2, 999);

INSERT INTO "public"."event_participants" (event_id, user_id) VALUES
(1, 1), (1, 2), (2, 4), (3, 1), (3, 4);

-- Section 4: Row Level Security (RLS)
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.organizations ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.organization_opportunities ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.organization_updates ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.events ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.places ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.event_participants ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.user_traits ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.message_threads ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.message_thread_participants ENABLE ROW LEVEL SECURITY;

-- RLS Policies
-- Users
CREATE POLICY "Allow public read access to users" ON public.users FOR SELECT USING (true);
CREATE POLICY "Allow users to update their own profile" ON public.users FOR UPDATE USING (auth.uid() = auth_id);
-- Events
CREATE POLICY "Allow public read access to events" ON public.events FOR SELECT USING (true);
CREATE POLICY "Allow authenticated users to create events" ON public.events FOR INSERT WITH CHECK (auth.role() = 'authenticated');
-- Event Participants
CREATE POLICY "Allow public read access to event participants" ON public.event_participants FOR SELECT USING (true);
CREATE POLICY "Allow users to manage their own event participation" ON public.event_participants FOR ALL USING (
    (SELECT auth_id FROM public.users WHERE id = user_id) = auth.uid()
);
-- Message Threads
CREATE POLICY "Allow users to see their own threads" ON public.message_threads FOR SELECT USING (
    id IN (SELECT thread_id FROM public.message_thread_participants WHERE (SELECT auth_id FROM public.users WHERE id = user_id) = auth.uid())
);
-- Add more policies for INSERT, UPDATE, DELETE as needed for other tables.

-- Section 5: Grants
-- More restrictive grants
-- Revoke all default privileges
REVOKE ALL ON ALL TABLES IN SCHEMA public FROM public, anon, authenticated;
-- Grant specific privileges
GRANT SELECT ON ALL TABLES IN SCHEMA public TO authenticated;
GRANT INSERT, UPDATE, DELETE ON public.events, public.event_participants, public.message_threads TO authenticated;
-- For anon, only grant what is absolutely necessary, if anything.
-- Example: GRANT SELECT ON public.events TO anon;

-- Tighten sequence grants
GRANT USAGE ON ALL SEQUENCES IN SCHEMA public TO authenticated;
REVOKE SELECT ON ALL SEQUENCES IN SCHEMA public FROM anon;

-- Finally, re-enable RLS on tables that had it disabled for seeding.
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;
-- ... enable for all tables ...
