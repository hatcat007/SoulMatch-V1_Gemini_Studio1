========================
CODE SNIPPETS
========================
TITLE: Prisma Quickstart Guides
DESCRIPTION: Quickstart guides for getting started with Prisma, available for PostgreSQL and SQLite, designed for a 5-minute setup.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-cockroachdb

LANGUAGE: markdown
CODE:
```
- [Quickstart5 min](https://www.prisma.io/docs/getting-started/quickstart-prismaPostgres)
- [Quickstart5 min](https://www.prisma.io/docs/getting-started/quickstart-sqlite)
```

----------------------------------------

TITLE: Prisma ORM Quickstart Guides
DESCRIPTION: Provides quickstart guides for setting up Prisma ORM, including a 5-minute setup for PostgreSQL and SQLite databases. These guides are ideal for getting started quickly with Prisma.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/next-steps

LANGUAGE: APIDOC
CODE:
```
Prisma Quickstart:

  - Quickstart (Postgres): 5 min
    - Description: Get started with Prisma and PostgreSQL in 5 minutes.
    - URL: https://www.prisma.io/docs/getting-started/quickstart-prismaPostgres

  - Quickstart (SQLite): 5 min
    - Description: Get started with Prisma and SQLite in 5 minutes.
    - URL: https://www.prisma.io/docs/getting-started/quickstart-sqlite
```

----------------------------------------

TITLE: Prisma ORM Quickstarts
DESCRIPTION: Quickstart guides for getting started with Prisma ORM, including setup for PostgreSQL and SQLite databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/using-prisma-migrate-node-planetscale

LANGUAGE: markdown
CODE:
```
https://www.prisma.io/docs/getting-started/quickstart-prismaPostgres
https://www.prisma.io/docs/getting-started/quickstart-sqlite
```

----------------------------------------

TITLE: Prisma Quickstart Guides
DESCRIPTION: Quickstart guides for getting started with Prisma, available for PostgreSQL and SQLite.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/using-prisma-migrate-typescript-cockroachdb

LANGUAGE: markdown
CODE:
```
https://www.prisma.io/docs/getting-started/quickstart-prismaPostgres
https://www.prisma.io/docs/getting-started/quickstart-sqlite
```

----------------------------------------

TITLE: Prisma Migrate Getting Started
DESCRIPTION: A guide to getting started with Prisma Migrate, including initial setup and applying the first migration.

SOURCE: https://www.prisma.io/docs/orm/overview/introduction

LANGUAGE: bash
CODE:
```
# Install Prisma CLI
npm install prisma --save-dev

# Initialize Prisma Migrate
# This creates a migrations directory and the first migration file
prisma migrate dev --name init

# Apply migrations (if not done by dev command)
# prisma migrate deploy
```

----------------------------------------

TITLE: Prisma Migrate Getting Started
DESCRIPTION: A guide to getting started with Prisma Migrate, including initial setup and creating the first migration.

SOURCE: https://www.prisma.io/docs/orm/overview/databases

LANGUAGE: bash
CODE:
```
# 1. Initialize Prisma in your project (if not already done)
prisma init

# 2. Configure your database connection in schema.prisma
#    datasource db {
#      provider = "postgresql"
#      url      = env("DATABASE_URL")
#    }

# 3. Create your first migration
#    This command will create a new migration file based on your schema.prisma
#    and apply it to your database.
prisma migrate dev --name init

# 4. Generate Prisma Client to reflect the schema changes
prisma generate

# After these steps, your database schema will be set up, and Prisma Client will be generated.
```

----------------------------------------

TITLE: Prisma Migrate Getting Started
DESCRIPTION: A guide to getting started with Prisma Migrate, including initial setup and creating your first migration.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/testing

LANGUAGE: APIDOC
CODE:
```
Prisma Migrate - Getting Started:

1. Initialize Prisma Migrate:
   prisma migrate init
   This creates a `prisma/migrations` directory and the first migration file.

2. Define your schema in `prisma/schema.prisma`.

3. Create and apply a migration:
   prisma migrate dev --name init
   This command creates a new migration based on schema changes and applies it to your database.

4. Generate Prisma Client:
   prisma generate
   This updates the Prisma Client based on your schema.
```

----------------------------------------

TITLE: Prisma Migrate: Getting started
DESCRIPTION: A guide to getting started with Prisma Migrate, including initial setup and creating your first migration.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/client-extensions/shared-extensions/permit-rbac

LANGUAGE: bash
CODE:
```
npx prisma migrate dev --name init

```

----------------------------------------

TITLE: Prisma Quickstart Navigation
DESCRIPTION: Links to navigate through the Prisma getting started guide, including previous and next steps.

SOURCE: https://www.prisma.io/docs/getting-started/quickstart-prismaPostgres

LANGUAGE: en
CODE:
```
Previous Get Started: https://www.prisma.io/docs/getting-started/quickstart-prismaPostgres
Next Quickstart: https://www.prisma.io/docs/getting-started/quickstart-sqlite
```

----------------------------------------

TITLE: Prisma Migrate Getting Started
DESCRIPTION: A guide to getting started with Prisma Migrate, including initial setup, creating migrations, and applying them to your database.

SOURCE: https://www.prisma.io/docs/orm/more/ai-tools/cursor

LANGUAGE: bash
CODE:
```
# Install Prisma CLI
npm install prisma --save-dev

# Initialize Prisma
prisma init

# Create a new migration
prisma migrate dev --name init

# Apply migrations (e.g., in production)
prisma migrate deploy
```

----------------------------------------

TITLE: Prisma Postgres Introduction
DESCRIPTION: Guides for getting started with Prisma Postgres, including initial setup, database creation, and importing data from existing databases.

SOURCE: https://www.prisma.io/docs/postgres

LANGUAGE: en
CODE:
```
npx create-db
Import from existing database
Management API
Overview
```

----------------------------------------

TITLE: Prisma Quickstart
DESCRIPTION: Follow the quickstart guide to begin using Prisma. This section offers guidance on setting up Prisma with a SQLite database or choosing an option for your own database.

SOURCE: https://www.prisma.io/docs/getting-started

LANGUAGE: en
CODE:
```
Next Quickstart
```

----------------------------------------

TITLE: Download Example and Install Dependencies
DESCRIPTION: Downloads a Prisma example project for PostgreSQL, names it, and installs npm dependencies. This command sets up the initial project structure and required packages.

SOURCE: https://www.prisma.io/docs/getting-started/quickstart-prismaPostgres

LANGUAGE: bash
CODE:
```
npx try-prisma@latest \
  --template databases/prisma-postgres \
  --name hello-prisma \
  --install npm
```

----------------------------------------

TITLE: Prisma ORM Quickstart (PostgreSQL)
DESCRIPTION: This snippet provides a quickstart guide for using the Prisma ORM with PostgreSQL. It covers the initial setup and basic operations for getting started with Prisma.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-typescript-mysql

LANGUAGE: typescript
CODE:
```
// Example of a Prisma schema definition
// datasource db {
//   url      = env("DATABASE_URL")
//   provider = "postgresql"
// }

// generator client {
//   provider = "prisma-client-js"
// }

// model Post {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   title     String
//   published Boolean  @default(false)
//   author    User     @relation(fields: [authorId], references: [id])
//   authorId  Int
// }

// model User {
//   id    Int    @id @default(autoincrement())
//   email String @unique
//   name  String?
//   posts Post[]
// }
```

----------------------------------------

TITLE: Prisma Examples
DESCRIPTION: Explore ready-to-run examples using Prisma Optimize. These examples demonstrate practical applications and can help you quickly understand how to use Prisma Optimize.

SOURCE: https://www.prisma.io/docs/getting-started

LANGUAGE: en
CODE:
```
Explore our ready-to-run examples using Prisma Optimize.
```

----------------------------------------

TITLE: Prisma Quickstart (PostgreSQL)
DESCRIPTION: A quickstart guide for setting up Prisma with a PostgreSQL database, designed to get you started in approximately 5 minutes.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/mongodb-node-mongodb

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider postgresql
npx prisma db push
npm install @prisma/client
```

----------------------------------------

TITLE: Prisma ORM - Getting Started
DESCRIPTION: Overview of Prisma ORM and guides for getting started, including setting up from scratch or adding to an existing project.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-typescript-planetscale

LANGUAGE: APIDOC
CODE:
```
Prisma ORM:
  __init__(options)
    Initializes the Prisma ORM client.
    Parameters:
      - datasourceUrl: string - The database connection URL.
      - log: array - Optional array of log levels to enable.

  connect()
    Establishes a connection to the database.

  disconnect()
    Closes the database connection.

  // Example usage:
  // const prisma = new PrismaClient()
  // await prisma.connect()
  // await prisma.user.findMany()
  // await prisma.disconnect()
```

----------------------------------------

TITLE: Prisma ORM Quickstart (PostgreSQL)
DESCRIPTION: A quickstart guide for setting up Prisma ORM with a PostgreSQL database. This covers the initial setup and basic usage for getting started quickly.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/mongodb-typescript-mongodb

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider postgresql
npm install @prisma/client
npx prisma migrate dev --name init
npx prisma generate
```

----------------------------------------

TITLE: Prisma Migrate Getting Started
DESCRIPTION: A guide to getting started with Prisma Migrate, covering initial setup and basic migration commands.

SOURCE: https://www.prisma.io/docs/orm/more/upgrade-guides/upgrade-from-prisma-1/upgrade-from-mongodb-beta

LANGUAGE: APIDOC
CODE:
```
Prisma Migrate Getting Started:
  Overview: Initial steps to use Prisma Migrate for database schema evolution.
```

----------------------------------------

TITLE: Prisma MongoDB Setup (TypeScript)
DESCRIPTION: A guide for setting up Prisma with MongoDB for a TypeScript project, aiming for a quick 15-minute setup.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/evolve-your-schema-typescript-sqlserver

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider mongodb
```

----------------------------------------

TITLE: Prisma Migrate Getting Started
DESCRIPTION: Guides users through the initial setup and usage of Prisma Migrate for database schema evolution.

SOURCE: https://www.prisma.io/docs/orm/prisma-schema/overview/data-sources

LANGUAGE: bash
CODE:
```
# Install Prisma CLI
npm install prisma --save-dev

# Initialize Prisma Migrate
prisma init

# Create a new migration
prisma migrate dev --name init

# Apply migrations
prisma migrate deploy
```

----------------------------------------

TITLE: Prisma Migrate Getting Started
DESCRIPTION: A beginner's guide to Prisma Migrate, covering initial setup, creating migrations, and applying them to your database.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/deployment/serverless/deploy-to-netlify

LANGUAGE: APIDOC
CODE:
```
Prisma Migrate Getting Started:

  - Initializing Prisma Migrate in your project.
  - Creating your first migration using `prisma migrate dev`.
  - Understanding the migration file structure.
  - Applying migrations to your database.
```

----------------------------------------

TITLE: Prisma ORM Quickstart (PostgreSQL)
DESCRIPTION: This guide provides a quickstart for using the Prisma ORM with PostgreSQL, covering setup and basic operations in approximately 5 minutes.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-node-sqlserver

LANGUAGE: bash
CODE:
```
npm init -y
npm install prisma --save-dev
npx prisma init
npx prisma db push
```

----------------------------------------

TITLE: Prisma SQLite Quickstart Sections
DESCRIPTION: Outlines the sections of the Prisma SQLite quickstart guide, covering setup, modeling, migration, and querying.

SOURCE: https://www.prisma.io/docs/getting-started/quickstart-sqlite

LANGUAGE: APIDOC
CODE:
```
Prisma SQLite Quickstart:
  - Prerequisites: https://www.prisma.io/docs/getting-started/quickstart-sqlite#prerequisites
  - 1. Create TypeScript project and set up Prisma ORM: https://www.prisma.io/docs/getting-started/quickstart-sqlite#1-create-typescript-project-and-set-up-prisma-orm
  - 2. Model your data in the Prisma schema: https://www.prisma.io/docs/getting-started/quickstart-sqlite#2-model-your-data-in-the-prisma-schema
  - 3. Run a migration to create your database tables with Prisma Migrate: https://www.prisma.io/docs/getting-started/quickstart-sqlite#3-run-a-migration-to-create-your-database-tables-with-prisma-migrate
  - 4. Explore how to send queries to your database with Prisma Client:
    - 4.1. Create a new `User` record: https://www.prisma.io/docs/getting-started/quickstart-sqlite#41-create-a-new-user-record
    - 4.2. Retrieve all `User` records: https://www.prisma.io/docs/getting-started/quickstart-sqlite#42-retrieve-all-user-records
    - 4.3. Explore relation queries with Prisma Client: https://www.prisma.io/docs/getting-started/quickstart-sqlite#43-explore-relation-queries-with-prisma-client
  - 5. Next steps:
    - Explore the data in Prisma Studio: https://www.prisma.io/docs/getting-started/quickstart-sqlite#explore-the-data-in-prisma-studio
    - Set up Prisma ORM with your own database: https://www.prisma.io/docs/getting-started/quickstart-sqlite#set-up-prisma-orm-with-your-own-database
    - Get query insights and analytics with Prisma Optimize: https://www.prisma.io/docs/getting-started/quickstart-sqlite#get-query-insights-and-analytics-with-prisma-optimize
    - Explore ready-to-run Prisma ORM examples: https://www.prisma.io/docs/getting-started/quickstart-sqlite#explore-ready-to-run-prisma-orm-examples
    - Speed up your database queries with Prisma Accelerate: https://www.prisma.io/docs/getting-started/quickstart-sqlite#speed-up-your-database-queries-with-prisma-accelerate
    - Build an app with Prisma ORM: https://www.prisma.io/docs/getting-started/quickstart-sqlite#build-an-app-with-prisma-orm
```

----------------------------------------

TITLE: Prisma ORM Quickstart (SQLite)
DESCRIPTION: A quickstart guide for setting up Prisma ORM with a SQLite database. This covers the initial setup and basic usage for getting started quickly.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/mongodb-typescript-mongodb

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider sqlite
npm install @prisma/client
npx prisma migrate dev --name init
npx prisma generate
```

----------------------------------------

TITLE: Prisma MongoDB Setup (TypeScript)
DESCRIPTION: A guide for setting up Prisma with MongoDB for a TypeScript project, aiming for a quick 15-minute setup.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-typescript-postgresql

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider mongodb
```

----------------------------------------

TITLE: Install Optimize Prisma Client Extension
DESCRIPTION: This snippet shows how to install the Optimize Prisma Client extension, which is a prerequisite for using Prisma Optimize's features.

SOURCE: https://www.prisma.io/docs/optimize/getting-started

LANGUAGE: bash
CODE:
```
npm install @prisma/client-optimize
# or
yarn add @prisma/client-optimize
```

----------------------------------------

TITLE: Prisma Migrate Getting Started
DESCRIPTION: This example shows the basic steps to get started with Prisma Migrate, including creating an initial migration and applying it to your database.

SOURCE: https://www.prisma.io/docs/orm/tools/prisma-cli

LANGUAGE: bash
CODE:
```
# 1. Create a new migration file
npx prisma migrate dev --name init

# 2. Apply the migration to your database (if not done automatically by dev command)
# npx prisma migrate deploy

# 3. Seed your database with initial data (optional)
# npx prisma db seed
```

----------------------------------------

TITLE: Install Prisma Optimize Extension
DESCRIPTION: Installs the Prisma Client and the Optimize extension using npm. It's recommended to use the latest versions for optimal performance and features.

SOURCE: https://www.prisma.io/docs/optimize/getting-started

LANGUAGE: bash
CODE:
```
npm install @prisma/client@latest @prisma/extension-optimize
```

----------------------------------------

TITLE: Prisma MongoDB Setup (TypeScript)
DESCRIPTION: A guide for setting up Prisma with MongoDB for a TypeScript project, aiming for a quick 15-minute setup.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-postgresql

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider mongodb
```

----------------------------------------

TITLE: Prisma Quickstart (SQLite)
DESCRIPTION: A quickstart guide for setting up Prisma with a SQLite database, designed to get you started in approximately 5 minutes.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/mongodb-node-mongodb

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider sqlite
npx prisma db push
npm install @prisma/client
```

----------------------------------------

TITLE: Prisma Quickstart with PlanetScale (TypeScript)
DESCRIPTION: A quickstart guide for setting up Prisma with PlanetScale using TypeScript. This covers the initial steps to get a basic Prisma project running.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-prismaPostgres

LANGUAGE: planetscale
CODE:
```
npx prisma init --datasource-provider planetscale

```

----------------------------------------

TITLE: Prisma Migrate Getting Started
DESCRIPTION: A guide to getting started with Prisma Migrate, including creating initial migrations and applying them to your database.

SOURCE: https://www.prisma.io/docs/orm/more/under-the-hood

LANGUAGE: bash
CODE:
```
# Initialize Prisma Migrate (if not already done)
prisma init

# Create a new migration file based on schema changes
prisma migrate dev --name init_schema

# Apply migrations to the database
prisma migrate deploy

# View migration history
prisma migrate status
```

----------------------------------------

TITLE: Prisma ORM Quickstart with PostgreSQL
DESCRIPTION: This guide helps you set up Prisma ORM from scratch with a PostgreSQL database. It covers modeling your data, running schema migrations, and querying your database in a 5-minute tutorial.

SOURCE: https://www.prisma.io/docs/getting-started

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider postgresql
npx prisma migrate dev --name init
```

----------------------------------------

TITLE: Prisma Quickstart (PostgreSQL)
DESCRIPTION: A quickstart guide for setting up Prisma with a PostgreSQL database, designed to get users up and running in approximately 5 minutes.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/evolve-your-schema-node-mysql

LANGUAGE: typescript
CODE:
```
console.log('This section covers the Prisma Quickstart for PostgreSQL.');
// Key steps involve schema definition, migration, and client generation.
```

----------------------------------------

TITLE: Prisma ORM Quickstart with SQLite
DESCRIPTION: This guide helps you set up Prisma ORM with a SQLite database, which is useful for exploring Prisma without needing a separate database instance. It's a quick 5-minute setup.

SOURCE: https://www.prisma.io/docs/getting-started

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider sqlite
npx prisma migrate dev --name init
```

----------------------------------------

TITLE: Prisma Migrate Getting Started
DESCRIPTION: A guide to getting started with Prisma Migrate, Prisma's database migration system. Covers creating initial migrations, applying them to the database, and managing migration history.

SOURCE: https://www.prisma.io/docs/orm/more/upgrade-guides/upgrade-from-prisma-1/how-to-upgrade

LANGUAGE: bash
CODE:
```
# Create a new migration
prisma migrate dev --name init

# Apply migrations to the database
prisma migrate deploy
```

----------------------------------------

TITLE: Prisma Quickstart Guides
DESCRIPTION: Quickstart guides for setting up Prisma with different database systems, focusing on speed and ease of use.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/querying-the-database-typescript-mysql

LANGUAGE: APIDOC
CODE:
```
Quickstart (Postgres):
  URL: https://www.prisma.io/docs/getting-started/quickstart-prismaPostgres
  Description: Get started with Prisma and PostgreSQL in 5 minutes.

Quickstart (SQLite):
  URL: https://www.prisma.io/docs/getting-started/quickstart-sqlite
  Description: Get started with Prisma and SQLite in 5 minutes.
```

----------------------------------------

TITLE: Prisma ORM Setup
DESCRIPTION: This section covers the initial setup for the Prisma ORM, including how to start from scratch with a new project or integrate it into an existing one.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/baseline-your-database-node-postgresql

LANGUAGE: APIDOC
CODE:
```
Prisma ORM Setup:

1. Start from scratch:
   - Command: `npx prisma init`
   - Description: Initializes a new Prisma project with a default schema file.

2. Add to existing project:
   - Description: Integrates Prisma into an existing codebase.
   - Steps involve defining the schema and connecting to the database.
```

----------------------------------------

TITLE: Prisma Migrate - Getting Started
DESCRIPTION: A guide to getting started with Prisma Migrate, covering the initial setup, creating your first migration, and applying it to your database.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/type-safety/prisma-validator

LANGUAGE: APIDOC
CODE:
```
Prisma Migrate - Getting Started:

Overview:
  Introduces Prisma Migrate, a declarative database schema migration system. This guide covers the essential steps to set up and use migrations for managing your database schema evolution.

Prerequisites:
  - Prisma CLI installed (`npm install prisma --save-dev` or `yarn add prisma --dev`).
  - A `schema.prisma` file defining your data models.
  - A database connection configured in `.env` and `schema.prisma`.

Steps:
  1. Create your first migration:
     Run the following command in your project's root directory:
     ```bash
     npx prisma migrate dev --name init
     ```
     This command will:
       - Inspect your `schema.prisma` file.
       - Generate SQL migration files based on the schema changes.
       - Apply the migrations to your database.
       - Create a `_prisma_migrations` table in your database to track applied migrations.

  2. Making schema changes:
     After the initial migration, modify your `schema.prisma` file (e.g., add a new model or field).

  3. Applying subsequent migrations:
     Run the same command again:
     ```bash
     npx prisma migrate dev --name add_user_model
     ```
     Prisma Migrate will detect the changes and generate a new migration file.

  4. Deploying migrations (production):
     For production environments, use `prisma migrate deploy` to apply all pending migrations without interactive prompts.
     ```bash
     npx prisma migrate deploy
     ```

Related Sections:
  - Prisma Migrate Understanding Prisma Migrate
  - Prisma CLI Reference
  - Prisma Schema Reference
```

----------------------------------------

TITLE: Prisma Migrate Getting Started
DESCRIPTION: A guide to getting started with Prisma Migrate, covering the initial setup, creating your first migration, and applying it to your database.

SOURCE: https://www.prisma.io/docs/orm/more/upgrade-guides/upgrade-from-prisma-1/schema-incompatibilities-mysql

LANGUAGE: typescript
CODE:
```
# Initialize Prisma Migrate
prisma init

# Create a new migration file
prisma migrate dev --name init_schema

# Apply migrations (if not using --name)
prisma migrate deploy
```

----------------------------------------

TITLE: Prisma Migrate: Getting Started
DESCRIPTION: Guides users through the initial setup of Prisma Migrate, including creating the initial migration file, applying it to the database, and configuring the migration engine.

SOURCE: https://www.prisma.io/docs/orm/prisma-schema/data-model/relations

LANGUAGE: bash
CODE:
```
# Install Prisma CLI if you haven't already
npm install prisma --save-dev

# Initialize Prisma Migrate
# This creates a prisma/migrations directory and the first migration file
prisma migrate dev --name init

# Apply migrations to the database (if not done automatically by dev command)
# prisma migrate deploy
```

----------------------------------------

TITLE: Prisma Migrate: Getting Started
DESCRIPTION: A step-by-step guide to getting started with Prisma Migrate for managing database schema changes.

SOURCE: https://www.prisma.io/docs/orm/overview/databases/neon

LANGUAGE: bash
CODE:
```
# 1. Ensure you have a Prisma schema file (schema.prisma)

# 2. Create your first migration
# This command inspects your schema.prisma file, generates a SQL migration file,
# and applies it to your database.
prisma migrate dev --name init_schema

# 3. Make changes to your schema.prisma file (e.g., add a new model or field)

# 4. Create and apply the next migration
prisma migrate dev --name add_user_model

# To view existing migrations:
ls prisma/migrations

# To reset the database to an empty state (use with caution):
prisma migrate reset

# To deploy migrations to production (after testing):
# prisma migrate deploy
```

----------------------------------------

TITLE: Prisma ORM Quickstart (SQLite)
DESCRIPTION: This guide offers a quickstart for integrating the Prisma ORM with SQLite, designed for a rapid setup within 5 minutes.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-node-sqlserver

LANGUAGE: bash
CODE:
```
npm init -y
npm install prisma --save-dev
npx prisma init
npx prisma db push
```

----------------------------------------

TITLE: Install Prisma Client (TypeScript/SQL Server)
DESCRIPTION: This guide explains how to install Prisma Client for a TypeScript project with a SQL Server database. It covers the necessary setup steps to integrate Prisma with your existing project.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/evolve-your-schema-typescript-sqlserver

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider sqlserver
```

----------------------------------------

TITLE: Install Prisma Client (TypeScript/SQL Server)
DESCRIPTION: This guide explains how to install Prisma Client for a TypeScript project with a SQL Server database. It covers the necessary setup steps to integrate Prisma with your existing project.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-typescript-postgresql

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider sqlserver
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup
DESCRIPTION: Guides for setting up Prisma with PostgreSQL, including connecting from the CLI, upgrading from early access versions, and importing data from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/evolve-your-schema-typescript-sqlserver

LANGUAGE: bash
CODE:
```
npx prisma db push
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup
DESCRIPTION: Guides for setting up Prisma with PostgreSQL, including connecting from the CLI, upgrading from early access versions, and importing data from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-typescript-postgresql

LANGUAGE: bash
CODE:
```
npx prisma db push
```

----------------------------------------

TITLE: Install Prisma Client for Node.js (MySQL)
DESCRIPTION: This guide details the steps to install Prisma Client for Node.js when working with a MySQL database. It covers the necessary setup and configuration to get started with Prisma for MySQL projects.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-node-mysql

LANGUAGE: javascript
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider mysql
npx prisma generate
```

----------------------------------------

TITLE: Install Prisma Client (TypeScript/SQL Server)
DESCRIPTION: This guide explains how to install Prisma Client for a TypeScript project with a SQL Server database. It covers the necessary setup steps to integrate Prisma with your existing project.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-postgresql

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider sqlserver
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup
DESCRIPTION: Guides for setting up Prisma with PostgreSQL, including connecting from the CLI, upgrading from early access versions, and importing data from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-postgresql

LANGUAGE: bash
CODE:
```
npx prisma db push
```

----------------------------------------

TITLE: Install Prisma Client and Accelerate Extension
DESCRIPTION: Installs the latest versions of Prisma Client and the Accelerate Prisma Client extension using npm.

SOURCE: https://www.prisma.io/docs/accelerate/getting-started

LANGUAGE: bash
CODE:
```
npm install @prisma/client@latest @prisma/extension-accelerate
```

----------------------------------------

TITLE: Prisma Migrate Getting Started
DESCRIPTION: A guide to getting started with Prisma Migrate, Prisma's migration system. Covers creating initial migrations, applying them to the database, and managing migration history.

SOURCE: https://www.prisma.io/docs/orm/prisma-schema/overview

LANGUAGE: APIDOC
CODE:
```
npx prisma migrate dev --name init
npx prisma migrate deploy
```

----------------------------------------

TITLE: Install Prisma Client for TypeScript (MySQL)
DESCRIPTION: This guide details the steps to install Prisma Client for TypeScript when working with a MySQL database. It covers the necessary setup and configuration to get started with Prisma for MySQL projects using TypeScript.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-node-mysql

LANGUAGE: typescript
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider mysql
npx prisma generate
```

----------------------------------------

TITLE: Prisma Migrate: Getting Started
DESCRIPTION: A guide to setting up and using Prisma Migrate for managing database schema changes. It covers the initial setup and the first migration.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/queries/pagination

LANGUAGE: javascript
CODE:
```
npx prisma migrate dev --name init

```

----------------------------------------

TITLE: Prisma Quickstart (SQLite)
DESCRIPTION: A quickstart guide for setting up Prisma with a SQLite database, designed to get users up and running in approximately 5 minutes.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/evolve-your-schema-node-mysql

LANGUAGE: typescript
CODE:
```
console.log('This section covers the Prisma Quickstart for SQLite.');
// Key steps involve schema definition, migration, and client generation.
```

----------------------------------------

TITLE: Prisma Quickstart with PostgreSQL (TypeScript)
DESCRIPTION: A quickstart guide for setting up Prisma with PostgreSQL using TypeScript. This covers the initial steps to get a basic Prisma project running.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-prismaPostgres

LANGUAGE: typescript
CODE:
```
npx prisma init --datasource-provider postgresql

```

----------------------------------------

TITLE: Prisma Migrate Getting Started
DESCRIPTION: A guide to getting started with Prisma Migrate, including setting up migrations and applying them to your database.

SOURCE: https://www.prisma.io/docs/orm/overview/introduction/should-you-use-prisma

LANGUAGE: typescript
CODE:
```
npx prisma migrate dev --name init
```

----------------------------------------

TITLE: Prisma with Your Database
DESCRIPTION: Instructions on how to get started with Prisma using your own database, offering options for different database systems.

SOURCE: https://www.prisma.io/docs/getting-started

LANGUAGE: en
CODE:
```
Choose an option to get started with your own database
```

----------------------------------------

TITLE: Prisma Postgres Quickstart Sections
DESCRIPTION: An outline of the Prisma Postgres quickstart guide, detailing key sections from prerequisites to next steps.

SOURCE: https://www.prisma.io/docs/getting-started/quickstart-prismaPostgres

LANGUAGE: en
CODE:
```
Prerequisites: https://www.prisma.io/docs/getting-started/quickstart-prismaPostgres#prerequisites
1. Set up a Prisma Postgres database: https://www.prisma.io/docs/getting-started/quickstart-prismaPostgres#1-set-up-a-prisma-postgres-database-in-the-platform-console
2. Download example and install dependencies: https://www.prisma.io/docs/getting-started/quickstart-prismaPostgres#2-download-example-and-install-dependencies
3. Set database connection URL: https://www.prisma.io/docs/getting-started/quickstart-prismaPostgres#3-set-database-connection-url
4. Create database tables: https://www.prisma.io/docs/getting-started/quickstart-prismaPostgres#4-create-database-tables-with-a-schema-migration
5. Execute queries with Prisma ORM: https://www.prisma.io/docs/getting-started/quickstart-prismaPostgres#5-execute-queries-with-prisma-orm
6. Explore caching with Prisma Accelerate: https://www.prisma.io/docs/getting-started/quickstart-prismaPostgres#6-explore-caching-with-prisma-accelerate
7. Next steps: https://www.prisma.io/docs/getting-started/quickstart-prismaPostgres#7-next-steps
```

----------------------------------------

TITLE: Getting Started with Prisma and MongoDB
DESCRIPTION: This guide covers the initial setup for using Prisma with MongoDB, focusing on a TypeScript environment. It includes steps for connecting and performing basic operations.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/using-prisma-migrate-typescript-sqlserver

LANGUAGE: typescript
CODE:
```
npx prisma init --datasource-provider mongodb
npx prisma db push
npx prisma generate
```

----------------------------------------

TITLE: Prisma ORM
DESCRIPTION: Information about Prisma ORM, described as the easiest way to get started with Prisma. It covers setup and usage for various database options.

SOURCE: https://www.prisma.io/docs/getting-started

LANGUAGE: en
CODE:
```
The easiest way to get started with Prisma
```

----------------------------------------

TITLE: Download Example and Install Dependencies
DESCRIPTION: Commands to download the example Prisma project, install Node.js dependencies, and initialize a Git repository.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/deployment/traditional/deploy-to-koyeb

LANGUAGE: bash
CODE:
```
mkdir prisma-on-koyeb
cd prisma-on-koyeb
curl https://github.com/koyeb/example-prisma/tarball/main/latest | tar xz --strip=1
npm install
```

----------------------------------------

TITLE: Prisma Products
DESCRIPTION: Overview of Prisma products including ORM, Studio, Optimize, Accelerate, and Postgres. Also includes links to pricing and changelog.

SOURCE: https://www.prisma.io/docs/getting-started

LANGUAGE: en
CODE:
```
ORM
Studio
Optimize
Accelerate
Postgres
Pricing
Changelog
Data Platform status ↗
```

----------------------------------------

TITLE: Prisma Migrate: Getting Started
DESCRIPTION: Guides users through the initial setup of Prisma Migrate. This involves creating a migration file and applying it to the database to set up the initial schema.

SOURCE: https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/relation-mode

LANGUAGE: bash
CODE:
```
# Install Prisma CLI if you haven't already
npm install prisma --save-dev

# Create a new migration
npx prisma migrate dev --name init

# This will create a migration file in prisma/migrations and apply it to your database.
```

----------------------------------------

TITLE: Prisma Quickstart with MySQL (TypeScript)
DESCRIPTION: A quickstart guide for setting up Prisma with MySQL using TypeScript. This covers the initial steps to get a basic Prisma project running.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-prismaPostgres

LANGUAGE: mysql
CODE:
```
npx prisma init --datasource-provider mysql

```

----------------------------------------

TITLE: Prisma Quickstart with PlanetScale (Node.js)
DESCRIPTION: A quickstart guide for setting up Prisma with PlanetScale using Node.js. This covers the initial steps to get a basic Prisma project running.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-prismaPostgres

LANGUAGE: node
CODE:
```
npx prisma init --datasource-provider planetscale

```

----------------------------------------

TITLE: Prisma Migrate: Getting Started
DESCRIPTION: A guide to setting up and performing your first database migrations using Prisma Migrate.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/queries/full-text-search

LANGUAGE: bash
CODE:
```
# 1. Install Prisma CLI
npm install prisma --save-dev

# 2. Initialize Prisma in your project
# This creates schema.prisma and .env files
# prisma init

# 3. Define your database schema in schema.prisma
# datasource db { ... }
# generator client { ... }
# model User { ... }

# 4. Create your first migration
# This generates SQL based on schema.prisma
# prisma migrate dev --name init

# 5. Apply the migration to your database
# Prisma Migrate handles this automatically with 'prisma migrate dev'

# 6. Generate Prisma Client
# This updates the client based on your schema
# prisma generate
```

----------------------------------------

TITLE: Prisma Migrate Getting Started
DESCRIPTION: A step-by-step guide to getting started with Prisma Migrate for managing database schema changes.

SOURCE: https://www.prisma.io/docs/orm/more/releases

LANGUAGE: APIDOC
CODE:
```
Prisma Migrate Getting Started:
  Initializing Prisma Migrate in your project
  Creating your first migration
  Applying migrations to your database
  Basic workflow for schema evolution
```

----------------------------------------

TITLE: Connect Database with Prisma
DESCRIPTION: Guides on connecting your existing project to a relational database using Prisma. Covers setup for SQL Server with TypeScript.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/baseline-your-database-node-postgresql

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for database connection steps.');
// Example: prisma.schema configuration would be detailed here.
```

----------------------------------------

TITLE: Prisma Resources
DESCRIPTION: Links to essential Prisma resources such as Docs, Ecosystem, Playground, Benchmarks, Customer stories, and Data guide.

SOURCE: https://www.prisma.io/docs/getting-started

LANGUAGE: en
CODE:
```
Docs
Ecosystem
Playground ↗
ORM Benchmarks ↗
Customer stories
Data guide
```

----------------------------------------

TITLE: Prisma Migrate Getting Started
DESCRIPTION: A step-by-step guide to using Prisma Migrate for database schema evolution, covering initial setup, creating migrations, and applying them.

SOURCE: https://www.prisma.io/docs/orm/more/help-and-troubleshooting/pkg-issue

LANGUAGE: javascript
CODE:
```
# 1. Initialize Prisma Migrate (if not already done)
# prisma init

# 2. Define your initial data model in schema.prisma
# model User { ... }
# model Post { ... }

# 3. Create the first migration
# prisma migrate dev --name init_schema
# This will create a migration file in the migrations/ directory
# and apply it to your database.

# 4. Make changes to your schema.prisma file (e.g., add a new field)
# model User {
#   id        Int      @id @default(autoincrement())
#   email     String   @unique
#   name      String?
#   createdAt DateTime @default(now())
# }

# 5. Create and apply the next migration
# prisma migrate dev --name add_created_at_to_user
# Prisma Migrate will detect the changes and generate a new migration file.

# 6. View migration history
# prisma migrate status

# 7. Reset the database (use with caution!)
# prisma migrate reset

```

----------------------------------------

TITLE: Prisma Quickstart with MySQL (Node.js)
DESCRIPTION: A quickstart guide for setting up Prisma with MySQL using Node.js. This covers the initial steps to get a basic Prisma project running.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-prismaPostgres

LANGUAGE: node
CODE:
```
npx prisma init --datasource-provider mysql

```

----------------------------------------

TITLE: Connect Database with Prisma
DESCRIPTION: Guides on connecting your existing project to a relational database using Prisma. Covers setup for SQL Server with TypeScript.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/evolve-your-schema-typescript-sqlserver

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for database connection steps.');
// Example: prisma.schema configuration would be detailed here.
```

----------------------------------------

TITLE: Prisma Quickstart with PostgreSQL (TypeScript)
DESCRIPTION: A quickstart guide for setting up Prisma with PostgreSQL using TypeScript. This covers the initial steps to get a basic Prisma project running.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-prismaPostgres

LANGUAGE: postgresql
CODE:
```
npx prisma init --datasource-provider postgresql

```

----------------------------------------

TITLE: Prisma ORM Setup - Start from Scratch (TypeScript)
DESCRIPTION: Guides users through setting up the Prisma ORM from scratch using TypeScript for various relational databases. Covers initial project setup and connecting to the database.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/querying-the-database-typescript-mysql

LANGUAGE: typescript
CODE:
```
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-postgresql
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-prismaPostgres
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-mysql
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-planetscale
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-sqlserver
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-cockroachdb
```

----------------------------------------

TITLE: Prisma Quickstart with SQL Server (TypeScript)
DESCRIPTION: A quickstart guide for setting up Prisma with SQL Server using TypeScript. This covers the initial steps to get a basic Prisma project running.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-prismaPostgres

LANGUAGE: sqlserver
CODE:
```
npx prisma init --datasource-provider sqlserver

```

----------------------------------------

TITLE: Prisma ORM Setup: Start from Scratch
DESCRIPTION: This section covers the initial setup of Prisma ORM when starting a new project from scratch. It guides users through the basic configuration steps.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/introspection-node-postgresql

LANGUAGE: javascript
CODE:
```
npm install prisma --save-dev
npx prisma init
```

----------------------------------------

TITLE: Prisma Quickstart with SQL Server (Node.js)
DESCRIPTION: A quickstart guide for setting up Prisma with SQL Server using Node.js. This covers the initial steps to get a basic Prisma project running.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-prismaPostgres

LANGUAGE: node
CODE:
```
npx prisma init --datasource-provider sqlserver

```

----------------------------------------

TITLE: Connect Database with Prisma
DESCRIPTION: Guides on connecting your existing project to a relational database using Prisma. Covers setup for SQL Server with TypeScript.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-cockroachdb

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for database connection steps.');
// Example: prisma.schema configuration would be detailed here.
```

----------------------------------------

TITLE: Prisma ORM Setup and Usage Examples
DESCRIPTION: This section covers various setup and usage scenarios for Prisma ORM with different databases like MongoDB and PostgreSQL. It includes steps for starting from scratch, connecting to databases, creating Prisma schemas, installing Prisma Client, and querying databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/mongodb/next-steps

LANGUAGE: APIDOC
CODE:
```
Prisma ORM Setup and Usage:

1.  **Start from scratch (MongoDB)**:
    *   **Node.js**: `npx prisma init --datasource-provider mongodb`
    *   **TypeScript**: `npx prisma init --datasource-provider mongodb`

2.  **Connect your database (MongoDB)**:
    *   **Node.js**: Update `schema.prisma` with MongoDB connection string.
    *   **TypeScript**: Update `schema.prisma` with MongoDB connection string.

3.  **Creating the Prisma schema (MongoDB)**:
    *   Define your MongoDB collections and fields within `schema.prisma`.
    *   Example:
        ```prisma
        model User {
          id    String @id @default(auto()) @map("_id") @db.ObjectId
          email String @unique
          name  String?
        }
        ```

4.  **Install Prisma Client**:
    *   **Node.js**: `npm install @prisma/client`
    *   **TypeScript**: `npm install @prisma/client`

5.  **Querying the database (MongoDB)**:
    *   **Node.js**: 
        ```javascript
        const { PrismaClient } = require('@prisma/client');
        const prisma = new PrismaClient();

        async function main() {
          const newUser = await prisma.user.create({
            data: {
              email: 'test@example.com',
              name: 'Test User',
            },
          });
          console.log(newUser);
        }
        main()
          .catch((e) => {
            console.error(e);
            process.exit(1);
          })
          .finally(async () => {
            await prisma.$disconnect();
          });
        ```
    *   **TypeScript**: 
        ```typescript
        import { PrismaClient } from '@prisma/client';
        const prisma = new PrismaClient();

        async function main() {
          const newUser = await prisma.user.create({
            data: {
              email: 'test@example.com',
              name: 'Test User',
            },
          });
          console.log(newUser);
        }
        main()
          .catch((e) => {
            console.error(e);
            process.exit(1);
          })
          .finally(async () => {
            await prisma.$disconnect();
          });
        ```

6.  **Prisma Postgres - Import from existing database**:
    *   **PostgreSQL**: `npx prisma db pull` or `npx prisma migrate dev --name init`
    *   **MySQL**: `npx prisma db pull` or `npx prisma migrate dev --name init`

7.  **Prisma ORM Overview**: Explore the [Introduction](https://www.prisma.io/docs/orm/overview/introduction/what-is-prisma) page for a high-level overview of Prisma ORM.
```

----------------------------------------

TITLE: Connect Database with Prisma
DESCRIPTION: Guides on connecting your existing project to a relational database using Prisma. Covers setup for SQL Server with TypeScript.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-postgresql

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for database connection steps.');
// Example: prisma.schema configuration would be detailed here.
```

----------------------------------------

TITLE: Prisma ORM Setup
DESCRIPTION: This section covers the initial setup for Prisma ORM, including creating a new project and configuring the datasource provider.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-postgresql

LANGUAGE: APIDOC
CODE:
```
Prisma ORM Setup:

Initialize Prisma project:
  npx prisma init --datasource-provider <provider>
    <provider>: The database provider (e.g., postgresql, mysql, sqlite, sqlserver, mongodb, cockroachdb)

Configure datasource in schema.prisma:
  datasource db {
    provider = "<provider>"
    url      = env("DATABASE_URL")
  }

Configure generator:
  generator client {
    provider = "prisma-client-js"
  }
```

----------------------------------------

TITLE: Prisma Quickstart with CockroachDB (Node.js)
DESCRIPTION: A quickstart guide for setting up Prisma with CockroachDB using Node.js. This covers the initial steps to get a basic Prisma project running.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-prismaPostgres

LANGUAGE: node
CODE:
```
npx prisma init --datasource-provider cockroachdb

```

----------------------------------------

TITLE: Prisma Quickstart with CockroachDB (TypeScript)
DESCRIPTION: A quickstart guide for setting up Prisma with CockroachDB using TypeScript. This covers the initial steps to get a basic Prisma project running.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-prismaPostgres

LANGUAGE: cockroachdb
CODE:
```
npx prisma init --datasource-provider cockroachdb

```

----------------------------------------

TITLE: Prisma Quickstart with PostgreSQL (Node.js)
DESCRIPTION: A quickstart guide for setting up Prisma with PostgreSQL using Node.js. This covers the initial steps to get a basic Prisma project running.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-prismaPostgres

LANGUAGE: node
CODE:
```
npx prisma init --datasource-provider postgresql

```

----------------------------------------

TITLE: Prisma Quickstart with SQLite (TypeScript)
DESCRIPTION: A quickstart guide for setting up Prisma with SQLite using TypeScript. This covers the initial steps to get a basic Prisma project running with SQLite.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-prismaPostgres

LANGUAGE: typescript
CODE:
```
npx prisma init --datasource-provider sqlite

```

----------------------------------------

TITLE: Prisma ORM Quickstart
DESCRIPTION: Quickstart guides for setting up and using the Prisma ORM. Includes guides for PostgreSQL and SQLite.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/querying-the-database-typescript-planetscale

LANGUAGE: typescript
CODE:
```
https://www.prisma.io/docs/getting-started/quickstart-prismaPostgres
https://www.prisma.io/docs/getting-started/quickstart-sqlite
```

----------------------------------------

TITLE: Prisma Migrate Node.js MySQL Setup
DESCRIPTION: Guides on setting up Prisma Migrate with Node.js and MySQL. Covers initial project setup and database connection.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/using-prisma-migrate-node-mysql

LANGUAGE: bash
CODE:
```
npx prisma migrate dev --name init
```

----------------------------------------

TITLE: Prisma Migrate - Getting Started
DESCRIPTION: A guide to setting up and using Prisma Migrate for managing database schema changes.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/queries

LANGUAGE: bash
CODE:
```
npx prisma migrate dev --name init
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup from CLI
DESCRIPTION: Guidance on setting up Prisma with PostgreSQL directly from the command line interface.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/baseline-your-database-node-postgresql

LANGUAGE: cli
CODE:
```
npx prisma init --datasource-provider postgresql
npx prisma db push
```

----------------------------------------

TITLE: Prisma Migrate: Getting Started
DESCRIPTION: Guides users through the initial setup of Prisma Migrate, including creating the initial migration, defining the database schema, and applying migrations to the database.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/queries/custom-validation

LANGUAGE: typescript
CODE:
```
# Initialize Prisma Migrate
prisma init

# Create a new migration file
prisma migrate dev --name init

# Apply migrations to the database
prisma migrate deploy
```

----------------------------------------

TITLE: Prisma CLI Installation
DESCRIPTION: Instructions for installing the Prisma CLI, which is required to interact with the Prisma Data Platform. Ensure you follow the setup instructions to get started.

SOURCE: https://www.prisma.io/docs/platform/platform-cli/about

LANGUAGE: bash
CODE:
```
npm install -g prisma
# or
yarn global add prisma
```

----------------------------------------

TITLE: Create Project Directory and Navigate
DESCRIPTION: Initializes a new project directory and changes the current directory to it. This is the first step in setting up a new project.

SOURCE: https://www.prisma.io/docs/getting-started/quickstart-sqlite

LANGUAGE: bash
CODE:
```
mkdir hello-prisma  
cd hello-prisma  
```

----------------------------------------

TITLE: Install Prisma Client with TypeScript and MySQL
DESCRIPTION: This guide details the steps to install Prisma Client for a TypeScript project using a MySQL database. It covers the initial setup and configuration required to start using Prisma for database operations.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-typescript-mysql

LANGUAGE: typescript
CODE:
```
npx prisma init --datasource-provider mysql
npx prisma generate
```

----------------------------------------

TITLE: Install Prisma Client with TypeScript and PostgreSQL
DESCRIPTION: This guide details the steps to install Prisma Client for TypeScript projects using a PostgreSQL database. It covers the initial setup and configuration required to start using Prisma for database interactions.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-typescript-postgresql

LANGUAGE: typescript
CODE:
```
npx prisma init --datasource-provider postgresql
npx prisma generate
```

----------------------------------------

TITLE: Prisma Postgres Introduction and Setup
DESCRIPTION: Guides users through the initial steps of setting up and understanding Prisma Postgres, including commands like `npx create-db`.

SOURCE: https://www.prisma.io/docs/postgres/introduction

LANGUAGE: bash
CODE:
```
npx create-db
```

----------------------------------------

TITLE: Prisma ORM Quickstart
DESCRIPTION: A quickstart guide for using the Prisma ORM, covering initial setup and basic operations for PostgreSQL and SQLite databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/introspection-node-cockroachdb

LANGUAGE: APIDOC
CODE:
```
Prisma Schema:
  datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
  }

  generator client {
    provider = "prisma-client-js"
  }

  model User {
    id    Int     @id @default(autoincrement())
    email String  @unique
    name  String?
  }

CLI Commands:
  prisma init
    Initializes a new Prisma project.

  prisma migrate dev --name init
    Creates a new migration and applies it to the database.

  prisma generate
    Generates the Prisma Client based on your schema.

  npx prisma studio
    Opens Prisma Studio for data exploration.
```

----------------------------------------

TITLE: Install Prisma Client
DESCRIPTION: Provides instructions for installing Prisma Client in your project, enabling type-safe database access. Covers installation for Node.js and TypeScript with support for CockroachDB, MySQL, PlanetScale, PostgreSQL, and SQL Server.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/baseline-your-database-node-postgresql

LANGUAGE: javascript
CODE:
```
console.log('Refer to Prisma documentation for Prisma Client installation.');
// Example: npm install @prisma/client (for Node.js)
// Example: npm install @prisma/client (for TypeScript)
```

----------------------------------------

TITLE: TanStack Start Integration with Prisma
DESCRIPTION: Guide on integrating Prisma with TanStack Start, covering project setup, Prisma installation and configuration, schema definition, database seeding, and fetching/displaying data.

SOURCE: https://www.prisma.io/docs/guides/tanstack-start

LANGUAGE: en
CODE:
```
1. Set up your project
2. Install and Configure Prisma
   2.1. Install dependencies
   2.2. Define your Prisma Schema
   2.3. Configure the Prisma Client generator
   2.4. Seed the database
3. Integrate Prisma into TanStack Start
   3.1 Create a Prisma Client
   3.2 Fetch users and posts on load
   3.3 Display the users and posts
```

----------------------------------------

TITLE: Connect to Relational Databases (TypeScript)
DESCRIPTION: This guide details how to set up database connections for TypeScript applications with Prisma. It includes connection string examples for different relational databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/evolve-your-schema-typescript-sqlserver

LANGUAGE: typescript
CODE:
```
// Example for PostgreSQL
// DATABASE_URL="postgresql://user:password@host:port/database?schema=public"

// Example for MySQL
// DATABASE_URL="mysql://user:password@host:port/database"

// Example for SQL Server
// DATABASE_URL="sqlserver://user:password@host:port;database=database;schema=schema"

// Example for CockroachDB
// DATABASE_URL="postgresql://user:password@host:port/database?sslmode=verify-full"

// Example for PlanetScale
// DATABASE_URL="mysql://user:password@host:port/database"
```

----------------------------------------

TITLE: Prisma Migrate Getting Started
DESCRIPTION: A guide to setting up and using Prisma Migrate for the first time, including initial migration creation.

SOURCE: https://www.prisma.io/docs/orm/tools

LANGUAGE: APIDOC
CODE:
```
Prisma Migrate Getting Started:

1. Install Prisma CLI:
   `npm install prisma --save-dev` or `yarn add prisma --dev`

2. Initialize Prisma:
   `npx prisma init`
   This creates a `prisma` directory with `schema.prisma` and `.env` files.

3. Configure Database Connection:
   Update the `DATABASE_URL` in your `.env` file with your database connection string.

4. Define Your Schema:
   Edit `prisma/schema.prisma` to define your data models.

5. Create Initial Migration:
   `npx prisma migrate dev --name init`
   This command creates the first migration based on your schema and applies it to the database.

6. Generate Prisma Client:
   `npx prisma generate`
   This generates the type-safe Prisma Client based on your schema.
```

----------------------------------------

TITLE: Prisma Migrate Getting Started
DESCRIPTION: An introduction to Prisma Migrate, covering the initial setup and basic usage for managing database schema.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/deployment/serverless/deploy-to-azure-functions

LANGUAGE: en
CODE:
```
Getting started: https://www.prisma.io/docs/orm/prisma-migrate/getting-started
```

----------------------------------------

TITLE: Install Prisma Client with Node.js and PostgreSQL
DESCRIPTION: This guide details the steps to install Prisma Client for Node.js projects using a PostgreSQL database. It covers the initial setup and configuration required to start using Prisma for database interactions.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-typescript-postgresql

LANGUAGE: node
CODE:
```
npx prisma init --datasource-provider postgresql
npx prisma generate
```

----------------------------------------

TITLE: Prisma ORM Setup - Start from Scratch (Node.js)
DESCRIPTION: Guides users through setting up the Prisma ORM from scratch using Node.js for various relational databases. Covers initial project setup and connecting to the database.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/querying-the-database-typescript-mysql

LANGUAGE: node
CODE:
```
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-postgresql
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-mysql
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-planetscale
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-sqlserver
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-cockroachdb
```

----------------------------------------

TITLE: Prisma ORM Setup from Scratch
DESCRIPTION: Instructions for setting up Prisma ORM when starting a project from scratch. This covers the initial configuration and integration steps.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/next-steps

LANGUAGE: APIDOC
CODE:
```
Prisma ORM Setup (Start from Scratch):
  - Description: Guide to setting up Prisma ORM for a new project.
  - URL: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch
```

----------------------------------------

TITLE: Prisma Client Installation and Initialization (SQL Server)
DESCRIPTION: This section details the process of installing and initializing Prisma Client for use with a SQL Server database, as part of the 'Start from scratch' guide.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-node-sqlserver

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider sqlserver
```

----------------------------------------

TITLE: Prisma ORM Tutorials
DESCRIPTION: Links to tutorials for building full-stack applications and REST APIs using Prisma ORM with various frameworks.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/next-steps

LANGUAGE: markdown
CODE:
```
* [Build a fullstack app with Next.js](https://www.youtube.com/watch?v=QXxy8Uv1LnQ&ab_channel=ByteGrad)
* [Build a fullstack app with Remix](https://www.prisma.io/blog/fullstack-remix-prisma-mongodb-1-7D0BfTXBmB6r) (5 parts, including videos)
* [Build a REST API with NestJS](https://www.prisma.io/blog/nestjs-prisma-rest-api-7D056s1BmOL0)
```

----------------------------------------

TITLE: Prisma Quickstart Guides
DESCRIPTION: Quickstart guides for setting up Prisma with different database types, including PostgreSQL and SQLite. These guides are designed for a rapid introduction to Prisma.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-mysql

LANGUAGE: javascript
CODE:
```
https://www.prisma.io/docs/getting-started/quickstart-prismaPostgres
https://www.prisma.io/docs/getting-started/quickstart-sqlite
```

----------------------------------------

TITLE: Prisma Migrate: Getting Started
DESCRIPTION: Provides instructions on how to initialize Prisma Migrate in your project, create your first migration, and apply it to your database. Covers the basic commands to get started with schema migrations.

SOURCE: https://www.prisma.io/docs/orm/prisma-migrate/workflows/squashing-migrations

LANGUAGE: bash
CODE:
```
# Initialize Prisma Migrate
prisma migrate dev --name init

# Apply migrations (e.g., in production)
prisma migrate deploy
```

----------------------------------------

TITLE: Prisma Postgres Database Setup
DESCRIPTION: Steps to create a Prisma Postgres database using the Prisma Data Platform Console. This involves logging in, creating a new project, selecting a region, and initiating the database creation process.

SOURCE: https://www.prisma.io/docs/getting-started/quickstart-prismaPostgres

LANGUAGE: APIDOC
CODE:
```
PrismaDataPlatformConsole:
  Login:
    - Navigate to https://console.prisma.io/
    - Authenticate with your Prisma Data Platform account.
  CreateProject:
    - Click 'New project' button within a workspace.
    - Enter a project name (e.g., 'hello-ppg').
    - In the 'Prisma Postgres' section, click 'Get started'.
    - Select the closest region from the 'Region' dropdown (e.g., 'US East (N. Virginia)').
    - Click the 'Create project' button.
  DatabaseStatus:
    - Monitor the database status on the 'Database' page.
    - Wait for the status to change from 'PROVISIONING' to 'CONNECTED'.
```

----------------------------------------

TITLE: Install Prisma Client
DESCRIPTION: Provides instructions for installing Prisma Client in your project, enabling type-safe database access. Covers installation for Node.js and TypeScript with support for CockroachDB, MySQL, PlanetScale, PostgreSQL, and SQL Server.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/evolve-your-schema-typescript-sqlserver

LANGUAGE: javascript
CODE:
```
console.log('Refer to Prisma documentation for Prisma Client installation.');
// Example: npm install @prisma/client (for Node.js)
// Example: npm install @prisma/client (for TypeScript)
```

----------------------------------------

TITLE: Prisma ORM Setup - Start from Scratch
DESCRIPTION: Documentation on setting up the Prisma ORM from scratch, including project initialization and schema definition.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-node-planetscale

LANGUAGE: typescript
CODE:
```
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch
```

----------------------------------------

TITLE: Getting Started with CockroachDB and Prisma
DESCRIPTION: Guides for setting up CockroachDB with Prisma ORM. Covers starting from scratch or adding to an existing project, including schema migration and Prisma Client usage.

SOURCE: https://www.prisma.io/docs/orm/overview/databases/cockroachdb

LANGUAGE: markdown
CODE:
```
* [Start from scratch](https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-cockroachdb)
* [Add to existing project](https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-typescript-cockroachdb)
```

----------------------------------------

TITLE: Prisma Migrate - Getting Started
DESCRIPTION: Provides a step-by-step guide to setting up and using Prisma Migrate for managing database schema changes.

SOURCE: https://www.prisma.io/docs/orm/prisma-schema/data-model

LANGUAGE: bash
CODE:
```
npx prisma migrate dev --name init
```

----------------------------------------

TITLE: Install Prisma Client
DESCRIPTION: Installs the `@prisma/client` package, which provides a type-safe database client tailored to your Prisma schema. The installation process also triggers `prisma generate`.

SOURCE: https://www.prisma.io/docs/getting-started/quickstart-sqlite

LANGUAGE: bash
CODE:
```
npm install @prisma/client
```

----------------------------------------

TITLE: Prisma Quickstart - PostgreSQL
DESCRIPTION: A quickstart guide for setting up Prisma with a PostgreSQL database, designed for rapid project initiation.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-node-planetscale

LANGUAGE: typescript
CODE:
```
https://www.prisma.io/docs/getting-started/quickstart-prismaPostgres
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup
DESCRIPTION: Documentation for setting up Prisma with PostgreSQL, including CLI commands and importing from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-cockroachdb

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider postgresql
```

LANGUAGE: bash
CODE:
```
npx prisma db push
```

LANGUAGE: bash
CODE:
```
npx prisma db pull
```

----------------------------------------

TITLE: Initial Setup with Prisma ORM 2.x+
DESCRIPTION: Steps for the initial setup when migrating to Prisma ORM 2.x or later, including installing the CLI and introspecting the database.

SOURCE: https://www.prisma.io/docs/orm/more/upgrade-guides/upgrade-from-prisma-1/how-to-upgrade

LANGUAGE: bash
CODE:
```
npx prisma init
npx prisma db pull
```

----------------------------------------

TITLE: Prisma Product Links
DESCRIPTION: Links to various Prisma products and features, including ORM, Studio, Optimize, Accelerate, and Postgres.

SOURCE: https://www.prisma.io/docs/getting-started/quickstart-prismaPostgres

LANGUAGE: en
CODE:
```
ORM: https://www.prisma.io/orm
Studio: https://www.prisma.io/studio
Optimize: https://www.prisma.io/optimize
Accelerate: https://www.prisma.io/accelerate
Postgres: https://www.prisma.io/postgres
Pricing: https://www.prisma.io/pricing
Changelog: https://www.prisma.io/changelog
Data Platform status: https://www.prisma-status.com/
```

----------------------------------------

TITLE: Install Prisma Dependencies
DESCRIPTION: Installs Prisma ORM and the Accelerate extension as development dependencies using npm.

SOURCE: https://www.prisma.io/docs/getting-started/prisma-postgres/from-the-cli

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npm install @prisma/extension-accelerate
```

----------------------------------------

TITLE: Install Prisma Client for SQL Server (TypeScript)
DESCRIPTION: Instructions for installing Prisma Client in an existing project with a SQL Server database using TypeScript.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/baseline-your-database-node-postgresql

LANGUAGE: typescript
CODE:
```
npx prisma init --datasource-provider mssql
npx prisma generate
```

----------------------------------------

TITLE: Prisma Resources Links
DESCRIPTION: Links to essential Prisma resources such as documentation, ecosystem, playground, benchmarks, customer stories, and data guide.

SOURCE: https://www.prisma.io/docs/getting-started/quickstart-prismaPostgres

LANGUAGE: en
CODE:
```
Docs: https://www.prisma.io/docs
Ecosystem: https://www.prisma.io/ecosystem
Playground: https://playground.prisma.io/
ORM Benchmarks: https://benchmarks.prisma.io/
Customer stories: https://www.prisma.io/showcase
Data guide: https://www.prisma.io/dataguide
```

----------------------------------------

TITLE: Initialize Project and Install Prisma CLI
DESCRIPTION: Commands to create a new project directory, navigate into it, initialize a Node.js project, and install the Prisma CLI as a development dependency.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-mysql

LANGUAGE: bash
CODE:
```
mkdir hello-prisma
cd hello-prisma
npm init -y
npm install prisma --save-dev
```

----------------------------------------

TITLE: Add Prisma to Existing Project (TypeScript - PostgreSQL)
DESCRIPTION: Guide on integrating Prisma ORM into an existing TypeScript project with a PostgreSQL database. Covers setup and initial connection steps.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-typescript-postgresql

LANGUAGE: typescript
CODE:
```
console.log('Prisma setup for TypeScript and PostgreSQL');
// Further steps would involve prisma init, schema definition, and migration.
```

----------------------------------------

TITLE: Add Prisma to Existing Project (Node.js - PostgreSQL)
DESCRIPTION: Guide on integrating Prisma ORM into an existing Node.js project with a PostgreSQL database. Covers setup and initial connection steps.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-typescript-postgresql

LANGUAGE: javascript
CODE:
```
console.log('Prisma setup for Node.js and PostgreSQL');
// Further steps would involve prisma init, schema definition, and migration.
```

----------------------------------------

TITLE: Prisma CLI, Client, and Migrate Introduction
DESCRIPTION: This section introduces the fundamental tools of Prisma: the Prisma CLI for database migrations and schema management, Prisma Client for type-safe database access, and Prisma Migrate for evolving your database schema.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch

LANGUAGE: bash
CODE:
```
npx prisma init
npx prisma migrate dev --name init
npx prisma generate
```

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main() {
  const newUser = await prisma.user.create({
    data: {
      name: 'Alice',
      email: 'alice@example.com'
    }
  })
  console.log(newUser)
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Prisma Migrate - Getting Started
DESCRIPTION: A step-by-step guide to setting up and using Prisma Migrate for managing database schema changes.

SOURCE: https://www.prisma.io/docs/orm/more/comparisons

LANGUAGE: APIDOC
CODE:
```
Prisma Migrate Getting Started:
  1. Initialize Prisma Migrate:
     `prisma init --datasource-provider <provider>`

  2. Define your data model in `schema.prisma`.

  3. Create the first migration:
     `prisma migrate dev --name init`

  4. Apply migrations during deployment:
     `prisma migrate deploy`

  Key commands:
    - `prisma migrate dev`: For development workflows, creates and applies migrations.
    - `prisma migrate reset`: Resets the database to an empty state and applies all migrations.
    - `prisma migrate deploy`: Applies pending migrations to the database (production).
    - `prisma migrate diff`: Compares two sets of migrations or a schema against the database.
```

----------------------------------------

TITLE: Prisma Migrate: Getting Started
DESCRIPTION: A step-by-step guide to setting up and using Prisma Migrate for managing database schema changes.

SOURCE: https://www.prisma.io/docs/orm/more/upgrade-guides

LANGUAGE: APIDOC
CODE:
```
Prisma Migrate: Getting Started:

1. Install Prisma CLI:
   `npm install prisma --save-dev` or `yarn add prisma --dev`

2. Initialize Prisma:
   If you haven't already, run `prisma init` in your project root.
   This creates a `prisma` directory with `schema.prisma` and `.env` files.

3. Configure Database Connection:
   Update your `.env` file with your database connection URL:
   `DATABASE_URL="postgresql://user:password@host:port/database?schema=public"`

4. Define Your Data Model:
   Edit `prisma/schema.prisma` to define your database models.

5. Create Your First Migration:
   Run `prisma migrate dev --name init`.
   This command will:
     - Introspect your database (if it exists).
     - Generate a SQL migration file based on your schema.
     - Apply the migration to your database.

6. Generate Prisma Client:
   Run `prisma generate` to generate the Prisma Client based on your schema.

7. Use Prisma Client in Your Application:
   Import and use the Prisma Client to interact with your database.
```

----------------------------------------

TITLE: Install Prisma Client
DESCRIPTION: Instructions for installing Prisma Client in your Node.js or TypeScript project. This allows you to interact with your database using a type-safe client.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-typescript-postgresql

LANGUAGE: APIDOC
CODE:
```
Installation Command:

# Using npm
npm install prisma --save-dev
npm install @prisma/client

# Using yarn
yarn add prisma --dev
yarn add @prisma/client

# After installation, generate the Prisma Client:
npx prisma generate

// Example of using Prisma Client in TypeScript:
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  const users = await prisma.user.findMany()
  console.log(users)
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Install Prisma Client
DESCRIPTION: Provides instructions for installing Prisma Client in your project, enabling type-safe database access. Covers installation for Node.js and TypeScript with support for CockroachDB, MySQL, PlanetScale, PostgreSQL, and SQL Server.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-postgresql

LANGUAGE: javascript
CODE:
```
console.log('Refer to Prisma documentation for Prisma Client installation.');
// Example: npm install @prisma/client (for Node.js)
// Example: npm install @prisma/client (for TypeScript)
```

----------------------------------------

TITLE: Querying Databases (TypeScript)
DESCRIPTION: This guide demonstrates how to query databases using Prisma Client in a TypeScript project. It provides examples for CockroachDB, MySQL, PlanetScale, PostgreSQL, and SQL Server.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/evolve-your-schema-typescript-sqlserver

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main() {
  // Example: Find all users
  const users = await prisma.user.findMany()
  console.log(users)
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Prisma with MongoDB
DESCRIPTION: A quick start guide for using Prisma with MongoDB, focusing on a 15-minute setup with TypeScript.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/using-prisma-migrate-node-sqlserver

LANGUAGE: typescript
CODE:
```
// See: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/mongodb-typescript-mongodb
```

----------------------------------------

TITLE: Initialize Project Directory and Navigate
DESCRIPTION: Creates a new project directory named 'hello-prisma' and changes the current directory to it. This is the first step in setting up a new project.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-sqlserver

LANGUAGE: bash
CODE:
```
mkdir hello-prisma
cd hello-prisma
```

----------------------------------------

TITLE: Querying Databases (TypeScript)
DESCRIPTION: This guide demonstrates how to query databases using Prisma Client in a TypeScript project. It provides examples for CockroachDB, MySQL, PlanetScale, PostgreSQL, and SQL Server.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-typescript-postgresql

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main() {
  // Example: Find all users
  const users = await prisma.user.findMany()
  console.log(users)
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Prisma Product Links
DESCRIPTION: Links to various Prisma products and features, including ORM, Studio, Optimize, Accelerate, Postgres, Pricing, and Changelog.

SOURCE: https://www.prisma.io/docs/getting-started/quickstart-sqlite

LANGUAGE: APIDOC
CODE:
```
Prisma Products:
  - ORM: https://www.prisma.io/orm
  - Studio: https://www.prisma.io/studio
  - Optimize: https://www.prisma.io/optimize
  - Accelerate: https://www.prisma.io/accelerate
  - Postgres: https://www.prisma.io/postgres
  - Pricing: https://www.prisma.io/pricing
  - Changelog: https://www.prisma.io/changelog
  - Data Platform status: https://www.prisma-status.com/
```

----------------------------------------

TITLE: Prisma Migrate Getting Started
DESCRIPTION: Guides on initializing Prisma Migrate and creating the first migration.

SOURCE: https://www.prisma.io/docs/orm/more/help-and-troubleshooting/typescript-performance-optimization

LANGUAGE: bash
CODE:
```
# Initialize Prisma Migrate
npx prisma migrate dev --name init

# Apply migrations
npx prisma migrate deploy
```

----------------------------------------

TITLE: Install Prisma Client
DESCRIPTION: Provides instructions for installing Prisma Client in your project, enabling type-safe database access. Covers installation for Node.js and TypeScript with support for CockroachDB, MySQL, PlanetScale, PostgreSQL, and SQL Server.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-cockroachdb

LANGUAGE: javascript
CODE:
```
console.log('Refer to Prisma documentation for Prisma Client installation.');
// Example: npm install @prisma/client (for Node.js)
// Example: npm install @prisma/client (for TypeScript)
```

----------------------------------------

TITLE: Prisma ORM Setup Prerequisites
DESCRIPTION: Details the necessary software and configurations required before starting with Prisma ORM. This includes having Node.js installed and a running MySQL database server.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-mysql

LANGUAGE: markdown
CODE:
```
In order to successfully complete this guide, you need:
  * [Node.js](https://nodejs.org/en/) installed on your machine (see [system requirements](https://www.prisma.io/docs/orm/reference/system-requirements) for officially supported versions)
  * a [MySQL](https://www.mysql.com/) database server running
```

----------------------------------------

TITLE: Querying Databases (TypeScript)
DESCRIPTION: This guide demonstrates how to query databases using Prisma Client in a TypeScript project. It provides examples for CockroachDB, MySQL, PlanetScale, PostgreSQL, and SQL Server.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-postgresql

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main() {
  // Example: Find all users
  const users = await prisma.user.findMany()
  console.log(users)
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Prisma with SQLite
DESCRIPTION: Guidance on exploring Prisma quickly using a SQLite database. This is a common starting point for new users.

SOURCE: https://www.prisma.io/docs/getting-started

LANGUAGE: en
CODE:
```
Explore quickly with a SQLite database
```

----------------------------------------

TITLE: Prisma MongoDB Setup
DESCRIPTION: Instructions for setting up Prisma with a MongoDB database using TypeScript.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/baseline-your-database-node-postgresql

LANGUAGE: typescript
CODE:
```
npx prisma init --datasource-provider mongodb
npx prisma generate
```

----------------------------------------

TITLE: Install Prisma Client for Node.js with PlanetScale
DESCRIPTION: This snippet guides through the installation of Prisma Client for Node.js projects using PlanetScale. It covers the essential commands for setup and initialization.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/install-prisma-client-node-cockroachdb

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider mysql
npx prisma generate
```

----------------------------------------

TITLE: Prisma Client: Setup & Configuration
DESCRIPTION: Guides on setting up and configuring Prisma Client for your project. This includes installation and basic client instantiation.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/client-extensions/shared-extensions/permit-rbac

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init

# Then in your code:
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

```

----------------------------------------

TITLE: React Router 7 with Prisma ORM Setup
DESCRIPTION: This section outlines the initial setup for using Prisma ORM with React Router 7. It assumes you have Node.js 20+ installed. The guide references a GitHub repository for a deployment-ready example.

SOURCE: https://www.prisma.io/docs/guides/react-router-7

LANGUAGE: javascript
CODE:
```
// Example setup for Prisma ORM with React Router 7
// Refer to the official GitHub repository for a complete example:
// https://github.com/prisma/prisma-examples/blob/latest/orm/react-router-7
```

----------------------------------------

TITLE: Prisma Migrate Getting Started
DESCRIPTION: A step-by-step guide to setting up and using Prisma Migrate for managing database schema changes.

SOURCE: https://www.prisma.io/docs/orm/overview/beyond-prisma-orm

LANGUAGE: APIDOC
CODE:
```
Prisma Migrate Getting Started:
  Initializing Prisma Migrate (`prisma init`)
  Creating migration files (`prisma migrate dev`)
  Applying migrations to the database
  Handling migration conflicts
```

----------------------------------------

TITLE: TypeScript Project Setup
DESCRIPTION: This command initializes a new Node.js project with npm and installs TypeScript, tsx, and @types/node as development dependencies. It prepares your project for TypeScript development.

SOURCE: https://www.prisma.io/docs/getting-started/prisma-postgres/from-the-cli

LANGUAGE: bash
CODE:
```
npm init -y
npm install typescript tsx @types/node --save-dev
```

----------------------------------------

TITLE: Applying Optimize with Prisma Accelerate
DESCRIPTION: Demonstrates how to apply the Optimize extension followed by the Accelerate extension in Prisma Client.

SOURCE: https://www.prisma.io/docs/optimize/getting-started

LANGUAGE: javascript
CODE:
```
const prisma = new PrismaClient().$extends(withOptimize()).$extends(withAccelerate())
```

----------------------------------------

TITLE: Initialize Project and Install Prisma CLI
DESCRIPTION: This snippet covers the initial steps of creating a project directory, initializing a Node.js project, and installing the Prisma CLI as a development dependency.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-cockroachdb

LANGUAGE: bash
CODE:
```
mkdir hello-prisma
cd hello-prisma
npm init -y
npm install prisma --save-dev
```

----------------------------------------

TITLE: Prisma ORM: Start from Scratch with Relational Databases (Node.js)
DESCRIPTION: Guides for setting up Prisma ORM from scratch with various relational databases using Node.js. Covers connecting the database and initial setup.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/using-prisma-migrate-node-sqlserver

LANGUAGE: javascript
CODE:
```
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-postgresql
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-mysql
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-planetscale
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-sqlserver
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-cockroachdb
```

----------------------------------------

TITLE: Open Prisma Studio
DESCRIPTION: Launches Prisma Studio, a GUI tool for viewing and editing database data, allowing exploration of created records.

SOURCE: https://www.prisma.io/docs/getting-started/quickstart-prismaPostgres

LANGUAGE: bash
CODE:
```
npx prisma studio
```

----------------------------------------

TITLE: MongoDB Setup from Scratch (TypeScript)
DESCRIPTION: Guides on setting up Prisma with MongoDB from scratch using TypeScript. Covers connecting the database, creating the Prisma schema, installing Prisma Client, and querying the database.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/mongodb-typescript-mongodb

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider mongodb
```

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main() {
  const newUser = await prisma.user.create({
    data: {
      name: 'Alice',
      email: 'alice@example.com',
    },
  })
  console.log(newUser)
}

main()
  .catch((e) => {
    console.error(e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Prisma ORM Setup: Start from Scratch with Relational Databases (TypeScript)
DESCRIPTION: Guides for setting up Prisma ORM from scratch for relational databases using TypeScript. Covers initial setup and connecting to databases like PostgreSQL, MySQL, PlanetScale, SQL Server, and CockroachDB.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/using-prisma-migrate-typescript-postgresql

LANGUAGE: typescript
CODE:
```
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-postgresql
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-prismaPostgres
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-mysql
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-planetscale
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-sqlserver
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-cockroachdb
```

----------------------------------------

TITLE: Install Prisma Client for SQL Server (TypeScript)
DESCRIPTION: Instructions for installing Prisma Client for a TypeScript project targeting SQL Server. This involves setting up the Prisma schema and client.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-cockroachdb

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider sqlserver
```

----------------------------------------

TITLE: Prisma Optimize Getting Started
DESCRIPTION: Learn how to add Prisma Optimize to your application to gather insights and receive recommendations for improving query performance. This section provides a starting point for using the tool.

SOURCE: https://www.prisma.io/docs/getting-started

LANGUAGE: en
CODE:
```
Get started Add Optimize to your app to gather useful insights and receive recommendations to improve query performance.
```

----------------------------------------

TITLE: Install Prisma Client with TypeScript and PlanetScale
DESCRIPTION: This guide details the steps to install Prisma Client for a TypeScript project and connect it to a PlanetScale database. It assumes a starting point from scratch with relational databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-typescript-planetscale

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init
npx prisma db push
```

----------------------------------------

TITLE: Getting Started with Prisma
DESCRIPTION: Guides and instructions for developers to begin using Prisma ORM in their projects.

SOURCE: https://www.prisma.io/docs/orm/reference/preview-features/cli-preview-features

LANGUAGE: en
CODE:
```
Get Started: [https://www.prisma.io/docs/getting-started](https://www.prisma.io/docs/getting-started)
```

----------------------------------------

TITLE: Prisma Migrate: Getting Started
DESCRIPTION: Instructions for setting up and using Prisma Migrate to manage database schema changes. Covers creating initial migrations and applying them to the database.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/deployment/module-bundlers

LANGUAGE: bash
CODE:
```
# Create a new migration file
npx prisma migrate dev --name init

# Apply migrations to the database
npx prisma migrate deploy
```

----------------------------------------

TITLE: Prisma Resources Links
DESCRIPTION: Provides links to essential Prisma resources such as Docs, Ecosystem, Playground, Benchmarks, Customer stories, and Data guide.

SOURCE: https://www.prisma.io/docs/getting-started/quickstart-sqlite

LANGUAGE: APIDOC
CODE:
```
Prisma Resources:
  - Docs: https://www.prisma.io/docs
  - Ecosystem: https://www.prisma.io/ecosystem
  - Playground: https://playground.prisma.io/
  - ORM Benchmarks: https://benchmarks.prisma.io/
  - Customer stories: https://www.prisma.io/showcase
  - Data guide: https://www.prisma.io/dataguide
```

----------------------------------------

TITLE: Prisma Migrate Getting Started
DESCRIPTION: A step-by-step guide to begin using Prisma Migrate for managing database schema changes.

SOURCE: https://www.prisma.io/docs/orm/more/upgrade-guides/upgrade-from-prisma-1/upgrading-prisma-binding-to-sdl-first

LANGUAGE: APIDOC
CODE:
```
Prisma Migrate Getting Started:
  Initializing Prisma Migrate
  Creating initial migration files
  Applying migrations to the database
```

----------------------------------------

TITLE: Prisma ORM Setup and Configuration
DESCRIPTION: General guidance on setting up and configuring the Prisma ORM. This includes initializing Prisma, generating the client, and connecting to a database.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-node-mysql

LANGUAGE: APIDOC
CODE:
```
Prisma ORM Setup:

1. Install Prisma CLI:
   npm install prisma --save-dev

2. Initialize Prisma Project:
   npx prisma init --datasource-provider <your-database-provider>
   (e.g., mysql, postgresql, sqlite, sqlserver, mongodb, cockroachdb, mysql)

3. Configure Database Connection:
   Edit the .env file to set the DATABASE_URL.
   Example for MySQL:
   DATABASE_URL="mysql://user:password@host:port/database"

4. Generate Prisma Client:
   npx prisma generate

5. Use Prisma Client in your application:
   import { PrismaClient } from '@prisma/client'
   const prisma = new PrismaClient()

   async function main() {
     // ... your database operations
   }
   main()
     .catch((e) => {
       throw e
     })
     .finally(async () => {
       await prisma.$disconnect()
     })
```

----------------------------------------

TITLE: Prisma ORM Setup from Scratch
DESCRIPTION: This guide explains how to set up Prisma ORM from scratch for a new project. It covers initialization, schema definition, and client generation.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/mongodb/connect-your-database-typescript-mongodb

LANGUAGE: bash
CODE:
```
# Initialize Prisma in your project
npx prisma init

# Create or update your schema.prisma file with your database connection and models
# Example schema.prisma:
# datasource db {
#   provider = "postgresql"
#   url      = env("DATABASE_URL")
# }
#
# generator client {
#   provider = "prisma-client-js"
# }
#
# model User {
#   id    Int     @id @default(autoincrement())
#   email String  @unique
#   name  String?
# }

# Generate the Prisma Client
npx prisma generate
# or
yarn prisma generate
```

----------------------------------------

TITLE: Prisma Migrate Getting Started
DESCRIPTION: A guide to setting up and using Prisma Migrate for managing database schema changes.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/queries/crud

LANGUAGE: APIDOC
CODE:
```
1. Initialize Prisma Migrate:
   npx prisma init --datasource-provider postgresql
   This creates a "prisma/migrations" directory and a "schema.prisma" file.

2. Define your data model in schema.prisma:
   (See Prisma Schema Data Model documentation)

3. Create your first migration:
   npx prisma migrate dev --name init
   This generates SQL migration files and applies them to your database.

4. Apply migrations in production:
   npx prisma migrate deploy
   This applies all pending migrations to the production database.

5. View migration history:
   npx prisma migrate status

```

----------------------------------------

TITLE: Querying Databases with Prisma (Node.js)
DESCRIPTION: Examples of querying data from various relational databases using Prisma with Node.js.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/baseline-your-database-node-postgresql

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main() {
  const users = await prisma.user.findMany()
  console.log(users)
}
```

----------------------------------------

TITLE: Create and Navigate Project Directory
DESCRIPTION: Creates a new directory for the project and navigates into it. This is the initial step for any new project setup.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-planetscale

LANGUAGE: bash
CODE:
```
mkdir hello-prisma
cd hello-prisma
```

----------------------------------------

TITLE: Prisma ORM Setup - Relational Databases (TypeScript)
DESCRIPTION: Guides for setting up Prisma ORM with various relational databases using TypeScript. Covers starting from scratch and connecting to databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/using-prisma-migrate-typescript-cockroachdb

LANGUAGE: typescript
CODE:
```
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-postgresql
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-prismaPostgres
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-mysql
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-planetscale
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-sqlserver
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-cockroachdb
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-typescript-cockroachdb
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-typescript-mysql
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-typescript-planetscale
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-typescript-postgresql
```

----------------------------------------

TITLE: Set up Prisma ORM from Scratch
DESCRIPTION: Learn basic workflows like data modeling, querying, and migrations by setting up Prisma ORM from scratch with your preferred database.

SOURCE: https://www.prisma.io/docs/getting-started

LANGUAGE: typescript
CODE:
```
// Example for PostgreSQL
// prisma init --datasource-provider postgresql
// npx prisma db push
```

LANGUAGE: typescript
CODE:
```
// Example for MySQL
// prisma init --datasource-provider mysql
// npx prisma db push
```

LANGUAGE: typescript
CODE:
```
// Example for SQL Server
// prisma init --datasource-provider sqlserver
// npx prisma db push
```

LANGUAGE: typescript
CODE:
```
// Example for PlanetScale
// prisma init --datasource-provider mysql
// npx prisma db push
```

LANGUAGE: typescript
CODE:
```
// Example for CockroachDB
// prisma init --datasource-provider cockroachdb
// npx prisma db push
```

LANGUAGE: typescript
CODE:
```
// Example for MongoDB
// prisma init --datasource-provider mongodb
// npx prisma db push
```

----------------------------------------

TITLE: Koyeb Start Script Example
DESCRIPTION: This example shows a typical `start` script in a `package.json` file for a Node.js application deployed on Koyeb. It specifies the command to run the application, which is `node src/index.js` in this case.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/deployment/traditional/deploy-to-koyeb

LANGUAGE: bash
CODE:
```
"start": "node src/index.js"
```

----------------------------------------

TITLE: Prisma ORM Setup: Start from Scratch with Relational Databases (Node.js)
DESCRIPTION: Guides for setting up Prisma ORM from scratch for relational databases using Node.js. Covers initial setup and connecting to databases like PostgreSQL, MySQL, PlanetScale, SQL Server, and CockroachDB.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/using-prisma-migrate-typescript-postgresql

LANGUAGE: node
CODE:
```
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-postgresql
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-mysql
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-planetscale
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-sqlserver
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-cockroachdb
```

----------------------------------------

TITLE: Prisma MongoDB Setup (TypeScript)
DESCRIPTION: Instructions for setting up Prisma with MongoDB for a TypeScript project. This includes initialization and basic client usage.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-cockroachdb

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider mongodb
```

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main() {
  const users = await prisma.user.findMany()
  console.log(users)
}
```

----------------------------------------

TITLE: Extend Prisma Client with Optimize
DESCRIPTION: Extends an existing Prisma Client instance with the Optimize extension. This involves importing the necessary modules and passing the API key during the extension setup.

SOURCE: https://www.prisma.io/docs/optimize/getting-started

LANGUAGE: javascript
CODE:
```
import { PrismaClient } from "@prisma/client";
import { withOptimize } from "@prisma/extension-optimize";

const prisma = new PrismaClient().$extends(
  withOptimize({ apiKey: process.env.OPTIMIZE_API_KEY }),
);
```

----------------------------------------

TITLE: Install Prisma Client for PlanetScale (TypeScript)
DESCRIPTION: This guide details the steps to install Prisma Client for a TypeScript application when using PlanetScale as the relational database. It covers the initial setup and connection process.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-node-planetscale

LANGUAGE: typescript
CODE:
```
npx prisma init --datasource-provider planetscale
npx prisma db push
```

----------------------------------------

TITLE: Install Prisma Client for SQL Server (Node.js)
DESCRIPTION: This snippet demonstrates how to install Prisma Client for Node.js when working with a SQL Server database. It's part of the 'Start from scratch' guide for relational databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-node-sqlserver

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider sqlserver
```

----------------------------------------

TITLE: Install Prisma Client for PlanetScale (Node.js)
DESCRIPTION: This guide details the steps to install Prisma Client for a Node.js application when using PlanetScale as the relational database. It covers the initial setup and connection process.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-node-planetscale

LANGUAGE: javascript
CODE:
```
npx prisma init --datasource-provider planetscale
npx prisma db push
```

----------------------------------------

TITLE: Prisma MongoDB Setup (TypeScript)
DESCRIPTION: A guide for setting up Prisma with MongoDB for a TypeScript project, aiming for a quick 15-minute setup.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/install-prisma-client-typescript-planetscale

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider mongodb
```

----------------------------------------

TITLE: Prisma MongoDB Setup
DESCRIPTION: Guide for setting up Prisma with MongoDB, including initial project configuration and basic usage patterns for MongoDB databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-node-planetscale

LANGUAGE: bash
CODE:
```
npx create-prisma-app@latest my-mongo-app --template mongodb
cd my-mongo-app
npm install
npx prisma db push
```

----------------------------------------

TITLE: Prisma MongoDB Setup (TypeScript)
DESCRIPTION: A guide for setting up Prisma with MongoDB for a TypeScript project, aiming for a quick 15-minute setup.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/baseline-your-database-typescript-sqlserver

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider mongodb
```

----------------------------------------

TITLE: Minimal Frontend Setup for Prisma Studio
DESCRIPTION: Demonstrates the basic implementation for embedding Prisma Studio in a frontend application. This setup is suitable for getting started quickly.

SOURCE: https://www.prisma.io/docs/postgres/database/prisma-studio/embedding-studio

LANGUAGE: javascript
CODE:
```
import { PrismaClient } from '@prisma/client';
import { PrismaStudio } from '@prisma/studio-backend';

const prisma = new PrismaClient();
const studio = new PrismaStudio();

studio.start().catch(console.error);

```

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client';
import { PrismaStudio } from '@prisma/studio-backend';

const prisma = new PrismaClient();
const studio = new PrismaStudio();

async function main() {
  await studio.start();
}

main().catch(console.error);

```

----------------------------------------

TITLE: Install Prisma CLI
DESCRIPTION: Installs the Prisma CLI as a development dependency in the project. The Prisma CLI is used for database migrations, schema management, and generating the Prisma Client.

SOURCE: https://www.prisma.io/docs/getting-started/quickstart-sqlite

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev  
```

----------------------------------------

TITLE: Prisma Migrate Getting Started
DESCRIPTION: Provides instructions on how to use Prisma Migrate to manage database schema changes over time. Covers creating migrations, applying them, and resetting the database.

SOURCE: https://www.prisma.io/docs/orm/reference/preview-features/client-preview-features

LANGUAGE: bash
CODE:
```
npx prisma migrate dev --name init
npx prisma migrate deploy
npx prisma db push
npx prisma migrate reset
```

----------------------------------------

TITLE: Prisma Documentation Navigation
DESCRIPTION: Navigation links for the Prisma documentation, including Get Started, specific database guides (Postgres), ORM, and general Guides.

SOURCE: https://www.prisma.io/docs/tags/database

LANGUAGE: APIDOC
CODE:
```
Get Started: https://www.prisma.io/docs/getting-started
Postgres: https://www.prisma.io/docs/postgres
ORM: https://www.prisma.io/docs/orm
Guides: https://www.prisma.io/docs/guides
```

----------------------------------------

TITLE: Prisma Accelerate Starters
DESCRIPTION: Examples of projects using Prisma Accelerate, a connection pooler and global database cache. These starters demonstrate how to integrate Accelerate for faster database queries with various JavaScript frameworks.

SOURCE: https://www.prisma.io/docs/getting-started/quickstart-sqlite

LANGUAGE: javascript
CODE:
```
nextjs-starter: A Next.js project using Prisma Accelerate's caching and connection pooling
```

LANGUAGE: javascript
CODE:
```
svelte-starter: A SvelteKit project using Prisma Accelerate's caching and connection pooling
```

LANGUAGE: javascript
CODE:
```
solidstart-starter: A Solidstart project using Prisma Accelerate's caching and connection pooling
```

LANGUAGE: javascript
CODE:
```
remix-starter: A Remix project using Prisma Accelerate's caching and connection pooling
```

LANGUAGE: javascript
CODE:
```
nuxt-starter: A Nuxt.js project using Prisma Accelerate's caching and connection pooling
```

LANGUAGE: javascript
CODE:
```
astro-starter: An Astro project using Prisma Accelerate's caching and connection pooling
```

----------------------------------------

TITLE: Prisma Migrate Getting Started
DESCRIPTION: A guide to setting up and using Prisma Migrate for managing database schema changes.

SOURCE: https://www.prisma.io/docs/orm/more/ai-tools/windsurf

LANGUAGE: APIDOC
CODE:
```
Getting Started with Prisma Migrate:
  1. Define your data model in `schema.prisma`.
  2. Run `prisma migrate dev --name init` to create the initial migration.
  3. Prisma CLI generates SQL migration files in the `prisma/migrations` directory.
  4. Subsequent schema changes require `prisma migrate dev --name <your-migration-name>`.
```

----------------------------------------

TITLE: Prisma ORM: Start from Scratch with Relational Databases (TypeScript)
DESCRIPTION: Guides for setting up Prisma ORM from scratch with various relational databases using TypeScript. Covers connecting the database and initial setup.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/using-prisma-migrate-node-sqlserver

LANGUAGE: typescript
CODE:
```
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-postgresql
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-prismaPostgres
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-mysql
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-planetscale
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-sqlserver
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-cockroachdb
```

----------------------------------------

TITLE: Prisma Studio Usage Example
DESCRIPTION: Illustrates how to launch Prisma Studio to visually explore and manipulate your database.

SOURCE: https://www.prisma.io/docs/orm/more/upgrade-guides/upgrading-to-use-preview-features

LANGUAGE: bash
CODE:
```
npx prisma studio
```

----------------------------------------

TITLE: Getting Started with Prisma Optimize
DESCRIPTION: Instructions on how to start analyzing Prisma queries in your application within 5 minutes.

SOURCE: https://www.prisma.io/docs/optimize

LANGUAGE: en
CODE:
```
Get started Start analyzing the prisma queries in your app in 5 minutes.
```

----------------------------------------

TITLE: Next.js Fullstack App with Prisma Postgres
DESCRIPTION: Guide on building a full-stack application using Next.js and Prisma with a PostgreSQL database. Includes setup and integration details.

SOURCE: https://www.prisma.io/docs/getting-started/quickstart-prismaPostgres

LANGUAGE: Next.js
CODE:
```
See https://www.prisma.io/docs/guides/nextjs for detailed guide.
See https://github.com/prisma/nextjs-prisma-postgres-demo for example application.
```

----------------------------------------

TITLE: Querying Databases with Prisma (TypeScript)
DESCRIPTION: Examples of querying data from various relational databases using Prisma with TypeScript.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/baseline-your-database-node-postgresql

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main() {
  const posts = await prisma.post.findMany({
    where: {
      published: true,
    },
  })
  console.log(posts)
}
```

----------------------------------------

TITLE: Initialize Prisma Postgres Instance
DESCRIPTION: This command initializes a new Prisma Postgres instance and sets up the necessary configuration files and environment variables for your project.

SOURCE: https://www.prisma.io/docs/getting-started/prisma-postgres/from-the-cli

LANGUAGE: bash
CODE:
```
npx prisma@latest init --db
```

----------------------------------------

TITLE: Create a new database with Prisma
DESCRIPTION: This command initializes a new database project using Prisma. It sets up the necessary configuration files and prompts for database connection details.

SOURCE: https://www.prisma.io/docs/postgres/introduction/getting-started

LANGUAGE: bash
CODE:
```
npx create-db
```

----------------------------------------

TITLE: Prisma Client Setup & Configuration
DESCRIPTION: Guides on setting up and configuring Prisma Client for your project. Covers installation, database connection, and basic client instantiation.

SOURCE: https://www.prisma.io/docs/orm/more/ai-tools

LANGUAGE: APIDOC
CODE:
```
Prisma Client Setup:
  - Installation: `npm install prisma --save-dev` and `npm install @prisma/client`.
  - Initialization: `npx prisma init` to create a `.env` file and `schema.prisma`.
  - Database Connection: Configure `DATABASE_URL` in the `.env` file.
  - Client Instantiation: `import { PrismaClient } from '@prisma/client'` and `const prisma = new PrismaClient()`.
```

----------------------------------------

TITLE: Prisma CLI Commands for Setup
DESCRIPTION: This snippet demonstrates common Prisma CLI commands used during the setup process for new projects or integration into existing ones. It covers initialization and potentially other setup-related tasks.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma

LANGUAGE: bash
CODE:
```
npx prisma init
npx prisma migrate dev --name init
```

----------------------------------------

TITLE: Install Prisma Client
DESCRIPTION: Installs the @prisma/client package using npm. This is the first step to start using Prisma Client in your project.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-typescript-sqlserver

LANGUAGE: bash
CODE:
```
npm install @prisma/client
```

----------------------------------------

TITLE: Prisma Quickstart - SQLite
DESCRIPTION: A quickstart guide for setting up Prisma with an SQLite database, suitable for development and simple applications.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-node-planetscale

LANGUAGE: typescript
CODE:
```
https://www.prisma.io/docs/getting-started/quickstart-sqlite
```

----------------------------------------

TITLE: Prisma ORM Setup and Basic Usage
DESCRIPTION: This section covers the initial setup of Prisma ORM and provides a basic example of how to interact with your database. It includes schema definition and client instantiation.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-node-sqlserver

LANGUAGE: typescript
CODE:
```
/* prisma/schema.prisma */
model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
}

/* main.ts */
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main() {
  const newUser = await prisma.user.create({
    data: {
      email: 'test@example.com',
      name: 'Test User',
    },
  })
  console.log('Created new user:', newUser)
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Prisma Migrate Getting Started
DESCRIPTION: An introduction to Prisma Migrate, covering its core concepts and the initial steps to set up database migrations for your project.

SOURCE: https://www.prisma.io/docs/orm/more/ai-tools

LANGUAGE: APIDOC
CODE:
```
Prisma Migrate Getting Started:
  - Initialization: `npx prisma migrate dev --name init` to create the initial migration.
  - Workflow: Define your schema in `schema.prisma`, run `prisma migrate dev` to apply changes.
  - Migration Files: Migrations are stored in the `prisma/migrations` directory.
  - Rollback: `prisma migrate reset` to reset the database to the initial state.
```

----------------------------------------

TITLE: Applying Optimize with Prisma Middleware
DESCRIPTION: Illustrates the correct order for applying Prisma Middleware before the Optimize extension.

SOURCE: https://www.prisma.io/docs/optimize/getting-started

LANGUAGE: javascript
CODE:
```
const prisma = new PrismaClient().$use(middleware).$extends(withOptimize())
```

----------------------------------------

TITLE: Prisma Client Setup and Configuration
DESCRIPTION: Guides on how to set up and configure Prisma Client in your application, including installation and instantiation.

SOURCE: https://www.prisma.io/docs/orm/more/under-the-hood

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  // Example query
  const users = await prisma.user.findMany()
  console.log(users)
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Prisma Setup for MongoDB
DESCRIPTION: Guides for setting up Prisma with MongoDB, focusing on a quick 15-minute setup for TypeScript projects.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/using-prisma-migrate-typescript-planetscale

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()
```

----------------------------------------

TITLE: Prisma CLI Initialization Examples
DESCRIPTION: Demonstrates various ways to use the `prisma init` command, including basic initialization, specifying a datasource provider, creating a Prisma Postgres instance, scaffolding a schema from a prompt, and enabling preview features.

SOURCE: https://www.prisma.io/docs/orm/reference/prisma-cli-reference

LANGUAGE: bash
CODE:
```
prisma init
```

LANGUAGE: bash
CODE:
```
prisma init --datasource-provider sqlite
```

LANGUAGE: bash
CODE:
```
prisma init --db
```

LANGUAGE: bash
CODE:
```
prisma init --prompt "Simple habit tracker application"
```

LANGUAGE: bash
CODE:
```
prisma init --preview-feature metrics
```

LANGUAGE: bash
CODE:
```
prisma init --preview-feature view --preview-feature metrics
```

----------------------------------------

TITLE: Install Prisma Client (TypeScript/SQL Server)
DESCRIPTION: This guide explains how to install Prisma Client for a TypeScript project with a SQL Server database. It covers the necessary setup steps to integrate Prisma with your existing project.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-typescript-mysql

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider sqlserver
```

----------------------------------------

TITLE: Prisma Migrate Getting Started
DESCRIPTION: Provides instructions on how to initialize and use Prisma Migrate for managing database schema changes. Covers creating migration files and applying them to the database.

SOURCE: https://www.prisma.io/docs/orm/reference/preview-features

LANGUAGE: bash
CODE:
```
# Initialize Prisma Migrate
npx prisma migrate dev --name init

# Create a new migration
npx prisma migrate dev --name add_new_field

# Apply pending migrations
npx prisma migrate deploy
```

----------------------------------------

TITLE: Prisma ORM Setup (TypeScript)
DESCRIPTION: Guides for setting up Prisma ORM in a TypeScript project, including starting from scratch or adding to an existing project with various relational databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/baseline-your-database-typescript-mysql

LANGUAGE: typescript
CODE:
```
// Example of generating Prisma Client
npx prisma generate
```

----------------------------------------

TITLE: Prisma Client Setup & Configuration
DESCRIPTION: Guides on setting up and configuring Prisma Client for your project, including installation and connection management.

SOURCE: https://www.prisma.io/docs/orm/more/releases

LANGUAGE: APIDOC
CODE:
```
Prisma Client Setup & Configuration:
  Installing Prisma Client via npm or yarn
  Initializing Prisma Client in your application
  Configuring the database connection string
  Managing client instances and lifecycle
```

----------------------------------------

TITLE: Install Prisma Client for SQL Server (TypeScript)
DESCRIPTION: This snippet shows the installation process for Prisma Client with TypeScript when using a SQL Server database. It's a step in the 'Start from scratch' guide for relational databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-node-sqlserver

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider sqlserver
```

----------------------------------------

TITLE: Prisma ORM Setup - Relational Databases (Node.js)
DESCRIPTION: Guides for setting up Prisma ORM with various relational databases using Node.js. Covers starting from scratch and connecting to databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/using-prisma-migrate-typescript-cockroachdb

LANGUAGE: javascript
CODE:
```
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-postgresql
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-mysql
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-planetscale
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-sqlserver
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-cockroachdb
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-node-cockroachdb
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-node-mysql
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-node-planetscale
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-node-postgresql
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-node-sqlserver
```

----------------------------------------

TITLE: Prisma MongoDB Setup (TypeScript)
DESCRIPTION: A guide for setting up Prisma with MongoDB for a TypeScript project, aiming for a quick 15-minute setup.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-typescript-sqlserver

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider mongodb
```

----------------------------------------

TITLE: Prisma Client Setup and Configuration
DESCRIPTION: Guides on setting up and configuring Prisma Client for your project, including installation and connection string management.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/testing

LANGUAGE: APIDOC
CODE:
```
Prisma Client Setup & Configuration:

Installation:
  npm install prisma --save-dev
  npm install @prisma/client

Connection URLs:
  Define your database connection URL in a .env file.
  Example for PostgreSQL:
    DATABASE_URL="postgresql://user:password@host:port/database?schema=public"

Configuration:
  Instantiate Prisma Client in your application code.
  Example (JavaScript):
    import { PrismaClient } from '@prisma/client'
    const prisma = new PrismaClient()

  Example (TypeScript):
    import { PrismaClient } from '@prisma/client'
    const prisma = new PrismaClient()
```

----------------------------------------

TITLE: Prisma Client Setup and Configuration
DESCRIPTION: Guide to setting up and configuring Prisma Client in your project, including installation and connection string management.

SOURCE: https://www.prisma.io/docs/orm/overview/prisma-in-your-stack/fullstack

LANGUAGE: javascript
CODE:
```
npm install prisma --save-dev
npm install @prisma/client

// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// .env file
DATABASE_URL="postgresql://user:password@host:port/database"

// src/index.ts
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  // ... your application logic using prisma client
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Prisma ORM Setup for Relational Databases (TypeScript)
DESCRIPTION: Guides on setting up Prisma ORM with TypeScript for various relational databases. Covers connecting the database and starting from scratch.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/using-prisma-migrate-typescript-mysql

LANGUAGE: typescript
CODE:
```
// Example for PostgreSQL
// prisma/schema.prisma

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// generator client {
//   provider = "prisma-client-js"
// }
```

LANGUAGE: typescript
CODE:
```
// Example for MySQL
// prisma/schema.prisma

// datasource db {
//   provider = "mysql"
//   url      = env("DATABASE_URL")
// }
```

LANGUAGE: typescript
CODE:
```
// Example for connecting to a database (Node.js)
// import { PrismaClient } from '@prisma/client'
// const prisma = new PrismaClient()

// async function main() {
//   // ... your database queries
// }
```

----------------------------------------

TITLE: Install Prisma Client (TypeScript/SQL Server)
DESCRIPTION: This guide explains how to install Prisma Client for a TypeScript project with a SQL Server database. It covers the necessary setup steps to integrate Prisma with your existing project.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-typescript-cockroachdb

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider sqlserver
```

----------------------------------------

TITLE: Prisma Client Setup and Configuration
DESCRIPTION: Guide on setting up and configuring Prisma Client in your project, including installation and basic initialization.

SOURCE: https://www.prisma.io/docs/orm/prisma-schema/overview/location

LANGUAGE: bash
CODE:
```
# Install Prisma Client
npm install prisma --save-dev
npm install @prisma/client
```

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  // Your database operations here
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Install Prisma Client (TypeScript/SQL Server)
DESCRIPTION: This guide explains how to install Prisma Client for a TypeScript project with a SQL Server database. It covers the necessary setup steps to integrate Prisma with your existing project.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/baseline-your-database-typescript-sqlserver

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider sqlserver
```

----------------------------------------

TITLE: Prisma ORM Setup from Scratch
DESCRIPTION: Guidance on setting up Prisma ORM for a new project from scratch. This involves initializing Prisma and configuring the database connection.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/mongodb-node-mongodb

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init
```

----------------------------------------

TITLE: Get Started with Prisma ORM (Node.js)
DESCRIPTION: This guide covers setting up a new project from scratch using Prisma ORM with Node.js and relational databases. It details the steps for connecting to databases like PostgreSQL, MySQL, SQL Server, CockroachDB, and PlanetScale.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-sqlserver

LANGUAGE: javascript
CODE:
```
npx prisma init --datasource-provider postgresql

// Example schema.prisma
// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// generator client {
//   provider = "prisma-client-js"
// }
```

----------------------------------------

TITLE: Install Prisma Client
DESCRIPTION: Guides on installing Prisma Client for various relational databases and TypeScript.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-typescript-postgresql

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init
npx prisma generate
```

----------------------------------------

TITLE: Install Prisma Client (TypeScript/SQL Server)
DESCRIPTION: This guide explains how to install Prisma Client for a TypeScript project with a SQL Server database. It covers the necessary setup steps to integrate Prisma with your existing project.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-typescript-planetscale

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider sqlserver
```

----------------------------------------

TITLE: Example PostgreSQL Connection URL (Heroku)
DESCRIPTION: This snippet provides an example of a PostgreSQL connection URL for a database hosted on Heroku. It shows a typical structure with credentials and a specific schema.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-postgresql

LANGUAGE: postgresql
CODE:
```
DATABASE_URL="postgresql://opnmyfngbknppm:XXX@ec2-46-137-91-216.eu-west-1.compute.amazonaws.com:5432/d50rgmkqi2ipus?schema=hello-prisma"
```

----------------------------------------

TITLE: Install Prisma Client (TypeScript/SQL Server)
DESCRIPTION: This guide explains how to install Prisma Client for a TypeScript project with a SQL Server database. It covers the necessary setup steps to integrate Prisma with your existing project.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/evolve-your-schema-node-mysql

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider sqlserver
```

----------------------------------------

TITLE: Install Prisma Client (TypeScript/SQL Server)
DESCRIPTION: This guide explains how to install Prisma Client for a TypeScript project with a SQL Server database. It covers the necessary setup steps to integrate Prisma with your existing project.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-node-mysql

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider sqlserver
```

----------------------------------------

TITLE: Install Prisma Client (TypeScript/SQL Server)
DESCRIPTION: This guide explains how to install Prisma Client for a TypeScript project with a SQL Server database. It covers the necessary setup steps to integrate Prisma with your existing project.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/install-prisma-client-node-planetscale

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider sqlserver
```

----------------------------------------

TITLE: Prisma Quickstart Navigation
DESCRIPTION: Links to navigate through the Prisma quickstart documentation, including previous and next steps.

SOURCE: https://www.prisma.io/docs/getting-started/quickstart-sqlite

LANGUAGE: APIDOC
CODE:
```
Navigation:
  - Previous: https://www.prisma.io/docs/getting-started/quickstart-prismaPostgres
  - Next: https://www.prisma.io/docs/getting-started/setup-prisma
```

----------------------------------------

TITLE: Install Prisma Client (TypeScript/SQL Server)
DESCRIPTION: This guide explains how to install Prisma Client for a TypeScript project with a SQL Server database. It covers the necessary setup steps to integrate Prisma with your existing project.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-node-cockroachdb

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider sqlserver
```

----------------------------------------

TITLE: Initialize Prisma Project with Postgres
DESCRIPTION: Bootsraps a new Prisma ORM project with a Prisma Postgres database. This command initializes the project and prompts for database connection details.

SOURCE: https://www.prisma.io/docs/postgres/introduction/getting-started

LANGUAGE: bash
CODE:
```
npx prisma init --db
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup
DESCRIPTION: Guides for setting up Prisma with PostgreSQL, including connecting from the CLI, upgrading from early access versions, and importing data from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/install-prisma-client-node-planetscale

LANGUAGE: bash
CODE:
```
npx prisma db push
```

----------------------------------------

TITLE: Prisma SolidStart Integration Guide
DESCRIPTION: This guide details the steps for integrating Prisma with a SolidStart project. It covers project setup, Prisma installation and configuration, defining the Prisma schema, seeding the database, creating API routes, fetching data in components, and handling loading/error states.

SOURCE: https://www.prisma.io/docs/guides/solid-start

LANGUAGE: APIDOC
CODE:
```
Prisma SolidStart Integration:

1. Set up your project
2. Install and Configure Prisma
   - Install dependencies
   - Define your Prisma Schema
   - Configure the Prisma Client generator
   - Seed the database
3. Integrate Prisma into SolidStart
   - Create a Prisma Client
   - Create an API Route
   - Fetch Data in Your Component
   - Display the Data
   - Add Loading and Error States
4. Next Steps
5. More Info
```

----------------------------------------

TITLE: Install Prisma Client (TypeScript/SQL Server)
DESCRIPTION: This guide explains how to install Prisma Client for a TypeScript project with a SQL Server database. It covers the necessary setup steps to integrate Prisma with your existing project.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-node-cockroachdb

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider sqlserver
```

----------------------------------------

TITLE: Prisma Migrate Guide
DESCRIPTION: Explains how to get started with Prisma Migrate, understand its workflows, and manage database schema migrations.

SOURCE: https://www.prisma.io/docs/orm/more/ai-tools/tabnine

LANGUAGE: en
CODE:
```
Prisma Migrate:
  Getting started
  Understanding Prisma Migrate
  Workflows
```

----------------------------------------

TITLE: Prisma Client Setup & Configuration
DESCRIPTION: Guides users through setting up and configuring Prisma Client in their projects, including installation and database connection.

SOURCE: https://www.prisma.io/docs/orm/overview/beyond-prisma-orm

LANGUAGE: APIDOC
CODE:
```
Prisma Client Setup & Configuration:
  Installation steps using npm or yarn
  Generating the Prisma Client (`prisma generate`)
  Configuring the database connection URL
  Integrating Prisma Client into your application (e.g., Node.js, TypeScript)
```

----------------------------------------

TITLE: Install Prisma Client (TypeScript/SQL Server)
DESCRIPTION: This guide explains how to install Prisma Client for a TypeScript project with a SQL Server database. It covers the necessary setup steps to integrate Prisma with your existing project.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/evolve-your-schema-node-cockroachdb

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider sqlserver
```

----------------------------------------

TITLE: MongoDB Setup from Scratch (Node.js)
DESCRIPTION: Guides on setting up Prisma with MongoDB from scratch using Node.js. Covers connecting the database, creating the Prisma schema, installing Prisma Client, and querying the database.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/mongodb-typescript-mongodb

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider mongodb
```

LANGUAGE: javascript
CODE:
```
const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

async function main() {
  const newUser = await prisma.user.create({
    data: {
      name: 'Alice',
      email: 'alice@example.com',
    },
  })
  console.log(newUser)
}

main()
  .catch((e) => {
    console.error(e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Install Prisma Client (TypeScript/SQL Server)
DESCRIPTION: This guide explains how to install Prisma Client for a TypeScript project with a SQL Server database. It covers the necessary setup steps to integrate Prisma with your existing project.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-typescript-mysql

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider sqlserver
```

----------------------------------------

TITLE: Prisma Client - Setup & Configuration
DESCRIPTION: Guides on setting up Prisma Client in your project, including installation, environment variable configuration, and client instantiation.

SOURCE: https://www.prisma.io/docs/orm/more/comparisons/prisma-and-drizzle

LANGUAGE: APIDOC
CODE:
```
1. Install Prisma CLI and Prisma Client:
   `npm install prisma --save-dev`
   `npm install @prisma/client`
   or
   `yarn add prisma --dev`
   `yarn add @prisma/client`

2. Define your database connection URL in a `.env` file:
   `DATABASE_URL="postgresql://user:password@host:port/database?schema=public"

3. Create your Prisma Schema file (`schema.prisma`):
   Specify your datasource and define your models.
   Example:
   ```prisma
   datasource db {
     provider = "postgresql"
     url      = env("DATABASE_URL")
   }

   model User {
     id    String @id @default(cuid())
     email String @unique
     name  String?
   }
   ```

4. Generate the Prisma Client:
   `npx prisma generate`
   This command reads your `schema.prisma` file and generates the Prisma Client code.

5. Instantiate Prisma Client in your application:
   ```typescript
   import { PrismaClient } from '@prisma/client'
   const prisma = new PrismaClient()
   async function main() {
     // Use the prisma client to interact with your database
     const newUser = await prisma.user.create({
       data: {
         email: 'test@example.com',
         name: 'Test User',
       },
     })
     console.log(newUser)
   }
   main()
     .catch((e) => {
       console.error(e)
       process.exit(1)
     })
     .finally(async () => {
       await prisma.$disconnect()
     })
   ```
```

----------------------------------------

TITLE: Evolve Schema with Prisma (Node.js)
DESCRIPTION: Guides on evolving your database schema using Prisma with Node.js for different relational databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/baseline-your-database-node-postgresql

LANGUAGE: cli
CODE:
```
npx prisma migrate dev --name init
```

----------------------------------------

TITLE: Prisma MongoDB Setup (TypeScript)
DESCRIPTION: A guide for setting up Prisma with MongoDB for a TypeScript project, aiming for a quick 15-minute setup.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/install-prisma-client-node-planetscale

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider mongodb
```

----------------------------------------

TITLE: Install Prisma Client (TypeScript/SQL Server)
DESCRIPTION: This guide explains how to install Prisma Client for a TypeScript project with a SQL Server database. It covers the necessary setup steps to integrate Prisma with your existing project.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/evolve-your-schema-typescript-postgresql

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider sqlserver
```

----------------------------------------

TITLE: Install Prisma Client (TypeScript/SQL Server)
DESCRIPTION: This guide explains how to install Prisma Client for a TypeScript project with a SQL Server database. It covers the necessary setup steps to integrate Prisma with your existing project.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-typescript-sqlserver

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider sqlserver
```

----------------------------------------

TITLE: Create a new User record
DESCRIPTION: Example of creating a new user record in the database using Prisma Client. This demonstrates basic data insertion.

SOURCE: https://www.prisma.io/docs/getting-started/prisma-postgres/from-the-cli

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main() {
  const user = await prisma.user.create({
    data: {
      name: 'Alice',
      email: 'alice@example.com'
    }
  })
  console.log(user)
}
```

----------------------------------------

TITLE: Prisma with PostgreSQL Setup
DESCRIPTION: Guides for setting up Prisma with PostgreSQL, including CLI usage, upgrades, and importing data.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/using-prisma-migrate-node-cockroachdb

LANGUAGE: bash
CODE:
```
# From the CLI
# See: https://www.prisma.io/docs/getting-started/prisma-postgres/from-the-cli

# Upgrade from Early Access
# See: https://www.prisma.io/docs/getting-started/prisma-postgres/upgrade-from-early-access

# Import from existing database (PostgreSQL)
# See: https://www.prisma.io/docs/getting-started/prisma-postgres/import-from-existing-database-postgresql

# Import from existing database (MySQL)
# See: https://www.prisma.io/docs/getting-started/prisma-postgres/import-from-existing-database-mysql
```

----------------------------------------

TITLE: Install Prisma Client (TypeScript/SQL Server)
DESCRIPTION: This guide explains how to install Prisma Client for a TypeScript project with a SQL Server database. It covers the necessary setup steps to integrate Prisma with your existing project.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/install-prisma-client-typescript-planetscale

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider sqlserver
```

----------------------------------------

TITLE: Evolve Schema with Prisma (TypeScript)
DESCRIPTION: Guides on evolving your database schema using Prisma with TypeScript for different relational databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/baseline-your-database-node-postgresql

LANGUAGE: cli
CODE:
```
npx prisma migrate dev --name add_user_table
```

----------------------------------------

TITLE: MongoDB Setup and Querying (TypeScript)
DESCRIPTION: Guides for setting up Prisma with MongoDB using TypeScript, including connecting the database, creating the schema, installing Prisma Client, and performing database queries.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/mongodb-node-mongodb

LANGUAGE: typescript
CODE:
```
npx prisma init --datasource-provider mongodb

// schema.prisma
// datasource db {
//   url      = env("DATABASE_URL")
//   provider = "mongodb"
// }

// generator client {
//   provider = "prisma-client-js"
// }

// model User {
//   id    String @id @default(auto()) @map("_id") @db.ObjectId
//   email String @unique
//   name  String?
// }

npx prisma generate

// main.ts
// import { PrismaClient } from '@prisma/client'
// const prisma = new PrismaClient()

// async function main(): Promise<void> {
//   await prisma.user.create({
//     data: {
//       name: 'Alice',
//       email: 'alice@example.com',
//     },
//   })
//   const allUsers = await prisma.user.findMany()
//   console.log(allUsers)
// }

// main()
//   .catch((e) => {
//     throw e
//   })
//   .finally(async () => {
//     await prisma.$disconnect()
//   })
```

----------------------------------------

TITLE: Prisma Documentation Navigation
DESCRIPTION: Provides links to key sections of the Prisma documentation, including getting started, database guides, ORM features, and guides for various web frameworks.

SOURCE: https://www.prisma.io/docs/guides/tanstack-start

LANGUAGE: en
CODE:
```
Get Started: https://www.prisma.io/docs/getting-started
Postgres: https://www.prisma.io/docs/postgres
ORM: https://www.prisma.io/docs/orm
Guides: https://www.prisma.io/docs/guides
Studio: https://www.prisma.io/docs/postgres/database/prisma-studio
Optimize: https://www.prisma.io/docs/optimize
Accelerate: https://www.prisma.io/docs/accelerate

Web Frameworks:
Astro: https://www.prisma.io/docs/guides/astro
Next.js: https://www.prisma.io/docs/guides/nextjs
Nuxt: https://www.prisma.io/docs/guides/nuxt
React Router 7: https://www.prisma.io/docs/guides/react-router-7
SolidStart: https://www.prisma.io/docs/guides/solid-start
SvelteKit: https://www.prisma.io/docs/guides/sveltekit
TanStack Start: https://www.prisma.io/docs/guides/tanstack-start
```

----------------------------------------

TITLE: Install Prisma Client (TypeScript/SQL Server)
DESCRIPTION: This guide explains how to install Prisma Client for a TypeScript project with a SQL Server database. It covers the necessary setup steps to integrate Prisma with your existing project.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/introspection-typescript-planetscale

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider sqlserver
```

----------------------------------------

TITLE: Prisma CLI Commands
DESCRIPTION: Common Prisma CLI commands for project initialization, database migrations, and client generation.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-node-sqlserver

LANGUAGE: bash
CODE:
```
npx prisma init
npx prisma migrate dev --name init
npx prisma generate
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup
DESCRIPTION: Guides for setting up Prisma with PostgreSQL, including connecting from the CLI, upgrading from early access versions, and importing data from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/install-prisma-client-typescript-planetscale

LANGUAGE: bash
CODE:
```
npx prisma db push
```

----------------------------------------

TITLE: Prisma Client Setup & Configuration
DESCRIPTION: Guides on how to set up and configure Prisma Client in your application, including installation and basic usage.

SOURCE: https://www.prisma.io/docs/orm/overview/databases/sqlite

LANGUAGE: APIDOC
CODE:
```
Prisma Client Setup & Configuration:

// Installation:
// npm install prisma --save-dev
// npm install @prisma/client

// Basic Usage:
// 1. Ensure you have a schema.prisma file configured.
// 2. Generate the Prisma Client:
//    npx prisma generate
//
// 3. Import and instantiate the Prisma Client in your application:
//    import { PrismaClient } from '@prisma/client'
//    const prisma = new PrismaClient()
//
// 4. Use the prisma client to interact with your database:
//    async function main() {
//      const newUser = await prisma.user.create({
//        data: {
//          email: 'test@example.com',
//          name: 'Test User',
//        },
//      })
//      console.log(newUser)
//
//      const users = await prisma.user.findMany()
//      console.log(users)
//    }
//
//    main()
//      .catch((e) => {
//        console.error(e)
//        process.exit(1)
//      })
//      .finally(async () => {
//        await prisma.$disconnect()
//      })
//
// Configuration Options:
// You can pass options to the PrismaClient constructor, e.g.:
// const prisma = new PrismaClient({ log: ['query', 'info', 'warn', 'error'] })

```

----------------------------------------

TITLE: Prisma Migrate with TypeScript and MySQL
DESCRIPTION: Guides on setting up and using Prisma Migrate with TypeScript and MySQL. This includes initial project setup, defining schemas, and running migrations.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/using-prisma-migrate-typescript-mysql

LANGUAGE: typescript
CODE:
```
npx prisma migrate dev --name init
npx prisma generate
```

----------------------------------------

TITLE: Prisma Migrate Getting Started
DESCRIPTION: Provides instructions on how to set up and use Prisma Migrate to manage database schema changes over time.

SOURCE: https://www.prisma.io/docs/orm/prisma-schema/overview/generators

LANGUAGE: bash
CODE:
```
# Install Prisma CLI
npm install prisma --save-dev

# Initialize Prisma Migrate
prisma init

# Create a new migration
prisma migrate dev --name init

# Apply migrations
prisma migrate deploy
```

----------------------------------------

TITLE: Prisma MongoDB Setup and Querying
DESCRIPTION: Guides on setting up and querying MongoDB databases using Prisma with TypeScript. This includes initial project setup and common querying patterns.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-node-postgresql

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main() {
  // Example: Finding a user by email
  const user = await prisma.user.findUnique({
    where: {
      email: 'test@example.com',
    },
  })
  console.log(user)
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Prisma MongoDB Setup
DESCRIPTION: Instructions for setting up Prisma with MongoDB using TypeScript. This guide helps you connect Prisma to your MongoDB instance and start querying data.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-node-mysql

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main() {
  const posts = await prisma.post.findMany({
    include: {
      author: {
        select: {
          name: true
        }
      }
    }
  })
  console.log(posts)
}
```

----------------------------------------

TITLE: Prisma Client Setup and Configuration
DESCRIPTION: Guides on how to set up and configure Prisma Client in a project, including installation, database connection, and basic usage.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/type-safety/prisma-type-system

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  // Example: Create a new user
  const newUser = await prisma.user.create({
    data: {
      email: 'test@example.com',
      name: 'Test User',
    },
  })
  console.log('Created new user:', newUser)

  // Example: Find users
  const users = await prisma.user.findMany({
    where: {
      email: 'test@example.com',
    },
  })
  console.log('Found users:', users)
}

main()
  .catch((e) => {
    console.error(e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Get Example Code with Curl
DESCRIPTION: Downloads the Prisma Render deployment example code using curl and extracts it. This sets up the project locally for deployment.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/deployment/traditional/deploy-to-render

LANGUAGE: bash
CODE:
```
curl https://codeload.github.com/prisma/prisma-examples/tar.gz/latest | tar -xz --strip=2 prisma-examples-latest/deployment-platforms/render  
cd render  
```

----------------------------------------

TITLE: Prisma Client Setup & Configuration
DESCRIPTION: Guide to setting up and configuring Prisma Client in a Node.js project, including installation and basic instantiation.

SOURCE: https://www.prisma.io/docs/orm/overview

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npm install @prisma/client
```

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  // Example: Create a new user
  const newUser = await prisma.user.create({
    data: {
      email: 'test@example.com',
      name: 'Test User',
    },
  })
  console.log('Created new user:', newUser)

  // Example: Find all users
  const allUsers = await prisma.user.findMany()
  console.log('All users:', allUsers)
}

main()
  .catch((e) => {
    console.error(e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Create Temporary Postgres Database
DESCRIPTION: Spins up a temporary 24-hour PostgreSQL database for testing or quick experimentation with Prisma. This is useful for trying out Prisma Postgres without a persistent setup.

SOURCE: https://www.prisma.io/docs/postgres/introduction/getting-started

LANGUAGE: bash
CODE:
```
npx create-db@latest
```

----------------------------------------

TITLE: Prisma ORM Setup for Relational Databases (Node.js)
DESCRIPTION: Guides on setting up Prisma ORM with Node.js for various relational databases. Covers connecting the database and starting from scratch.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/using-prisma-migrate-typescript-mysql

LANGUAGE: node
CODE:
```
// Example for PostgreSQL
// prisma/schema.prisma

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// generator client {
//   provider = "prisma-client-js"
// }
```

LANGUAGE: node
CODE:
```
// Example for MySQL
// prisma/schema.prisma

// datasource db {
//   provider = "mysql"
//   url      = env("DATABASE_URL")
// }
```

LANGUAGE: node
CODE:
```
// Example for connecting to a database (Node.js)
// const { PrismaClient } = require('@prisma/client')
// const prisma = new PrismaClient()

// async function main() {
//   // ... your database queries
// }
```

----------------------------------------

TITLE: Prisma MongoDB Setup and Querying
DESCRIPTION: Guides on setting up and querying MongoDB databases using Prisma with TypeScript. This includes initial project setup and common querying patterns.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-typescript-postgresql

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main() {
  // Example: Finding a user by email
  const user = await prisma.user.findUnique({
    where: {
      email: 'test@example.com',
    },
  })
  console.log(user)
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup
DESCRIPTION: Guides for setting up Prisma with PostgreSQL, including connecting from the CLI, upgrading from early access versions, and importing data from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/baseline-your-database-typescript-sqlserver

LANGUAGE: bash
CODE:
```
npx prisma db push
```

----------------------------------------

TITLE: Prisma Migrate Getting Started
DESCRIPTION: Steps to set up and use Prisma Migrate for managing database schema changes, including creating initial migrations.

SOURCE: https://www.prisma.io/docs/orm/overview

LANGUAGE: bash
CODE:
```
# Initialize Prisma project (if not already done)
npx prisma init --datasource-provider postgresql

# Create the first migration
npx prisma migrate dev --name init_db

# After making schema changes, create a new migration
# (e.g., add a new model or field)
npx prisma migrate dev --name add_new_feature

# To reset the database to the latest migration state
npx prisma migrate reset

# To push schema changes directly to the database (for development only)
npx prisma db-push
```

----------------------------------------

TITLE: Prisma ORM Setup (Node.js)
DESCRIPTION: Guides for setting up Prisma ORM in a Node.js project, including starting from scratch or adding to an existing project with various relational databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/baseline-your-database-typescript-mysql

LANGUAGE: bash
CODE:
```
// Example of generating Prisma Client
npx prisma generate
```

----------------------------------------

TITLE: Prisma MongoDB Setup and Querying
DESCRIPTION: Guides on setting up and querying MongoDB databases using Prisma with TypeScript. This includes initial project setup and common querying patterns.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-typescript-mysql

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main() {
  // Example: Finding a user by email
  const user = await prisma.user.findUnique({
    where: {
      email: 'test@example.com',
    },
  })
  console.log(user)
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Prisma Client Setup and Configuration
DESCRIPTION: Guides on how to set up and configure Prisma Client in your project, including installation and connecting to your database.

SOURCE: https://www.prisma.io/docs/orm/overview/introduction/why-prisma

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npm install @prisma/client
```

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  // ... your database operations
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Initialize Project Directory and Navigate
DESCRIPTION: Creates a new project directory and changes the current directory to it. This is the first step in setting up a new project.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-mysql

LANGUAGE: bash
CODE:
```
mkdir hello-prisma
cd hello-prisma
```

----------------------------------------

TITLE: Prisma Migrate Getting Started
DESCRIPTION: Steps to initialize Prisma Migrate in your project and create your first migration.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/testing/integration-testing

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider postgresql
npx prisma migrate dev --name init
```

----------------------------------------

TITLE: Prisma MongoDB Setup (TypeScript)
DESCRIPTION: A guide for setting up Prisma with MongoDB for a TypeScript project, aiming for a quick 15-minute setup.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-typescript-planetscale

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider mongodb
```

----------------------------------------

TITLE: Example PostgreSQL Connection URL (Local macOS)
DESCRIPTION: This snippet shows an example of a PostgreSQL connection URL for a local PostgreSQL database on macOS. It assumes the user and password match the OS user.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-postgresql

LANGUAGE: postgresql
CODE:
```
DATABASE_URL="postgresql://janedoe:janedoe@localhost:5432/janedoe?schema=hello-prisma"
```

----------------------------------------

TITLE: Prisma IO Navigation Links
DESCRIPTION: Provides navigation links to key sections of the Prisma IO documentation, including Getting Started, specific database guides, ORM, and general guides.

SOURCE: https://www.prisma.io/docs/optimize/recordings

LANGUAGE: en
CODE:
```
[Get Started](https://www.prisma.io/docs/getting-started)
[Postgres](https://www.prisma.io/docs/postgres)
[ORM](https://www.prisma.io/docs/orm)
[Guides](https://www.prisma.io/docs/guides)
```

----------------------------------------

TITLE: Connect Database with Prisma
DESCRIPTION: Guides on connecting your database to Prisma. Covers setup for existing projects using TypeScript and SQL Server.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/install-prisma-client-node-sqlserver

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for database connection steps.');
// Example: prisma.schema configuration would be detailed here.
```

----------------------------------------

TITLE: Prisma IO Navigation and Features
DESCRIPTION: Provides links to key sections of the Prisma IO documentation, including getting started, database guides, ORM, and various web framework guides.

SOURCE: https://www.prisma.io/docs/guides/neon-accelerate

LANGUAGE: APIDOC
CODE:
```
Project: /websites/prisma_io

Navigation:
- Get Started: https://www.prisma.io/docs/getting-started
- Postgres: https://www.prisma.io/docs/postgres
- ORM: https://www.prisma.io/docs/orm
- Guides: https://www.prisma.io/docs/guides
- Studio: Explore and manipulate your data (https://www.prisma.io/docs/postgres/database/prisma-studio)
- Optimize: AI-driven query analysis (https://www.prisma.io/docs/optimize)
- Accelerate: Make your database global (https://www.prisma.io/docs/accelerate)

Web Framework Guides:
- Astro: https://www.prisma.io/docs/guides/astro
- Next.js: https://www.prisma.io/docs/guides/nextjs
- Nuxt: https://www.prisma.io/docs/guides/nuxt
- React Router 7: https://www.prisma.io/docs/guides/react-router-7
- SolidStart: https://www.prisma.io/docs/guides/solid-start
- SvelteKit: https://www.prisma.io/docs/guides/sveltekit
- TanStack Start: https://www.prisma.io/docs/guides/tanstack-start
```

----------------------------------------

TITLE: Prisma Migrate Getting Started
DESCRIPTION: Steps to initialize Prisma Migrate in your project and create your first migration. Covers generating migration files and applying them to the database.

SOURCE: https://www.prisma.io/docs/orm/overview/databases/cloudflare-d1

LANGUAGE: bash
CODE:
```
# Initialize Prisma Migrate
prisma migrate dev --name init

# Create a new migration
prisma migrate dev --name add_user_table

# Apply migrations (e.g., in production)
prisma migrate deploy
```

----------------------------------------

TITLE: Navigate and Run SolidStart Project
DESCRIPTION: Navigates into the project directory, installs dependencies, and starts the development server.

SOURCE: https://www.prisma.io/docs/guides/solid-start

LANGUAGE: bash
CODE:
```
cd my-solid-prisma-app
npm install
npm run dev
```

----------------------------------------

TITLE: Prisma Client Setup and Configuration
DESCRIPTION: Guides on setting up and configuring Prisma Client for your project. This includes installation, creating a Prisma Client instance, and basic configuration options.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/deployment/module-bundlers

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  // ... your prisma client queries
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Create and Navigate Project Directory
DESCRIPTION: Creates a new directory for the project and changes the current directory into it. This is the initial step for any new project setup.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-sqlserver

LANGUAGE: bash
CODE:
```
mkdir hello-prisma
cd hello-prisma
```

----------------------------------------

TITLE: Download Example and Install Dependencies
DESCRIPTION: This snippet demonstrates how to download the example project code for Heroku deployment and install the necessary Node.js dependencies using npm. It includes commands for creating a directory, navigating into it, downloading and extracting the project files, and installing packages.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/deployment/traditional/deploy-to-heroku

LANGUAGE: bash
CODE:
```
mkdir prisma-heroku
cd prisma-heroku
curl https://codeload.github.com/prisma/prisma-examples/tar.gz/latest | tar -xz --strip=3 prisma-examples-latest/deployment-platforms/heroku
npm install
```

----------------------------------------

TITLE: Prisma MongoDB Setup and Querying
DESCRIPTION: Guides on setting up and querying MongoDB databases using Prisma with TypeScript. This includes initial project setup and common querying patterns.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-node-mysql

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main() {
  // Example: Finding a user by email
  const user = await prisma.user.findUnique({
    where: {
      email: 'test@example.com',
    },
  })
  console.log(user)
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Prisma MongoDB Setup and Querying
DESCRIPTION: Guides on setting up and querying MongoDB databases using Prisma with TypeScript. This includes initial project setup and common querying patterns.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-node-sqlserver

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main() {
  // Example: Finding a user by email
  const user = await prisma.user.findUnique({
    where: {
      email: 'test@example.com',
    },
  })
  console.log(user)
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Install Prisma Client (TypeScript SQL Server)
DESCRIPTION: This guide details the process of installing Prisma Client for a TypeScript project connected to a SQL Server database. It covers the necessary setup steps to enable Prisma's ORM capabilities.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-node-planetscale

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init
npx prisma generate
```

----------------------------------------

TITLE: Prisma MongoDB Setup (TypeScript)
DESCRIPTION: A guide for setting up Prisma with MongoDB for a TypeScript project, aiming for a quick 15-minute setup.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-node-mysql

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider mongodb
```

----------------------------------------

TITLE: Prisma Client Setup and Configuration
DESCRIPTION: Guides on setting up and configuring Prisma Client for your Node.js or TypeScript project. Covers installation, client instantiation, and basic configuration options.

SOURCE: https://www.prisma.io/docs/orm/more/upgrade-guides/upgrade-from-prisma-1/how-to-upgrade

LANGUAGE: javascript
CODE:
```
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()
```

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()
```

----------------------------------------

TITLE: Create Project Directory and Navigate
DESCRIPTION: Initializes a new project directory and changes the current directory to it. This is the first step in setting up a new Prisma project.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-postgresql

LANGUAGE: bash
CODE:
```
mkdir hello-prisma
cd hello-prisma
```

----------------------------------------

TITLE: Relational Databases Setup (TypeScript)
DESCRIPTION: Guides for setting up relational databases with Prisma using TypeScript. Covers initial setup for various databases including Postgres, MySQL, PlanetScale, SQL Server, and CockroachDB.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/querying-the-database-typescript-planetscale

LANGUAGE: typescript
CODE:
```
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-postgresql
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-prismaPostgres
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-mysql
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-planetscale
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-sqlserver
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-cockroachdb
```

----------------------------------------

TITLE: Prisma Optimize Examples
DESCRIPTION: Links to ready-to-run examples demonstrating the usage of Prisma Optimize.

SOURCE: https://www.prisma.io/docs/optimize

LANGUAGE: en
CODE:
```
Examples Explore our ready-to-run examples using Optimize.
```

----------------------------------------

TITLE: MongoDB Setup and Querying (Node.js)
DESCRIPTION: Guides for setting up Prisma with MongoDB using Node.js, including connecting the database, creating the schema, installing Prisma Client, and performing database queries.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/mongodb-node-mongodb

LANGUAGE: javascript
CODE:
```
npx prisma init --datasource-provider mongodb

// schema.prisma
// datasource db {
//   url      = env("DATABASE_URL")
//   provider = "mongodb"
// }

// generator client {
//   provider = "prisma-client-js"
// }

// model User {
//   id    String @id @default(auto()) @map("_id") @db.ObjectId
//   email String @unique
//   name  String?
// }

npx prisma generate

// main.js
// import { PrismaClient } from '@prisma/client'
// const prisma = new PrismaClient()

// async function main() {
//   await prisma.user.create({
//     data: {
//       name: 'Alice',
//       email: 'alice@example.com',
//     },
//   })
//   const allUsers = await prisma.user.findMany()
//   console.log(allUsers)
// }
```

----------------------------------------

TITLE: Initialize TypeScript Project and Install Dependencies
DESCRIPTION: Initializes a new TypeScript project using npm and installs necessary development dependencies like TypeScript and tsx. This sets up the basic structure for a TypeScript application.

SOURCE: https://www.prisma.io/docs/getting-started/quickstart-sqlite

LANGUAGE: bash
CODE:
```
npm init -y  
npm install typescript tsx @types/node --save-dev  
```

----------------------------------------

TITLE: Prisma Client Setup and Configuration
DESCRIPTION: Guides users through the process of setting up and configuring Prisma Client in their application, including installation and connection string management.

SOURCE: https://www.prisma.io/docs/orm/overview/databases/planetscale

LANGUAGE: APIDOC
CODE:
```
Prisma Client Setup & Configuration:
  Overview: Steps to integrate Prisma Client into your project.
  Installation:
    - `npm install prisma --save-dev`
    - `npm install @prisma/client`
  Configuration:
    - Database connection URL via `DATABASE_URL` environment variable.
    - Specifying the database provider in `schema.prisma`.
  Example Configuration (schema.prisma):
    datasource db {
      provider = "postgresql"
      url      = env("DATABASE_URL")
    }

    generator client {
      provider = "prisma-client-js"
    }
  Related:
    - Queries
    - Type safety
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup
DESCRIPTION: Covers the initial setup for using Prisma with a PostgreSQL database. This includes CLI commands for initializing Prisma and generating the client.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-node-sqlserver

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider postgresql
npx prisma generate
```

----------------------------------------

TITLE: Prisma ORM Setup and Database Connection (TypeScript)
DESCRIPTION: Guides users through setting up Prisma ORM and connecting to various relational databases using TypeScript. Covers initial project setup, schema definition, and database connection configurations.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/using-prisma-migrate-typescript-sqlserver

LANGUAGE: typescript
CODE:
```
npx prisma init --datasource-provider postgresql

// schema.prisma
// datasource db {
//   url      = env("DATABASE_URL")
//   provider = "postgresql"
// }

// generator client {
//   provider = "prisma-client-js"
// }
```

LANGUAGE: typescript
CODE:
```
// Example: Connecting to PostgreSQL
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main() {
  const users = await prisma.user.findMany()
  console.log(users)
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Prisma MongoDB Setup and Querying
DESCRIPTION: Guides on setting up and querying MongoDB databases using Prisma with TypeScript. This includes initial project setup and common querying patterns.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-typescript-planetscale

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main() {
  // Example: Finding a user by email
  const user = await prisma.user.findUnique({
    where: {
      email: 'test@example.com',
    },
  })
  console.log(user)
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Prisma MongoDB Setup (TypeScript)
DESCRIPTION: A guide for setting up Prisma with MongoDB for a TypeScript project, aiming for a quick 15-minute setup.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-typescript-mysql

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider mongodb
```

----------------------------------------

TITLE: Import Data to MySQL with Prisma
DESCRIPTION: This guide details the process of importing data into a MySQL database using Prisma, focusing on scenarios with existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/evolve-your-schema-typescript-sqlserver

LANGUAGE: bash
CODE:
```
npx prisma db push
```

----------------------------------------

TITLE: Install Prisma Client (TypeScript SQL Server)
DESCRIPTION: This guide details the process of installing Prisma Client for a TypeScript project connected to a SQL Server database. It covers the necessary setup steps to enable Prisma's ORM capabilities.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-node-sqlserver

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init
npx prisma generate
```

----------------------------------------

TITLE: Prisma Postgres Setup and Migration
DESCRIPTION: Guides on setting up Prisma with PostgreSQL, including starting from scratch, adding to existing projects, and importing data from existing databases (PostgreSQL and MySQL).

SOURCE: https://www.prisma.io/docs/getting-started/prisma-postgres

LANGUAGE: en
CODE:
```
## Get Started
  * [Get Started](https://www.prisma.io/docs/getting-started)
  * [Quickstart5 min](https://www.prisma.io/docs/getting-started/quickstart-prismaPostgres)
  * [Quickstart5 min](https://www.prisma.io/docs/getting-started/quickstart-sqlite)
  * [Prisma ORM](https://www.prisma.io/docs/getting-started/setup-prisma)
    * [Start from scratch](https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch)
    * [Add to existing project](https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project)
  * [Prisma Postgres](https://www.prisma.io/docs/getting-started/prisma-postgres)
    * [From the CLI](https://www.prisma.io/docs/getting-started/prisma-postgres/from-the-cli)
    * [Upgrade from Early Access](https://www.prisma.io/docs/getting-started/prisma-postgres/upgrade-from-early-access)
    * [Import from existing database](https://www.prisma.io/docs/getting-started/prisma-postgres/import-from-existing-database-postgresql)
      * [Import from existing database](https://www.prisma.io/docs/getting-started/prisma-postgres/import-from-existing-database-postgresql)
      * [Import from existing database](https://www.prisma.io/docs/getting-started/prisma-postgres/import-from-existing-database-mysql)
```

----------------------------------------

TITLE: Prisma MongoDB Setup (TypeScript)
DESCRIPTION: A guide for setting up Prisma with MongoDB for a TypeScript project, aiming for a quick 15-minute setup.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/evolve-your-schema-node-mysql

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider mongodb
```

----------------------------------------

TITLE: Solidstart Starter with Prisma Accelerate
DESCRIPTION: This example showcases a Solidstart project configured with Prisma Accelerate, highlighting caching and connection pooling capabilities. It's a good starting point for Solidstart developers.

SOURCE: https://www.prisma.io/docs/accelerate/examples

LANGUAGE: solidstart
CODE:
```
See https://github.com/prisma/prisma-examples/tree/latest/accelerate/solidstart-starter
```

----------------------------------------

TITLE: Prisma IO Database Baselining
DESCRIPTION: Guides on how to baseline your database schema using Prisma IO. This is useful for version control and ensuring consistency across different environments.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-typescript-postgresql

LANGUAGE: APIDOC
CODE:
```
Baseline Command:

npx prisma db push --accept-data-loss

// To baseline and create a migration file:
npx prisma migrate dev --name init_schema

// Example for SQL Server:
npx prisma migrate dev --name init_schema --datasource-url "sqlserver://user:password@host:port;databaseName=dbName;"

// Example for PostgreSQL:
npx prisma migrate dev --name init_schema --datasource-url "postgresql://user:password@host:port/dbName"

// Example for MySQL:
npx prisma migrate dev --name init_schema --datasource-url "mysql://user:password@host:port/dbName"

// Example for CockroachDB:
npx prisma migrate dev --name init_schema --datasource-url "postgresql://user:password@host:port/dbName?sslmode=require"

// Example for PlanetScale:
npx prisma migrate dev --name init_schema --datasource-url "mysql://user:password@host:port/dbName"
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup
DESCRIPTION: Covers the initial setup for using Prisma with a PostgreSQL database. This includes CLI commands for initializing Prisma and generating the client.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-node-planetscale

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider postgresql
npx prisma generate
```

----------------------------------------

TITLE: Prisma MongoDB Setup (TypeScript)
DESCRIPTION: A guide for setting up Prisma with MongoDB for a TypeScript project, aiming for a quick 15-minute setup.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/evolve-your-schema-typescript-postgresql

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider mongodb
```

----------------------------------------

TITLE: Get Started with Prisma ORM (TypeScript)
DESCRIPTION: This guide covers setting up a new project from scratch using Prisma ORM with TypeScript and relational databases. It details the steps for connecting to databases like PostgreSQL, MySQL, SQL Server, CockroachDB, and PlanetScale.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-sqlserver

LANGUAGE: typescript
CODE:
```
npx prisma init --datasource-provider postgresql

// Example schema.prisma
// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// generator client {
//   provider = "prisma-client-js"
// }
```

----------------------------------------

TITLE: Retrieve all User records
DESCRIPTION: Example of retrieving all user records from the database using Prisma Client. This shows how to perform a basic read operation.

SOURCE: https://www.prisma.io/docs/getting-started/prisma-postgres/from-the-cli

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main() {
  const users = await prisma.user.findMany()
  console.log(users)
}
```

----------------------------------------

TITLE: Querying Relational Databases with Prisma
DESCRIPTION: Guides on how to query relational databases using Prisma with different drivers and setups. Covers Node.js and TypeScript examples for various SQL databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/using-prisma-migrate-node-sqlserver

LANGUAGE: javascript
CODE:
```
// Example for querying with Node.js and SQL Server
// See: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/querying-the-database-node-sqlserver
```

LANGUAGE: typescript
CODE:
```
// Example for querying with TypeScript and CockroachDB
// See: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/querying-the-database-typescript-cockroachdb
```

LANGUAGE: typescript
CODE:
```
// Example for querying with TypeScript and MySQL
// See: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/querying-the-database-typescript-mysql
```

LANGUAGE: typescript
CODE:
```
// Example for querying with TypeScript and PlanetScale
// See: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/querying-the-database-typescript-planetscale
```

LANGUAGE: typescript
CODE:
```
// Example for querying with TypeScript and PostgreSQL
// See: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/querying-the-database-typescript-postgresql
```

LANGUAGE: typescript
CODE:
```
// Example for querying with TypeScript and PrismaPostgres
// See: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/querying-the-database-typescript-prismaPostgres
```

LANGUAGE: typescript
CODE:
```
// Example for querying with TypeScript and SQL Server
// See: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/querying-the-database-typescript-sqlserver
```

----------------------------------------

TITLE: Prisma Client Setup and Configuration
DESCRIPTION: Guides on setting up and configuring the Prisma Client in a Node.js or TypeScript project, including installing dependencies and initializing the client.

SOURCE: https://www.prisma.io/docs/orm/prisma-migrate/understanding-prisma-migrate/mental-model

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  // Example usage of Prisma Client
  const newUser = await prisma.user.create({
    data: {
      email: 'test@example.com',
      name: 'Test User',
    },
  })
  console.log('Created new user:', newUser)
}

main()
  .catch((e) => {
    console.error(e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Install Prisma Client for MySQL (TypeScript)
DESCRIPTION: This guide details the steps to install Prisma Client for MySQL using TypeScript. It covers setting up your project and connecting to the database.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-typescript-sqlserver

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider mysql
```

----------------------------------------

TITLE: Prisma ORM Setup for Relational Databases (Node.js)
DESCRIPTION: Guides on setting up Prisma ORM with various relational databases using Node.js. Covers starting from scratch and connecting to databases like PostgreSQL, MySQL, PlanetScale, SQL Server, and CockroachDB.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/next-steps

LANGUAGE: javascript
CODE:
```
npx prisma init --datasource-provider postgresql

```

LANGUAGE: javascript
CODE:
```
npx prisma migrate dev --name init

```

LANGUAGE: javascript
CODE:
```
npx prisma generate

```

----------------------------------------

TITLE: Prisma MongoDB Setup and Querying
DESCRIPTION: Guides on setting up and querying MongoDB databases using Prisma with TypeScript. This includes initial project setup and common querying patterns.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-node-planetscale

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main() {
  // Example: Finding a user by email
  const user = await prisma.user.findUnique({
    where: {
      email: 'test@example.com',
    },
  })
  console.log(user)
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Prisma Client Setup and Configuration
DESCRIPTION: Guide to setting up and configuring Prisma Client in your Node.js or TypeScript project. Covers installation and basic instantiation.

SOURCE: https://www.prisma.io/docs/orm/more/development-environment/environment-variables

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npm install @prisma/client
```

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  // ... your database queries here
}

main()
  .catch((e) => {
    console.error(e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Prisma Database Connection
DESCRIPTION: This documentation covers connecting Prisma to various relational databases. It includes examples for PostgreSQL, MySQL, SQL Server, PlanetScale, and CockroachDB.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/baseline-your-database-node-postgresql

LANGUAGE: APIDOC
CODE:
```
Database Connection:

- Configuration: Set the `DATABASE_URL` environment variable in your `.env` file.

- Examples:
  - PostgreSQL:
    `DATABASE_URL=postgresql://USER:PASSWORD@HOST:PORT/DATABASE`
  - MySQL:
    `DATABASE_URL=mysql://USER:PASSWORD@HOST:PORT/DATABASE`
  - SQL Server:
    `DATABASE_URL=sqlserver://HOST:PORT;database=DATABASE;user=USER;password=PASSWORD;`
  - PlanetScale (MySQL):
    `DATABASE_URL=mysql://USER:PASSWORD@HOST:PORT/DATABASE`
  - CockroachDB (PostgreSQL):
    `DATABASE_URL=postgresql://USER:PASSWORD@HOST:PORT/DATABASE?sslmode=verify-full`

- Command to apply schema:
  - `npx prisma db push`
  - Description: Pushes the schema to the database, creating or updating tables.
```

----------------------------------------

TITLE: Prisma Management API Basic Guide
DESCRIPTION: This outlines the steps for using the Prisma Management API, including setting up a service token, configuring environment variables, and programmatically creating projects with databases. It covers prerequisites and provides a basic TypeScript project setup.

SOURCE: https://www.prisma.io/docs/guides/management-api-basic

LANGUAGE: APIDOC
CODE:
```
Prisma Management API Basic Guide:

Overview:
  - Introduction to the Prisma Management API.

Prerequisites:
  - Requirements before starting.

1. Create a service token in Prisma Console:
    - Steps to generate a service token.

2. Set up your project directory:
    - 2.1. Create a basic TypeScript project:
        - Command to initialize a new TypeScript project.
    - 2.2. Configure service token environment variable:
        - How to set the `PRISMA_TOKEN` environment variable.
    - 2.3. Install the `axios` library for HTTP request:
        - Command to install axios.

3. Programmatically create a new project with a database:
    - Example of using the Management API to create a project.

Conclusion:
  - Summary of the guide.
```

----------------------------------------

TITLE: Prisma Client Setup and Configuration
DESCRIPTION: Guides on setting up Prisma Client in your project, including installation, client instantiation, and configuration options for connecting to your database.

SOURCE: https://www.prisma.io/docs/orm/more/help-and-troubleshooting/prisma-nuxt-module

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  // ... your database operations
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Prisma ORM Setup and Database Connection (TypeScript)
DESCRIPTION: Guides users through setting up Prisma ORM and connecting to various relational databases using TypeScript. Covers initial project setup and database connection configurations.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/using-prisma-migrate-typescript-planetscale

LANGUAGE: typescript
CODE:
```
npx prisma init --datasource-provider <provider>

// Example for PostgreSQL
npx prisma init --datasource-provider postgresql

// Example for PlanetScale
npx prisma init --datasource-provider mysql

// Then configure your schema.prisma file with the DATABASE_URL
```

----------------------------------------

TITLE: Prisma Client Setup and Configuration
DESCRIPTION: Guides on setting up and configuring Prisma Client for your project. Covers installation, environment variables, and basic configuration options.

SOURCE: https://www.prisma.io/docs/orm/more/ai-tools/cursor

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  // ... your prisma client queries
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

LANGUAGE: javascript
CODE:
```
const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function main() {
  // ... your prisma client queries
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Prisma Client Setup and Configuration
DESCRIPTION: Guides on setting up and configuring Prisma Client for database interactions. Covers installation, client instantiation, and basic configuration options.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/testing/integration-testing

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  // ... your database queries here
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Relational Databases Setup (Node.js)
DESCRIPTION: Guides for setting up relational databases with Prisma using Node.js. Covers initial setup for various databases including Postgres, MySQL, PlanetScale, SQL Server, and CockroachDB.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/querying-the-database-typescript-planetscale

LANGUAGE: node
CODE:
```
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-postgresql
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-mysql
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-planetscale
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-sqlserver
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-cockroachdb
```

----------------------------------------

TITLE: Import Data to MySQL with Prisma
DESCRIPTION: This guide details the process of importing data into a MySQL database using Prisma, focusing on scenarios with existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-postgresql

LANGUAGE: bash
CODE:
```
npx prisma db push
```

----------------------------------------

TITLE: Import Data to MySQL with Prisma
DESCRIPTION: This guide details the process of importing data into a MySQL database using Prisma, focusing on scenarios with existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-typescript-postgresql

LANGUAGE: bash
CODE:
```
npx prisma db push
```

----------------------------------------

TITLE: Prisma Postgres Setup from CLI
DESCRIPTION: This guide explains how to set up Prisma with a PostgreSQL database directly from the command line interface (CLI). It covers initialization and database migration commands.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-node-mysql

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider postgresql
npx prisma migrate dev --name init
```

----------------------------------------

TITLE: Install Prisma Client for PlanetScale (TypeScript)
DESCRIPTION: This guide details the steps to install Prisma Client for PlanetScale using TypeScript. It covers setting up your project and connecting to the database.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-typescript-sqlserver

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider mysql
```

----------------------------------------

TITLE: Install Prisma Client for SQL Server (TypeScript)
DESCRIPTION: This guide details the steps to install Prisma Client for SQL Server using TypeScript. It covers setting up your project and connecting to the database.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-typescript-sqlserver

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider mssql
```

----------------------------------------

TITLE: Install Prisma Client
DESCRIPTION: Installs the Prisma Client package using npm. This is the first step to start using Prisma Client in your Node.js project.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-node-planetscale

LANGUAGE: bash
CODE:
```
npm install @prisma/client
```

----------------------------------------

TITLE: Open Prisma Studio
DESCRIPTION: Command to launch Prisma Studio, a GUI tool for viewing and editing database data managed by Prisma ORM.

SOURCE: https://www.prisma.io/docs/getting-started/prisma-postgres/from-the-cli

LANGUAGE: bash
CODE:
```
npx prisma studio
```

----------------------------------------

TITLE: Initialize Prisma Project
DESCRIPTION: Commands to create a new directory, navigate into it, and initialize a new Prisma project with database setup.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/deployment/edge/deploy-to-deno-deploy

LANGUAGE: bash
CODE:
```
mkdir prisma-deno-deploy
cd prisma-deno-deploy
npx prisma@latest init --db
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup
DESCRIPTION: Guides for setting up Prisma with PostgreSQL, including connecting from the CLI, upgrading from early access versions, and importing data from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-typescript-sqlserver

LANGUAGE: bash
CODE:
```
npx prisma db push
```

----------------------------------------

TITLE: Prisma Client Initialization with Accelerate
DESCRIPTION: Initializes the PrismaClient and extends it with the Accelerate extension for enhanced performance. Sets up the main function for database operations.

SOURCE: https://www.prisma.io/docs/getting-started/prisma-postgres/from-the-cli

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'
import { withAccelerate } from '@prisma/extension-accelerate'

const prisma = new PrismaClient().$extends(withAccelerate())

async function main() {
  // ... you will write your Prisma ORM queries here
}

main()
  .then(async () => {
    await prisma.$disconnect()
  })
  .catch(async (e) => {
    console.error(e)
    await prisma.$disconnect()
    process.exit(1)
  })
```

----------------------------------------

TITLE: Prisma Client Setup and Configuration
DESCRIPTION: Guides on setting up and configuring Prisma Client for your Node.js or TypeScript project. Covers installation, client instantiation, and basic configuration options.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/deployment/traditional/deploy-to-koyeb

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  // ... your Prisma Client queries
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Prisma ORM Introduction
DESCRIPTION: An introductory guide to Prisma ORM, explaining its core concepts and advantages.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/deployment/serverless/deploy-to-azure-functions

LANGUAGE: en
CODE:
```
Introduction: https://www.prisma.io/docs/orm/overview/introduction
```

----------------------------------------

TITLE: TypeScript Queries Example
DESCRIPTION: Example TypeScript code demonstrating how to perform create, read, update, and delete (CRUD) operations using Prisma Client.

SOURCE: https://www.prisma.io/docs/getting-started/quickstart-prismaPostgres

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  // Create a new user
  const newUser = await prisma.user.create({
    data: {
      email: 'test@example.com',
      name: 'Test User',
    },
  })
  console.log('Created user:', newUser)

  // Read users
  const users = await prisma.user.findMany()
  console.log('All users:', users)

  // Update a user
  const updatedUser = await prisma.user.update({
    where: {
      email: 'test@example.com',
    },
    data: {
      name: 'Updated Test User',
    },
  })
  console.log('Updated user:', updatedUser)

  // Delete a user
  const deletedUser = await prisma.user.delete({
    where: {
      email: 'test@example.com',
    },
  })
  console.log('Deleted user:', deletedUser)
}

main()
  .catch((e) => {
    console.error(e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Prisma Migrate Getting Started
DESCRIPTION: Introduces Prisma Migrate for managing database schema changes. Covers generating migration files, applying migrations, and introspecting existing databases.

SOURCE: https://www.prisma.io/docs/orm/more/development-environment/editor-setup

LANGUAGE: bash
CODE:
```
# Generate a new migration file
npx prisma migrate dev --name init

# Apply migrations to the database
npx prisma migrate deploy
```

----------------------------------------

TITLE: Prisma IO Navigation Links
DESCRIPTION: Provides navigation links to key sections of the Prisma IO documentation, including Get Started, specific database guides (Postgres), ORM, general Guides, and optimization features.

SOURCE: https://www.prisma.io/docs/optimize/faq

LANGUAGE: APIDOC
CODE:
```
Navigation:
  - Get Started: https://www.prisma.io/docs/getting-started
  - Postgres: https://www.prisma.io/docs/postgres
  - ORM: https://www.prisma.io/docs/orm
  - Guides: https://www.prisma.io/docs/guides
  - Optimize: https://www.prisma.io/docs/optimize
  - Studio: https://www.prisma.io/docs/postgres/database/prisma-studio
  - Accelerate: https://www.prisma.io/docs/accelerate
```

----------------------------------------

TITLE: Prisma Client Setup and Configuration
DESCRIPTION: Guides on setting up and configuring Prisma Client for your Node.js or TypeScript application. This includes installation and basic instantiation.

SOURCE: https://www.prisma.io/docs/orm/prisma-schema/overview/generators

LANGUAGE: javascript
CODE:
```
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  // ... your prisma client queries
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main(): Promise<void> {
  // ... your prisma client queries
}

main()
  .catch((e: Error) => {
    console.error(e)
    throw e
  })
  .finally(async (): Promise<void> => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Prisma ORM Setup from Scratch (Node.js - PostgreSQL)
DESCRIPTION: Guides users through setting up Prisma ORM from scratch for Node.js applications using a PostgreSQL database. Covers initial project setup and database connection.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/querying-the-database-node-postgresql

LANGUAGE: javascript
CODE:
```
console.log('This section details setting up Prisma ORM from scratch for Node.js with PostgreSQL.');
// Further code examples would be provided here for connection and basic usage.
```

----------------------------------------

TITLE: MongoDB Setup and Querying with Prisma (TypeScript)
DESCRIPTION: Guides on setting up Prisma with MongoDB in an existing project using TypeScript, including connection, introspection, client installation, and database querying.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/mongodb/querying-the-database-typescript-mongodb

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider mongodb
```

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main() {
  const result = await prisma.user.findMany()
  console.log(result)
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Install Prisma Client
DESCRIPTION: Installs the Prisma Client package using npm. This is the first step to start using Prisma Client in your Node.js project.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-node-mysql

LANGUAGE: bash
CODE:
```
npm install @prisma/client
```

----------------------------------------

TITLE: Prisma MongoDB Setup (TypeScript)
DESCRIPTION: A guide for setting up Prisma with MongoDB for a TypeScript project, aiming for a quick 15-minute setup.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-typescript-mysql

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider mongodb
```

----------------------------------------

TITLE: Prisma Migrate: Getting Started
DESCRIPTION: A step-by-step guide to setting up and using Prisma Migrate for managing database schema changes. Covers initialization, creating migrations, and applying them to the database.

SOURCE: https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/self-relations

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider postgresql
npx prisma migrate dev --name init_schema
```

----------------------------------------

TITLE: Connect Database with Prisma
DESCRIPTION: Guides on connecting your existing project to a relational database using Prisma. Covers setup for SQL Server with TypeScript.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/install-prisma-client-node-mysql

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for database connection steps.');
// Example: prisma.schema configuration would be detailed here.
```

----------------------------------------

TITLE: Install Prisma Client for PostgreSQL (TypeScript)
DESCRIPTION: This guide details the steps to install Prisma Client for PostgreSQL using TypeScript. It covers setting up your project and connecting to the database.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-typescript-sqlserver

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider postgresql
```

----------------------------------------

TITLE: Prisma Client Setup & Configuration
DESCRIPTION: Instructions for setting up and configuring Prisma Client in a project. Covers installation, database connection, and basic configuration options.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/deployment/serverless/deploy-to-netlify

LANGUAGE: APIDOC
CODE:
```
Prisma Client Setup & Configuration:

  - Installation steps for Prisma Client using npm or yarn.
  - Configuring the database connection string in the Prisma schema.
  - Generating the Prisma Client instance.
  - Environment variables for configuration.

  Example:
  // prisma/schema.prisma
  datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
  }

  // main.ts
  import { PrismaClient } from '@prisma/client'
  const prisma = new PrismaClient()
```

----------------------------------------

TITLE: Prisma Setup and Migration for PostgreSQL
DESCRIPTION: Guides on setting up Prisma with PostgreSQL, including migrating from existing databases and using Prisma Migrate with TypeScript. It covers CLI-based setup and upgrading from early access versions.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/using-prisma-migrate-typescript-postgresql

LANGUAGE: bash
CODE:
```
# Install Prisma CLI
npm install prisma --save-dev

# Initialize Prisma
npx prisma init --datasource-provider postgresql

# Create migration
npx prisma migrate dev --name init_db
```

LANGUAGE: typescript
CODE:
```
// Example Prisma schema
// datasource db {
//   url      = env("DATABASE_URL")
//   provider = "postgresql"
// }
//
// generator client {
//   provider = "prisma-client-js"
// }
```

----------------------------------------

TITLE: Prisma Client Setup & Configuration
DESCRIPTION: Guide to setting up and configuring Prisma Client in your Node.js or TypeScript project. Covers installation, instantiation, and basic configuration options.

SOURCE: https://www.prisma.io/docs/orm/more/help-and-troubleshooting/pkg-issue

LANGUAGE: javascript
CODE:
```
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  // Example: Create a new user
  const newUser = await prisma.user.create({
    data: {
      email: 'test@example.com',
      name: 'Test User',
    },
  })
  console.log('Created new user:', newUser)

  // Example: Find all users
  const allUsers = await prisma.user.findMany()
  console.log('All users:', allUsers)
}

main()
  .catch((e) => {
    console.error(e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })

```

----------------------------------------

TITLE: Prisma CLI, Client, and Migrate Introduction
DESCRIPTION: This section introduces the core tools of Prisma ORM: Prisma CLI for database management, Prisma Client for type-safe database access, and Prisma Migrate for schema evolution. It's essential for setting up new projects.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-mysql

LANGUAGE: markdown
CODE:
```
Learn how to create a new Node.js or TypeScript project from scratch by connecting Prisma ORM to your database and generating a Prisma Client for database access. The following tutorial introduces you to the [Prisma CLI](https://www.prisma.io/docs/orm/tools/prisma-cli), [Prisma Client](https://www.prisma.io/docs/orm/prisma-client), and [Prisma Migrate](https://www.prisma.io/docs/orm/prisma-migrate).
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup
DESCRIPTION: Guides for setting up Prisma with PostgreSQL, including connecting from the CLI, upgrading from early access versions, and importing data from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-typescript-planetscale

LANGUAGE: bash
CODE:
```
npx prisma db push
```

----------------------------------------

TITLE: Prisma Client: Setup and Configuration
DESCRIPTION: Guides on setting up and configuring Prisma Client for various Node.js environments. Covers installation, generating the client, and basic instantiation.

SOURCE: https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/self-relations

LANGUAGE: javascript
CODE:
```
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  // ... your prisma client queries
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Prisma Client - Setup & Configuration
DESCRIPTION: Guides users through the process of setting up and configuring Prisma Client in their project, including installation, database connection, and basic client instantiation.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/type-safety/prisma-validator

LANGUAGE: APIDOC
CODE:
```
Prisma Client - Setup & Configuration:

Overview:
  Provides step-by-step instructions for installing and configuring Prisma Client in your Node.js or TypeScript project. This includes setting up the database connection and creating a Prisma Client instance.

Installation:
  1. Install Prisma CLI and Prisma Client:
     ```bash
     npm install prisma --save-dev
     npm install @prisma/client
     ```
     or
     ```bash
     yarn add prisma --dev
     yarn add @prisma/client
     ```

Database Connection:
  - Define your database connection URL in your `.env` file:
    ```env
    DATABASE_URL="postgresql://user:password@host:port/database?schema=public"
    ```
  - Ensure your `schema.prisma` file has the correct `datasource` block:
    ```prisma
    datasource db {
      provider = "postgresql"
      url      = env("DATABASE_URL")
    }
    ```

Instantiating Prisma Client:
  - In your application code (e.g., `src/index.ts` or `server.js`):
    ```typescript
    import { PrismaClient } from '@prisma/client'

    const prisma = new PrismaClient()

    async function main() {
      // ... your database queries here ...
    }

    main()
      .catch((e) => {
        console.error(e)
        process.exit(1)
      })
      .finally(async () => {
        await prisma.$disconnect()
      })
    ```

Related Sections:
  - Prisma Client API
  - Prisma CLI Reference
  - Connection URLs
```

----------------------------------------

TITLE: Prisma Schema Example
DESCRIPTION: An example of a Prisma schema defining database models like User and Post, which are mapped to database tables during migration.

SOURCE: https://www.prisma.io/docs/getting-started/quickstart-prismaPostgres

LANGUAGE: prisma
CODE:
```
model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
  Post  Post[]
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
}
```

----------------------------------------

TITLE: Prisma ORM Setup and Database Connection (Node.js)
DESCRIPTION: Provides instructions for setting up Prisma ORM and establishing database connections for Node.js applications. Includes steps for initialization and basic data fetching.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/using-prisma-migrate-typescript-sqlserver

LANGUAGE: javascript
CODE:
```
npx prisma init --datasource-provider mysql

// schema.prisma
// datasource db {
//   url      = env("DATABASE_URL")
//   provider = "mysql"
// }

// generator client {
//   provider = "prisma-client-js"
// }
```

LANGUAGE: javascript
CODE:
```
// Example: Connecting to MySQL
const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

async function main() {
  const posts = await prisma.post.findMany({
    include: { author: true },
  })
  console.log(posts)
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Prisma Client Setup and Configuration
DESCRIPTION: Guides on setting up and configuring Prisma Client in a project, including installation and database connection.

SOURCE: https://www.prisma.io/docs/orm/prisma-migrate/understanding-prisma-migrate

LANGUAGE: APIDOC
CODE:
```
Prisma Client Setup and Configuration:
  - Installing Prisma Client via npm or yarn.
  - Generating Prisma Client based on the schema.
  - Configuring the database connection string.
  - Instantiating the Prisma Client in your application.
```

----------------------------------------

TITLE: Prisma Client Setup and Configuration
DESCRIPTION: Guides on setting up and configuring Prisma Client for your Node.js or TypeScript application. Covers installation, instantiation, and basic configuration options.

SOURCE: https://www.prisma.io/docs/orm/prisma-schema/overview

LANGUAGE: javascript
CODE:
```
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()
```

----------------------------------------

TITLE: Evolve Schema for Relational Databases (Node.js)
DESCRIPTION: Guides on evolving database schemas for Node.js projects using Prisma, supporting PostgreSQL, MySQL, and SQL Server.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-cockroachdb

LANGUAGE: bash
CODE:
```
# Example for PostgreSQL
npx prisma migrate dev --name init

```

LANGUAGE: bash
CODE:
```
# Example for MySQL
npx prisma migrate dev --name add_users_table

```

LANGUAGE: bash
CODE:
```
# Example for SQL Server
npx prisma migrate dev --name create_products

```

----------------------------------------

TITLE: Prisma Client: Setup & Configuration
DESCRIPTION: Guides on setting up and configuring Prisma Client for various Node.js environments. Covers installation, generating the client, and basic instantiation.

SOURCE: https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/self-relations

LANGUAGE: APIDOC
CODE:
```
Prisma Client Setup & Configuration:

  1. Installation:
     - Install Prisma Client as a dependency:
       `npm install @prisma/client` or `yarn add @prisma/client`

  2. Schema Generation:
     - Generate the Prisma Client based on your schema:
       `npx prisma generate`
     - This creates the `node_modules/.prisma/client` directory containing the client code.

  3. Instantiation:
     - Import and instantiate Prisma Client in your application:
       ```javascript
       import { PrismaClient } from '@prisma/client'
       const prisma = new PrismaClient()
       ```

  4. Configuration Options:
     - Pass configuration options during instantiation:
       ```javascript
       const prisma = new PrismaClient({
         log: [
           'query',
           'info',
           'warn',
           'error',
         ],
       })
       ```
     - `log`: Enables logging of database queries and other events.
     - `datasources`: Allows overriding datasource URLs (typically handled by environment variables).

  5. Connection Management:
     - Prisma Client manages database connections automatically.
     - Use `$connect()` and `$disconnect()` for explicit connection control if needed, though often not required.
       ```javascript
       await prisma.$connect()
       // ... queries ...
       await prisma.$disconnect()
       ```
```

----------------------------------------

TITLE: Prisma MongoDB Setup and Querying
DESCRIPTION: Guides on setting up and querying MongoDB databases using Prisma with TypeScript. This includes initial project setup and common querying patterns.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-typescript-cockroachdb

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main() {
  // Example: Finding a user by email
  const user = await prisma.user.findUnique({
    where: {
      email: 'test@example.com',
    },
  })
  console.log(user)
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Initialize Prisma ORM Project
DESCRIPTION: Command to set up the Prisma ORM project, creating the Prisma Schema file and configuring the datasource provider and output location.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-mysql

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider mysql --output ../generated/prisma
```

----------------------------------------

TITLE: Initialize Prisma ORM Project
DESCRIPTION: Sets up the Prisma ORM project by creating the `prisma` directory, `schema.prisma` file, and `.env` file. It configures the datasource provider to PostgreSQL and specifies an output directory for generated files.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-postgresql

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider postgresql --output ../generated/prisma
```

----------------------------------------

TITLE: Prisma ORM Setup - Relational Databases (TypeScript)
DESCRIPTION: Guides for setting up Prisma ORM with various relational databases using TypeScript. Covers starting from scratch and connecting to databases like PostgreSQL, MySQL, PlanetScale, SQL Server, and CockroachDB.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-mysql

LANGUAGE: typescript
CODE:
```
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-postgresql
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-prismaPostgres
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-mysql
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-planetscale
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-sqlserver
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-cockroachdb
```

----------------------------------------

TITLE: Prisma ORM Setup and Database Connection (Node.js)
DESCRIPTION: Guides users through setting up Prisma ORM and connecting to various relational databases using Node.js. Covers initial project setup and database connection configurations.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/using-prisma-migrate-typescript-planetscale

LANGUAGE: javascript
CODE:
```
npx prisma init --datasource-provider <provider>

// Example for PostgreSQL
npx prisma init --datasource-provider postgresql

// Example for PlanetScale
npx prisma init --datasource-provider mysql

// Then configure your schema.prisma file with the DATABASE_URL
```

----------------------------------------

TITLE: Prisma MongoDB Setup and Querying
DESCRIPTION: Guides on setting up and querying MongoDB databases using Prisma with TypeScript. This includes initial project setup and common querying patterns.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-node-cockroachdb

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main() {
  // Example: Finding a user by email
  const user = await prisma.user.findUnique({
    where: {
      email: 'test@example.com',
    },
  })
  console.log(user)
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: SvelteKit Guide Navigation
DESCRIPTION: Navigation links for the SvelteKit guide, including introduction, prerequisites, setup steps, Prisma integration, and next steps.

SOURCE: https://www.prisma.io/docs/guides/sveltekit

LANGUAGE: en
CODE:
```
Introduction: https://www.prisma.io/docs/guides/sveltekit#introduction
Prerequisites: https://www.prisma.io/docs/guides/sveltekit#prerequisites
1. Set up your project: https://www.prisma.io/docs/guides/sveltekit#1-set-up-your-project
2. Install and Configure Prisma: https://www.prisma.io/docs/guides/sveltekit#2-install-and-configure-prisma
  2.1. Install dependencies: https://www.prisma.io/docs/guides/sveltekit#21-install-dependencies
  2.2. Define your Prisma Schema: https://www.prisma.io/docs/guides/sveltekit#22-define-your-prisma-schema
  2.3. Configure the Prisma Client generator: https://www.prisma.io/docs/guides/sveltekit#23-configure-the-prisma-client-generator
  2.4. Seed the database: https://www.prisma.io/docs/guides/sveltekit#24-seed-the-database
3. Integrate Prisma into SvelteKit: https://www.prisma.io/docs/guides/sveltekit#3-integrate-prisma-into-sveltekit
  3.1. Create a Prisma Client: https://www.prisma.io/docs/guides/sveltekit#31-create-a-prisma-client
  3.2. Create a server route: https://www.prisma.io/docs/guides/sveltekit#32-create-a-server-route
  3.3. Populate the page: https://www.prisma.io/docs/guides/sveltekit#33-populate-the-page
Next Steps: https://www.prisma.io/docs/guides/sveltekit#next-steps
  More Info: https://www.prisma.io/docs/guides/sveltekit#more-info
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup and Management
DESCRIPTION: Documentation for setting up Prisma with PostgreSQL, including CLI operations, upgrading from early access versions, and importing data from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-typescript-planetscale

LANGUAGE: typescript
CODE:
```
// Example: Prisma CLI command to migrate database
// npx prisma migrate dev --name init

// Example: Prisma schema definition for PostgreSQL
// datasource db {
//   url      = env("DATABASE_URL")
//   provider = "postgresql"
// }

// model User {
//   id    Int    @id @default(autoincrement())
//   email String @unique
//   name  String?
// }
```

LANGUAGE: typescript
CODE:
```
// Example: Importing data from an existing MySQL database
// npx prisma db import --datasource-url "mysql://user:password@host:port/database" --schema "./prisma/schema.prisma"
```

----------------------------------------

TITLE: Prisma Setup for PostgreSQL
DESCRIPTION: Documentation on setting up Prisma with PostgreSQL, including options for CLI-based setup and importing data from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/using-prisma-migrate-typescript-planetscale

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider postgresql
```

----------------------------------------

TITLE: Import Data into Prisma MySQL
DESCRIPTION: Instructions for importing data from an existing MySQL database into Prisma.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/baseline-your-database-node-postgresql

LANGUAGE: cli
CODE:
```
npx prisma db pull
npx prisma generate
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup
DESCRIPTION: Documentation for setting up Prisma with PostgreSQL, including CLI commands and importing from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-node-sqlserver

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider postgresql
```

LANGUAGE: bash
CODE:
```
npx prisma db push
```

LANGUAGE: bash
CODE:
```
npx prisma db pull
```

----------------------------------------

TITLE: Prisma Setup and Relational Database Connection (Node.js & TypeScript)
DESCRIPTION: Guides on setting up Prisma with Node.js and TypeScript for various relational databases. Covers starting from scratch and connecting to databases like PostgreSQL, MySQL, PlanetScale, SQL Server, and CockroachDB.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-postgresql

LANGUAGE: typescript
CODE:
```
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-postgresql
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-mysql
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-planetscale
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-sqlserver
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-cockroachdb
```

LANGUAGE: node.js
CODE:
```
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-postgresql
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-mysql
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-planetscale
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-sqlserver
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-cockroachdb
```

----------------------------------------

TITLE: Install Prisma Client for PlanetScale (Node.js)
DESCRIPTION: This guide details the steps to install Prisma Client for PlanetScale using Node.js. It covers setting up your project and connecting to the database.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-typescript-sqlserver

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider mysql
```

----------------------------------------

TITLE: Prisma ORM Setup for Relational Databases (TypeScript)
DESCRIPTION: Guides on setting up Prisma ORM with various relational databases using TypeScript. Covers starting from scratch and connecting to databases like PostgreSQL, MySQL, PlanetScale, SQL Server, and CockroachDB.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/next-steps

LANGUAGE: typescript
CODE:
```
npx prisma init --datasource-provider postgresql

```

LANGUAGE: typescript
CODE:
```
npx prisma migrate dev --name init

```

LANGUAGE: typescript
CODE:
```
npx prisma generate

```

----------------------------------------

TITLE: Prisma PostgreSQL Setup
DESCRIPTION: Guides for setting up Prisma with PostgreSQL, including connecting from the CLI, upgrading from early access versions, and importing data from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-node-mysql

LANGUAGE: bash
CODE:
```
npx prisma db push
```

----------------------------------------

TITLE: Prisma Client Setup and Configuration
DESCRIPTION: Guides on setting up and configuring Prisma Client for your Node.js or TypeScript project. Covers installation, generating the client, and basic configuration options.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/deployment/deploy-migrations-from-a-local-environment

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init
npx prisma generate
```

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  // ... your prisma client queries
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Initialize Project Directory and Navigate
DESCRIPTION: Creates a new project directory and changes the current directory to it. This is the first step in setting up a new project.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-cockroachdb

LANGUAGE: bash
CODE:
```
mkdir hello-prisma
cd hello-prisma
```

----------------------------------------

TITLE: Prisma Client Setup and Configuration
DESCRIPTION: Guides on setting up and configuring Prisma Client for various databases and environments. Covers connection URLs, environment variables, and basic client instantiation.

SOURCE: https://www.prisma.io/docs/orm/prisma-migrate/getting-started

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  // ... your prisma client queries
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Prisma ORM Introduction
DESCRIPTION: An introductory guide to Prisma ORM, covering its purpose and how it simplifies database access in applications.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/deployment/serverless/deploy-to-netlify

LANGUAGE: APIDOC
CODE:
```
Prisma ORM Introduction:

  - Introduction to Object-Relational Mapping (ORM).
  - How Prisma ORM enhances developer productivity and type safety.
  - Core components: Prisma Client, Prisma Migrate, Prisma Schema.
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup and Import
DESCRIPTION: Guides for setting up Prisma with PostgreSQL, including connecting from the CLI, upgrading from early access versions, and importing data from existing PostgreSQL databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/using-prisma-migrate-node-planetscale

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider postgresql
npx prisma db push
```

LANGUAGE: bash
CODE:
```
npx prisma migrate dev --name initial_migration
```

----------------------------------------

TITLE: Import Data into Prisma PostgreSQL
DESCRIPTION: Instructions for importing data from an existing PostgreSQL database into Prisma.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/baseline-your-database-node-postgresql

LANGUAGE: cli
CODE:
```
npx prisma db pull
npx prisma generate
```

----------------------------------------

TITLE: Prisma ORM Setup - Relational Databases (Node.js)
DESCRIPTION: Guides for setting up Prisma ORM with various relational databases using Node.js. Covers starting from scratch and connecting to databases like PostgreSQL, MySQL, PlanetScale, SQL Server, and CockroachDB.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-mysql

LANGUAGE: javascript
CODE:
```
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-postgresql
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-mysql
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-planetscale
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-sqlserver
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-cockroachdb
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup
DESCRIPTION: Documentation for setting up Prisma with PostgreSQL, including CLI commands and importing from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-planetscale

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider postgresql
```

LANGUAGE: bash
CODE:
```
npx prisma db push
```

LANGUAGE: bash
CODE:
```
npx prisma db pull
```

----------------------------------------

TITLE: Prisma ORM Setup from Scratch (TypeScript - PostgreSQL)
DESCRIPTION: Guides users through setting up Prisma ORM from scratch for TypeScript applications using a PostgreSQL database. Covers initial project setup and database connection.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/querying-the-database-node-postgresql

LANGUAGE: typescript
CODE:
```
console.log('This section details setting up Prisma ORM from scratch for TypeScript with PostgreSQL.');
// Further code examples would be provided here for connection and basic usage.
```

----------------------------------------

TITLE: Prisma MongoDB Setup (TypeScript)
DESCRIPTION: A guide for setting up Prisma with MongoDB for a TypeScript project, aiming for a quick 15-minute setup.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-node-cockroachdb

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider mongodb
```

----------------------------------------

TITLE: Prisma ORM Setup and Usage
DESCRIPTION: Guides on setting up Prisma ORM from scratch or adding it to an existing project. Covers schema definition, migrations, and basic ORM operations.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-node-planetscale

LANGUAGE: APIDOC
CODE:
```
Prisma ORM Setup:

1. Install Prisma CLI:
   npm install prisma --save-dev
   or
   yarn add prisma --dev

2. Initialize Prisma:
   npx prisma init
   This creates a prisma/schema.prisma file and a .env file.

3. Define your database schema in prisma/schema.prisma:
   datasource db {
     provider = "postgresql"
     url      = env("DATABASE_URL")
   }

   generator client {
     provider = "prisma-client-js"
   }

   model User {
     id    Int     @id @default(autoincrement())
     email String  @unique
     name  String?
     posts Post[]
   }

   model Post {
     id        Int      @id @default(autoincrement())
     title     String
     content   String?
     published Boolean  @default(false)
     author    User     @relation(fields: [authorId], references: [id])
     authorId  Int
   }

4. Connect to your database by setting the DATABASE_URL in your .env file:
   DATABASE_URL="postgresql://user:password@host:port/database"

5. Run migrations:
   npx prisma migrate dev --name init
   This creates a migration file and applies it to your database.

6. Generate Prisma Client:
   npx prisma generate
   This generates the Prisma Client based on your schema.

Usage Example (Node.js):

import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main() {
  const newUser = await prisma.user.create({
    data: {
      email: 'test@example.com',
      name: 'Test User',
      posts: {
        create: {
          title: 'Hello World',
        },
      },
    },
  })
  console.log(newUser)

  const users = await prisma.user.findMany({
    include: {
      posts: true,
    },
  })
  console.log(users)
}

main()
  .catch((e) => {
    console.error(e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })

```

----------------------------------------

TITLE: Create TypeScript Project and Install Dependencies
DESCRIPTION: Commands to create a new project directory, initialize npm, and install TypeScript-related development dependencies.

SOURCE: https://www.prisma.io/docs/guides/management-api-basic

LANGUAGE: bash
CODE:
```
mkdir management-api-demo
cd management-api-demo
npm init -y
npm install tsx typescript @types/node --save-dev
touch index.ts
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup
DESCRIPTION: Guides for setting up Prisma with PostgreSQL, including connecting from the CLI, upgrading from early access versions, and importing data from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/evolve-your-schema-node-mysql

LANGUAGE: bash
CODE:
```
npx prisma db push
```

----------------------------------------

TITLE: Prisma Client Setup and Configuration
DESCRIPTION: Guides on setting up and configuring Prisma Client for your Node.js or TypeScript project. Covers installation, environment variables, and basic client instantiation.

SOURCE: https://www.prisma.io/docs/orm/overview/introduction/data-modeling

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  // ... your prisma client queries
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup and Management
DESCRIPTION: Documentation for setting up Prisma with PostgreSQL, including CLI operations, upgrading from early access versions, and importing data from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-node-mysql

LANGUAGE: typescript
CODE:
```
// Example: Prisma CLI command to migrate database
// npx prisma migrate dev --name init

// Example: Prisma schema definition for PostgreSQL
// datasource db {
//   url      = env("DATABASE_URL")
//   provider = "postgresql"
// }

// model User {
//   id    Int    @id @default(autoincrement())
//   email String @unique
//   name  String?
// }
```

LANGUAGE: typescript
CODE:
```
// Example: Importing data from an existing MySQL database
// npx prisma db import --datasource-url "mysql://user:password@host:port/database" --schema "./prisma/schema.prisma"
```

----------------------------------------

TITLE: Prisma Client Setup and Configuration
DESCRIPTION: Guides on setting up and configuring Prisma Client for your Node.js and TypeScript projects. Covers installation, client instantiation, and basic configuration options.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/deployment/traditional

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  // ... your prisma client queries
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Evolve Schema for Relational Databases (TypeScript)
DESCRIPTION: Guides on evolving database schemas for TypeScript projects using Prisma, supporting PostgreSQL, MySQL, and SQL Server.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-cockroachdb

LANGUAGE: bash
CODE:
```
# Example for PostgreSQL
npx prisma migrate dev --name init

```

LANGUAGE: bash
CODE:
```
# Example for MySQL
npx prisma migrate dev --name add_users_table

```

LANGUAGE: bash
CODE:
```
# Example for SQL Server
npx prisma migrate dev --name create_products

```

----------------------------------------

TITLE: Set up Prisma ORM
DESCRIPTION: This section details the steps to set up Prisma ORM within a TypeScript project. It involves installing necessary dependencies and configuring Prisma.

SOURCE: https://www.prisma.io/docs/getting-started/prisma-postgres/from-the-cli

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider postgresql
```

LANGUAGE: typescript
CODE:
```
npm install @prisma/client
```

----------------------------------------

TITLE: Prisma MongoDB Setup (TypeScript)
DESCRIPTION: A guide for setting up Prisma with MongoDB for a TypeScript project, aiming for a quick 15-minute setup.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/evolve-your-schema-node-cockroachdb

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider mongodb
```

----------------------------------------

TITLE: Initialize Project Directory and Navigate
DESCRIPTION: Creates a new project directory and changes the current directory into it. This is the first step in setting up a new project.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/mongodb-node-mongodb

LANGUAGE: bash
CODE:
```
mkdir hello-prisma
cd hello-prisma
```

----------------------------------------

TITLE: Prisma ORM Examples Repository
DESCRIPTION: A collection of ready-to-run examples demonstrating Prisma ORM usage with various backend technologies including Express, NestJS, GraphQL, Next.js, and Vue.js. Examples default to SQLite but can be configured for PostgreSQL.

SOURCE: https://www.prisma.io/docs/getting-started/quickstart-prismaPostgres

LANGUAGE: Prisma
CODE:
```
Explore examples at https://github.com/prisma/prisma-examples/.
Default database: SQLite.
Instructions to switch to Prisma Postgres are available in the project README.
```

----------------------------------------

TITLE: Prisma Community Links
DESCRIPTION: Provides links to connect with the Prisma community on various platforms for support, announcements, and collaboration.

SOURCE: https://www.prisma.io/docs/getting-started/quickstart-sqlite

LANGUAGE: APIDOC
CODE:
```
Community Channels:
  - X: https://pris.ly/x?utm_source=docs&utm_medium=generated_text_cta
  - Discord: https://pris.ly/discord?utm_source=docs&utm_medium=generated_text_cta
  - YouTube: https://pris.ly/youtube?utm_source=docs&utm_medium=generated_text_cta
  - GitHub: https://pris.ly/github?utm_source=docs&utm_medium=generated_text_cta
```

----------------------------------------

TITLE: Prisma ORM Quickstart (SQLite)
DESCRIPTION: This snippet offers a quickstart guide for using the Prisma ORM with SQLite. It outlines the initial steps for setting up and using Prisma with an SQLite database.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-typescript-mysql

LANGUAGE: typescript
CODE:
```
// Example of a Prisma schema definition for SQLite
// datasource db {
//   url      = env("DATABASE_URL")
//   provider = "sqlite"
// }

// generator client {
//   provider = "prisma-client-js"
// }

// model Post {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   title     String
//   published Boolean  @default(false)
//   author    User     @relation(fields: [authorId], references: [id])
//   authorId  Int
// }

// model User {
//   id    Int    @id @default(autoincrement())
//   email String @unique
//   name  String?
//   posts Post[]
// }
```

----------------------------------------

TITLE: Prisma Migrate Documentation
DESCRIPTION: Guides on using Prisma Migrate for database schema evolution, including getting started, understanding workflows, and managing migrations.

SOURCE: https://www.prisma.io/docs/orm/reference/supported-databases

LANGUAGE: APIDOC
CODE:
```
Prisma Migrate:
  - Getting started with database migrations.
  - Understanding the migration process and concepts.
  - Workflows for applying and managing migrations.
```

----------------------------------------

TITLE: DB Migration Guides
DESCRIPTION: Guides for migrating databases to Prisma, with specific examples for Neon and Supabase, focusing on importing from existing databases.

SOURCE: https://www.prisma.io/docs/guides

LANGUAGE: en
CODE:
```
Neon
Supabase
```

----------------------------------------

TITLE: Prisma Client Setup and Configuration
DESCRIPTION: Guides on setting up and configuring Prisma Client for Node.js and TypeScript applications. Covers installation, generating the client, and basic configuration options.

SOURCE: https://www.prisma.io/docs/orm/reference/preview-features

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npm install @prisma/client
```

LANGUAGE: bash
CODE:
```
npx prisma init
npx prisma generate
```

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  // ... your prisma client queries
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup
DESCRIPTION: Documentation for setting up Prisma with PostgreSQL, including CLI commands and importing from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/install-prisma-client-node-postgresql

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider postgresql
```

LANGUAGE: bash
CODE:
```
npx prisma db push
```

LANGUAGE: bash
CODE:
```
npx prisma db pull
```

----------------------------------------

TITLE: Evolve Your Schema (TypeScript)
DESCRIPTION: This guide covers evolving your database schema with Prisma in a TypeScript project. It includes steps for CockroachDB, MySQL, PostgreSQL, and SQL Server.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-typescript-postgresql

LANGUAGE: bash
CODE:
```
npx prisma migrate dev --name init
```

----------------------------------------

TITLE: Prisma Postgres Setup (CLI)
DESCRIPTION: Instructions for setting up Prisma with PostgreSQL directly from the command line interface. This includes initializing Prisma and configuring the database connection.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-typescript-sqlserver

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider postgresql
# Then configure your DATABASE_URL in .env
```

----------------------------------------

TITLE: Prisma ORM Setup for Relational Databases (TypeScript)
DESCRIPTION: Guides on setting up Prisma ORM with various relational databases using TypeScript. Covers connecting the database and initial project setup.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/using-prisma-migrate-typescript-prismaPostgres

LANGUAGE: typescript
CODE:
```
// Example for connecting to PostgreSQL
// prisma/schema.prisma

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// generator client {
//   provider = "prisma-client-js"
// }
```

----------------------------------------

TITLE: Prisma Client Setup and Configuration
DESCRIPTION: Guides on setting up and configuring Prisma Client for Node.js and TypeScript applications. Covers installation, generating the client, and basic configuration options.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/testing/unit-testing

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init
npx prisma generate
```

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  // ... your prisma client queries
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Prisma ORM Setup for Existing Projects
DESCRIPTION: General steps for integrating the Prisma ORM into an existing project, covering initial setup and configuration.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/evolve-your-schema-node-mysql

LANGUAGE: javascript
CODE:
```
console.log('This section provides general guidance on setting up Prisma ORM in existing projects.');
// Key steps include installing Prisma CLI and defining the schema.
```

----------------------------------------

TITLE: Prisma MongoDB Setup (TypeScript)
DESCRIPTION: A guide for setting up Prisma with MongoDB for a TypeScript project, aiming for a quick 15-minute setup.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-typescript-cockroachdb

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider mongodb
```

----------------------------------------

TITLE: MongoDB Setup and Querying with Prisma (Node.js)
DESCRIPTION: Guides on setting up Prisma with MongoDB in an existing project using Node.js, including connection, introspection, client installation, and database querying.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/mongodb/querying-the-database-typescript-mongodb

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider mongodb
```

LANGUAGE: typescript
CODE:
```
const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

async function main() {
  const result = await prisma.user.findMany()
  console.log(result)
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Prisma Client Setup and Configuration
DESCRIPTION: Guides on setting up and configuring Prisma Client, including generating the client, instantiating it, managing database connections, and customizing model names.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/no-rust-engine

LANGUAGE: javascript
CODE:
```
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  // ... your prisma client queries
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main(): Promise<void> {
  // ... your prisma client queries
}

main()
  .catch((e: Error) => {
    console.error(e)
    throw e
  })
  .finally(async (): Promise<void> => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Prisma Client Setup and Configuration
DESCRIPTION: Guides on how to set up and configure Prisma Client in your project. This includes installation, generating the client, and basic configuration options for connecting to your database.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/observability-and-logging/opentelemetry-tracing

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  // ... your prisma client queries
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Install Prisma Client for SQL Server (Node.js)
DESCRIPTION: This guide details the steps to install Prisma Client for SQL Server using Node.js. It covers setting up your project and connecting to the database.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-typescript-sqlserver

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider mssql
```

----------------------------------------

TITLE: Prisma Client Setup and Configuration
DESCRIPTION: Guides on setting up and configuring Prisma Client for your Node.js or TypeScript project. Covers installation, generating the client, and basic configuration options.

SOURCE: https://www.prisma.io/docs/orm/more/development-environment/editor-setup

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init
```

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()
```

----------------------------------------

TITLE: Initialize Prisma ORM Project
DESCRIPTION: Sets up the Prisma ORM project by creating the `prisma` directory and the `schema.prisma` file. It also configures the datasource provider and output location.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-cockroachdb

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider cockroachdb --output ../generated/prisma
```

----------------------------------------

TITLE: Getting started with TypedSQL
DESCRIPTION: This section explains how to begin using TypedSQL for raw SQL queries within Prisma. It likely covers initial setup and basic query execution.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/using-raw-sql/typedsql

LANGUAGE: typescript
CODE:
```
// Example of getting started with TypedSQL
// This would typically involve importing PrismaClient and defining SQL queries.

import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

async function main() {
  // Example query (syntax may vary based on actual TypedSQL implementation)
  const users = await prisma.$queryRaw`SELECT * FROM "User";`;
  console.log(users);
}

main().catch((e) => {
  console.error(e);
  process.exit(1);
});
```

----------------------------------------

TITLE: Prisma Client (Preview) Configuration
DESCRIPTION: Information regarding the preview version of Prisma Client, covering getting started, field references, output splitting, and examples.

SOURCE: https://www.prisma.io/docs/orm/prisma-schema/overview/generators

LANGUAGE: APIDOC
CODE:
```
prisma-client (Preview):
  Getting started: Initial setup and usage instructions for the preview version.
  Field reference: How fields are mapped and accessed in the preview client.
  Output splitting and importing types: Techniques for managing output and importing types for better modularity.
  Examples: Practical usage examples demonstrating various features.
```

----------------------------------------

TITLE: Connect Database with Prisma IO
DESCRIPTION: Guides on connecting your project to various relational databases using Prisma IO. This typically involves configuring your database connection string in the Prisma schema file.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-typescript-postgresql

LANGUAGE: APIDOC
CODE:
```
Prisma Schema Configuration:

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// Example for PostgreSQL:
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Example for MySQL:
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Example for CockroachDB:
datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

// Example for PlanetScale:
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Usage:
// Set the DATABASE_URL environment variable with your database connection string.
// Example: DATABASE_URL="sqlserver://user:password@host:port;databaseName=dbName;"
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup
DESCRIPTION: Guides for setting up Prisma with PostgreSQL, including connecting from the CLI, upgrading from early access versions, and importing data from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/evolve-your-schema-typescript-postgresql

LANGUAGE: bash
CODE:
```
npx prisma db push
```

----------------------------------------

TITLE: Prisma ORM Navigation
DESCRIPTION: Links and navigation structure for Prisma ORM documentation, including sections on getting started, Postgres, guides, and more.

SOURCE: https://www.prisma.io/docs/orm/more/upgrade-guides/upgrading-versions/upgrading-to-prisma-5

LANGUAGE: navigation
CODE:
```
[Get Started](https://www.prisma.io/docs/getting-started)
[Postgres](https://www.prisma.io/docs/postgres)
[ORM](https://www.prisma.io/docs/orm)
[Guides](https://www.prisma.io/docs/guides)
[More](https://www.prisma.io/docs/orm/more/upgrade-guides/upgrading-versions/upgrading-to-prisma-5)
```

----------------------------------------

TITLE: Install Prisma Client (Node.js)
DESCRIPTION: Instructions for installing Prisma Client, the type-safe database client for Node.js applications.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-planetscale

LANGUAGE: node
CODE:
```
npm install prisma --save-dev
npx prisma generate

// Example usage in Node.js:
const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

async function main() {
  const users = await prisma.user.findMany()
  console.log(users)
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Install Prisma Client
DESCRIPTION: Installs the Prisma Client package using npm. This is the first step to start using Prisma Client in your Node.js project.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-node-cockroachdb

LANGUAGE: bash
CODE:
```
npm install @prisma/client
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup
DESCRIPTION: Documentation for setting up Prisma with PostgreSQL, including CLI commands and importing from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/install-prisma-client-typescript-sqlserver

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider postgresql
```

LANGUAGE: bash
CODE:
```
npx prisma db push
```

LANGUAGE: bash
CODE:
```
npx prisma db pull
```

----------------------------------------

TITLE: Prisma CLI Commands for Setup
DESCRIPTION: Commands to install Vercel CLI, create a Next.js app, install Prisma, and initialize Prisma with a specified output directory.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/deployment/edge/deploy-to-vercel

LANGUAGE: bash
CODE:
```
npm install -g vercel
npx create-next-app@latest
npm install prisma --save-dev && npm install @prisma/client
npx prisma init --output ../app/generated/prisma
```

----------------------------------------

TITLE: Evolve Your Schema (TypeScript)
DESCRIPTION: This guide covers evolving your database schema with Prisma in a TypeScript project. It includes steps for CockroachDB, MySQL, PostgreSQL, and SQL Server.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-postgresql

LANGUAGE: bash
CODE:
```
npx prisma migrate dev --name init
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup and Management
DESCRIPTION: Documentation for setting up Prisma with PostgreSQL, including CLI operations, upgrading from early access versions, and importing data from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-node-postgresql

LANGUAGE: typescript
CODE:
```
// Example: Prisma CLI command to migrate database
// npx prisma migrate dev --name init

// Example: Prisma schema definition for PostgreSQL
// datasource db {
//   url      = env("DATABASE_URL")
//   provider = "postgresql"
// }

// model User {
//   id    Int    @id @default(autoincrement())
//   email String @unique
//   name  String?
// }
```

LANGUAGE: typescript
CODE:
```
// Example: Importing data from an existing MySQL database
// npx prisma db import --datasource-url "mysql://user:password@host:port/database" --schema "./prisma/schema.prisma"
```

----------------------------------------

TITLE: Prisma ORM Setup - Relational Databases (TypeScript)
DESCRIPTION: Guides for setting up Prisma ORM with relational databases using TypeScript. Covers starting from scratch and connecting to various databases like PostgreSQL, MySQL, PlanetScale, SQL Server, and CockroachDB.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-cockroachdb

LANGUAGE: typescript
CODE:
```
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-postgresql
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-prismaPostgres
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-mysql
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-planetscale
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-sqlserver
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-cockroachdb
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-typescript-cockroachdb
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-typescript-mysql
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-typescript-planetscale
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-typescript-postgresql
```

----------------------------------------

TITLE: Prisma Client Setup and Configuration
DESCRIPTION: Guides on setting up Prisma Client for Node.js and TypeScript projects. Covers installation, generating the client, and basic configuration options for connecting to your database.

SOURCE: https://www.prisma.io/docs/orm/reference/preview-features/client-preview-features

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init
npx prisma generate
```

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()
```

----------------------------------------

TITLE: Use Prisma Optimize to Generate Insights
DESCRIPTION: This snippet illustrates how to use the extended Prisma Client to generate insights from your database. It shows a basic example of calling an Optimize method.

SOURCE: https://www.prisma.io/docs/optimize/getting-started

LANGUAGE: typescript
CODE:
```
async function generateInsights() {
  const insights = await prismaWithOptimize.generateInsights({
    // Add your query parameters here
  })
  console.log(insights)
}

generateInsights()
```

----------------------------------------

TITLE: Prisma Community Links
DESCRIPTION: Provides direct links to Prisma's community platforms for engagement and support. Includes social media, Discord, YouTube, and GitHub.

SOURCE: https://www.prisma.io/docs/getting-started/quickstart-prismaPostgres

LANGUAGE: en
CODE:
```
Follow us on X: https://pris.ly/x?utm_source=docs&utm_medium=generated_text_cta
Join our Discord: https://pris.ly/discord?utm_source=docs&utm_medium=generated_text_cta
Subscribe on YouTube: https://pris.ly/youtube?utm_source=docs&utm_medium=generated_text_cta
Engage on GitHub: https://pris.ly/github?utm_source=docs&utm_medium=generated_text_cta
```

----------------------------------------

TITLE: Launch Prisma Studio
DESCRIPTION: Command to launch Prisma Studio, a GUI for viewing and editing database data. This is a core tool for interacting with your database when using Prisma ORM.

SOURCE: https://www.prisma.io/docs/getting-started/quickstart-sqlite

LANGUAGE: bash
CODE:
```
npx prisma studio
```

----------------------------------------

TITLE: Prisma Client Setup and Configuration
DESCRIPTION: Guides users on how to set up and configure the Prisma Client for their Node.js and TypeScript projects. Covers installation, client instantiation, and basic configuration options.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/deployment/edge/deploy-to-deno-deploy

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  // ... your prisma client queries
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Project Directory Management
DESCRIPTION: These commands demonstrate how to create a new project directory, move the generated Prisma configuration files (`.env` and `prisma/` folder) into it, and navigate into the project directory.

SOURCE: https://www.prisma.io/docs/getting-started/prisma-postgres/from-the-cli

LANGUAGE: bash
CODE:
```
mkdir hello-prisma
mv .env ./hello-prisma/
mv prisma ./hello-prisma/
cd ./hello-prisma
```

----------------------------------------

TITLE: Connect Database with Prisma
DESCRIPTION: Guides on connecting your database to Prisma. Covers setup for existing projects using TypeScript and SQL Server.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/install-prisma-client-node-postgresql

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for database connection steps.');
// Example: prisma.schema configuration would be detailed here.
```

----------------------------------------

TITLE: Prisma ORM Setup - Relational Databases (TypeScript)
DESCRIPTION: Guides on setting up Prisma ORM with relational databases using TypeScript. Covers starting from scratch and connecting to various database systems like PostgreSQL, MySQL, PlanetScale, SQL Server, and CockroachDB.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-postgresql

LANGUAGE: typescript
CODE:
```
npx prisma init --datasource-provider postgresql

```

LANGUAGE: typescript
CODE:
```
npx prisma migrate dev --name init

```

LANGUAGE: typescript
CODE:
```
npx prisma generate

```

----------------------------------------

TITLE: Connect to PlanetScale with TypeScript
DESCRIPTION: This guide explains how to connect your existing project to a PlanetScale database using Prisma with TypeScript. It covers the necessary steps to establish the database connection.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-postgresql

LANGUAGE: typescript
CODE:
```
npx prisma init --datasource-provider mysql

// prisma/schema.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}
```

----------------------------------------

TITLE: Prisma Documentation Navigation
DESCRIPTION: Links to various sections of the Prisma documentation, including getting started, database guides, ORM, and advanced features.

SOURCE: https://www.prisma.io/docs/platform

LANGUAGE: html
CODE:
```
<a href="https://www.prisma.io/docs/getting-started">Get Started</a>
<a href="https://www.prisma.io/docs/postgres">Postgres</a>
<a href="https://www.prisma.io/docs/orm">ORM</a>
<a href="https://www.prisma.io/docs/guides">Guides</a>
<a href="https://www.prisma.io/docs/platform">Platform</a>
<a href="https://www.prisma.io/docs/postgres/database/prisma-studio">StudioExplore and manipulate your data</a>
<a href="https://www.prisma.io/docs/optimize">OptimizeAI-driven query analysis</a>
<a href="https://www.prisma.io/docs/accelerate">AccelerateMake your database global</a>
```

----------------------------------------

TITLE: Prisma Migrate: Getting Started
DESCRIPTION: Provides instructions on how to initialize Prisma Migrate in your project and create your first migration.

SOURCE: https://www.prisma.io/docs/orm/prisma-schema/data-model/relations/one-to-many-relations

LANGUAGE: bash
CODE:
```
npx prisma init
npx prisma migrate dev --name init_schema
```

----------------------------------------

TITLE: Prisma CLI, Prisma Client, and Prisma Migrate Introduction
DESCRIPTION: An overview of the essential Prisma tools used for database interaction and management. This includes the command-line interface for schema management, the client for database queries, and the migration system.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-sqlserver

LANGUAGE: APIDOC
CODE:
```
Prisma Tools Overview:

Prisma CLI:
  - Purpose: Command-line interface for managing Prisma projects, including schema generation, migrations, and client generation.
  - Key Commands:
    - `prisma init`: Initializes a new Prisma project.
    - `prisma db push`: Pushes your schema to the database (for development).
    - `prisma migrate dev`: Creates and applies database migrations.
    - `prisma generate`: Generates the Prisma Client.

Prisma Client:
  - Purpose: Auto-generated and type-safe database client for Node.js and TypeScript.
  - Usage:
    - Instantiate the client: `const prisma = new PrismaClient()`
    - Perform queries: `await prisma.user.findMany()`
  - Features:
    - Type safety
    - Autocompletion
    - Batch requests

Prisma Migrate:
  - Purpose: Database schema migration system.
  - Features:
    - Declarative schema definition
    - Automatic migration file generation
    - Supports various database providers
  - Workflow:
    1. Define your schema in `schema.prisma`.
    2. Run `prisma migrate dev --name <migration-name>` to create and apply migrations.
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup and Management
DESCRIPTION: Documentation for setting up Prisma with PostgreSQL, including CLI operations, upgrading from early access versions, and importing data from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-typescript-cockroachdb

LANGUAGE: typescript
CODE:
```
// Example: Prisma CLI command to migrate database
// npx prisma migrate dev --name init

// Example: Prisma schema definition for PostgreSQL
// datasource db {
//   url      = env("DATABASE_URL")
//   provider = "postgresql"
// }

// model User {
//   id    Int    @id @default(autoincrement())
//   email String @unique
//   name  String?
// }
```

LANGUAGE: typescript
CODE:
```
// Example: Importing data from an existing MySQL database
// npx prisma db import --datasource-url "mysql://user:password@host:port/database" --schema "./prisma/schema.prisma"
```

----------------------------------------

TITLE: Prisma Client Initialization
DESCRIPTION: This example shows how to import and instantiate the Prisma Client in a TypeScript project, which is essential for interacting with your database after setup.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup
DESCRIPTION: Guides for setting up Prisma with PostgreSQL, including connecting from the CLI, upgrading from early access versions, and importing data from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/evolve-your-schema-node-cockroachdb

LANGUAGE: bash
CODE:
```
npx prisma db push
```

----------------------------------------

TITLE: Connect Database with Node.js
DESCRIPTION: Guides on connecting to various relational databases using Node.js with Prisma. This includes setup instructions and connection examples for PostgreSQL, MySQL, CockroachDB, PlanetScale, and SQL Server.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-node-cockroachdb

LANGUAGE: javascript
CODE:
```
// Example for connecting to PostgreSQL with Node.js
// prisma/schema.prisma
// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// Example for connecting to MySQL with Node.js
// prisma/schema.prisma
// datasource db {
//   provider = "mysql"
//   url      = env("DATABASE_URL")
// }

// Example for connecting to CockroachDB with Node.js
// prisma/schema.prisma
// datasource db {
//   provider = "cockroachdb"
//   url      = env("DATABASE_URL")
// }

// Example for connecting to PlanetScale with Node.js
// prisma/schema.prisma
// datasource db {
//   provider = "mysql"
//   url      = env("DATABASE_URL")
// }

// Example for connecting to SQL Server with Node.js
// prisma/schema.prisma
// datasource db {
//   provider = "sqlserver"
//   url      = env("DATABASE_URL")
// }
```

----------------------------------------

TITLE: Initialize Project and Install Dependencies
DESCRIPTION: Commands to create a project directory, initialize a TypeScript project using npm, and install Prisma CLI and related packages as development dependencies.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/mongodb-typescript-mongodb

LANGUAGE: bash
CODE:
```
mkdir hello-prisma
cd hello-prisma
npm init -y
npm install prisma typescript tsx @types/node --save-dev
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup
DESCRIPTION: Guides for setting up Prisma with PostgreSQL, including connecting from the CLI, upgrading from early access versions, and importing data from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-node-cockroachdb

LANGUAGE: bash
CODE:
```
npx prisma db push
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup
DESCRIPTION: Guides for setting up Prisma with PostgreSQL, including connecting from the CLI, upgrading from early access versions, and importing data from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-typescript-mysql

LANGUAGE: bash
CODE:
```
npx prisma db push
```

----------------------------------------

TITLE: Connect to MySQL with TypeScript
DESCRIPTION: This guide explains how to connect your existing project to a MySQL database using Prisma with TypeScript. It covers the necessary steps to establish the database connection.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-postgresql

LANGUAGE: typescript
CODE:
```
npx prisma init --datasource-provider mysql

// prisma/schema.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}
```

----------------------------------------

TITLE: Prisma Client Setup and Configuration
DESCRIPTION: Guides on setting up and configuring Prisma Client for your Node.js or TypeScript project. Covers installation, creating a Prisma Client instance, and basic configuration options.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/deployment/serverless/deploy-to-vercel

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  // ... your prisma client queries
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Web Framework Guides
DESCRIPTION: Guides on integrating Prisma with popular web frameworks such as Astro, Next.js, Nuxt, React Router 7, SolidStart, SvelteKit, TanStack Start, and Turborepo.

SOURCE: https://www.prisma.io/docs/guides

LANGUAGE: en
CODE:
```
Astro
Next.js
Nuxt
React Router 7
SolidStart
SvelteKit
TanStack Start
Turborepo
```

----------------------------------------

TITLE: Prisma MongoDB Setup (TypeScript)
DESCRIPTION: A guide for setting up Prisma with MongoDB for a TypeScript project, aiming for a quick 15-minute setup.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/introspection-typescript-planetscale

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider mongodb
```

----------------------------------------

TITLE: Install Prisma Client (Node.js)
DESCRIPTION: Instructions for installing Prisma Client, the type-safe database client for Node.js applications.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-node-cockroachdb

LANGUAGE: node
CODE:
```
npm install prisma --save-dev
npx prisma generate

// Example usage in Node.js:
const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

async function main() {
  const users = await prisma.user.findMany()
  console.log(users)
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Install Prisma Client for MySQL (Node.js)
DESCRIPTION: This guide details the steps to install Prisma Client for MySQL using Node.js. It covers setting up your project and connecting to the database.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-typescript-sqlserver

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider mysql
```

----------------------------------------

TITLE: Connect to MySQL with Node.js
DESCRIPTION: This guide explains how to connect your existing project to a MySQL database using Prisma with Node.js. It covers the necessary steps to establish the database connection.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-postgresql

LANGUAGE: javascript
CODE:
```
npx prisma init --datasource-provider mysql

// prisma/schema.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}
```

----------------------------------------

TITLE: Connect to MySQL Database (TypeScript)
DESCRIPTION: This guide details how to connect a TypeScript project to a MySQL database using Prisma, covering the configuration required for the database connection.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/baseline-your-database-node-postgresql

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for connection string examples.');
// Example: DATABASE_URL=mysql://user:password@host:port/database
```

----------------------------------------

TITLE: Applying Prisma Accelerate with Prisma Optimize
DESCRIPTION: Demonstrates the correct order for applying the Prisma Optimize extension before the Accelerate extension to leverage both functionalities effectively.

SOURCE: https://www.prisma.io/docs/accelerate/getting-started

LANGUAGE: javascript
CODE:
```
const prisma =new PrismaClient().$extends(withOptimize()).$extends(withAccelerate())
```

----------------------------------------

TITLE: Evolve Your Schema (TypeScript)
DESCRIPTION: This guide covers evolving your database schema with Prisma in a TypeScript project. It includes steps for CockroachDB, MySQL, PostgreSQL, and SQL Server.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/evolve-your-schema-typescript-sqlserver

LANGUAGE: bash
CODE:
```
npx prisma migrate dev --name init
```

----------------------------------------

TITLE: Prisma Product Offerings
DESCRIPTION: Links to various Prisma products and services, including ORM, Studio, Optimize, Accelerate, Postgres, pricing, changelog, and data platform status.

SOURCE: https://www.prisma.io/docs/guides

LANGUAGE: markdown
CODE:
```
Product
  * [ORM](https://www.prisma.io/orm)
  * [Studio](https://www.prisma.io/studio)
  * [Optimize](https://www.prisma.io/optimize)
  * [Accelerate](https://www.prisma.io/accelerate)
  * [Postgres](https://www.prisma.io/postgres)
  * [Pricing](https://www.prisma.io/pricing)
  * [Changelog](https://www.prisma.io/changelog)
  * [Data Platform status ↗](https://www.prisma-status.com/)
```

----------------------------------------

TITLE: Prisma.io Navigation Links
DESCRIPTION: Navigation links for the Prisma.io documentation, including sections for Get Started, Postgres, ORM, Guides, Studio, Optimize, and Accelerate.

SOURCE: https://www.prisma.io/docs/postgres/query-optimization/recommendations/queries-on-unindexed-columns

LANGUAGE: text
CODE:
```
[Get Started](https://www.prisma.io/docs/getting-started)[Postgres](https://www.prisma.io/docs/postgres)[ORM](https://www.prisma.io/docs/orm)[Guides](https://www.prisma.io/docs/guides)
[More](https://www.prisma.io/docs/postgres/query-optimization/recommendations/queries-on-unindexed-columns)
  * [StudioExplore and manipulate your data](https://www.prisma.io/docs/postgres/database/prisma-studio)
  * [OptimizeAI-driven query analysis](https://www.prisma.io/docs/optimize)
  * [AccelerateMake your database global](https://www.prisma.io/docs/accelerate)
```

----------------------------------------

TITLE: Adding Prisma to an Existing Project
DESCRIPTION: Instructions on how to integrate Prisma into an existing project.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/using-prisma-migrate-node-cockroachdb

LANGUAGE: bash
CODE:
```
# See: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project
```

----------------------------------------

TITLE: Prisma Client Setup and Configuration
DESCRIPTION: Guides on setting up and configuring Prisma Client in your project.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/deployment/deploy-database-changes-with-prisma-migrate

LANGUAGE: javascript
CODE:
```
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  // Example query
  const users = await prisma.user.findMany()
  console.log(users)
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Prisma Client Setup and Configuration
DESCRIPTION: Guides on setting up and configuring Prisma Client for your Node.js or TypeScript project. Covers installation, generating the client, and basic configuration options.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/special-fields-and-types

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init
```

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()
```

----------------------------------------

TITLE: Connect to Relational Databases (Node.js)
DESCRIPTION: This guide explains how to establish a database connection for Node.js applications using Prisma. It covers connection strings and configurations for various database systems.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/evolve-your-schema-typescript-sqlserver

LANGUAGE: javascript
CODE:
```
// Example for PostgreSQL
// DATABASE_URL="postgresql://user:password@host:port/database?schema=public"

// Example for MySQL
// DATABASE_URL="mysql://user:password@host:port/database"

// Example for SQL Server
// DATABASE_URL="sqlserver://user:password@host:port;database=database;schema=schema"

// Example for CockroachDB
// DATABASE_URL="postgresql://user:password@host:port/database?sslmode=verify-full"

// Example for PlanetScale
// DATABASE_URL="mysql://user:password@host:port/database"
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup
DESCRIPTION: Documentation for setting up Prisma with PostgreSQL, including CLI commands and importing from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/install-prisma-client-node-cockroachdb

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider postgresql
```

LANGUAGE: bash
CODE:
```
npx prisma db push
```

LANGUAGE: bash
CODE:
```
npx prisma db pull
```

----------------------------------------

TITLE: Connect to PostgreSQL with TypeScript
DESCRIPTION: This guide explains how to connect your existing project to a PostgreSQL database using Prisma with TypeScript. It covers the necessary steps to establish the database connection.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-postgresql

LANGUAGE: typescript
CODE:
```
npx prisma init --datasource-provider postgresql

// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}
```

----------------------------------------

TITLE: Connect to PlanetScale Database (TypeScript)
DESCRIPTION: This guide explains how to connect a TypeScript project to a PlanetScale database using Prisma, including the necessary configuration for the database connection.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/baseline-your-database-node-postgresql

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for connection string examples.');
// Example: DATABASE_URL=mysql://user:password@host:port/database
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup
DESCRIPTION: Guides for setting up Prisma with PostgreSQL, including connecting from the CLI, upgrading from early access versions, and importing data from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-typescript-mysql

LANGUAGE: bash
CODE:
```
npx prisma db push
```

----------------------------------------

TITLE: Connect to SQL Server (TypeScript)
DESCRIPTION: This example shows the steps to connect to a SQL Server database from a TypeScript project using Prisma Client. It covers installing Prisma, initializing the project for SQL Server, and installing the Prisma Client package.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-node-cockroachdb

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider sqlserver
npm install @prisma/client
```

----------------------------------------

TITLE: Prisma ORM Setup - Relational Databases (Node.js)
DESCRIPTION: Guides for setting up Prisma ORM with relational databases using Node.js. Covers starting from scratch and connecting to various databases like PostgreSQL, MySQL, PlanetScale, SQL Server, and CockroachDB.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-cockroachdb

LANGUAGE: node
CODE:
```
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-postgresql
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-mysql
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-planetscale
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-sqlserver
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-cockroachdb
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-node-cockroachdb
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-node-mysql
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-node-planetscale
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-node-postgresql
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-node-sqlserver
```

----------------------------------------

TITLE: Install and Initialize Prisma ORM
DESCRIPTION: Steps to install and initialize Prisma ORM in a project, including generating the Prisma Client and running migrations.

SOURCE: https://www.prisma.io/docs/guides/data-dog

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init
```

----------------------------------------

TITLE: MongoDB Setup for Existing Projects (TypeScript)
DESCRIPTION: Guides on setting up Prisma with an existing MongoDB project using TypeScript. Covers connecting the database, introspection, installing Prisma Client, and querying.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/mongodb/introspection-typescript-mongodb

LANGUAGE: typescript
CODE:
```
npx prisma db push

// Example query
const users = await prisma.user.findMany();
```

----------------------------------------

TITLE: Connect to PlanetScale with Node.js
DESCRIPTION: This guide explains how to connect your existing project to a PlanetScale database using Prisma with Node.js. It covers the necessary steps to establish the database connection.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-postgresql

LANGUAGE: javascript
CODE:
```
npx prisma init --datasource-provider mysql

// prisma/schema.prisma

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}
```

----------------------------------------

TITLE: Connect to PostgreSQL with Node.js
DESCRIPTION: This guide explains how to connect your existing project to a PostgreSQL database using Prisma with Node.js. It covers the necessary steps to establish the database connection.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-postgresql

LANGUAGE: javascript
CODE:
```
npx prisma init --datasource-provider postgresql

// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}
```

----------------------------------------

TITLE: MongoDB Setup for Existing Projects (Node.js)
DESCRIPTION: Guides on setting up Prisma with MongoDB in an existing Node.js project. Covers connecting the database, introspection, installing Prisma Client, and querying the database.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/mongodb/introspection-node-mongodb

LANGUAGE: bash
CODE:
```
npx prisma db push
npx prisma generate
```

----------------------------------------

TITLE: Initialize Prisma ORM with SQLite
DESCRIPTION: Initializes Prisma ORM for the project, configuring it to use an SQLite database. This command creates the `prisma` directory with `schema.prisma` and sets up the datasource provider.

SOURCE: https://www.prisma.io/docs/getting-started/quickstart-sqlite

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider sqlite --output ../generated/prisma  
```

----------------------------------------

TITLE: Prisma ORM Setup for Relational Databases (TypeScript)
DESCRIPTION: Guides on setting up Prisma ORM with relational databases using TypeScript. Covers starting from scratch and connecting to various database systems like PostgreSQL, MySQL, PlanetScale, SQL Server, and CockroachDB.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-mysql

LANGUAGE: typescript
CODE:
```
npx prisma init --datasource-provider postgresql

```

LANGUAGE: typescript
CODE:
```
npx prisma migrate dev --name init

```

LANGUAGE: typescript
CODE:
```
npx prisma generate

```

----------------------------------------

TITLE: Prisma ORM Setup - Relational Databases (Node.js)
DESCRIPTION: Guides on setting up Prisma ORM with relational databases using Node.js. Covers starting from scratch and connecting to various database systems like PostgreSQL, MySQL, PlanetScale, SQL Server, and CockroachDB.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-postgresql

LANGUAGE: javascript
CODE:
```
npx prisma init --datasource-provider postgresql

```

LANGUAGE: javascript
CODE:
```
npx prisma migrate dev --name init

```

LANGUAGE: javascript
CODE:
```
npx prisma generate

```

----------------------------------------

TITLE: TypeScript Caching Example
DESCRIPTION: Example TypeScript code showcasing Prisma Accelerate's caching capabilities with Stale-While-Revalidate (SWR) and Time-To-Live (TTL) configurations.

SOURCE: https://www.prisma.io/docs/getting-started/quickstart-prismaPostgres

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient({
  // Configure Prisma Accelerate caching
  datasources: {
    db: {
      url: process.env.DATABASE_URL,
    },
  },
  // Example: Enable SWR with a 1-minute stale-while-revalidate period
  // prismaAccelerate: {
  //   swr: '1m',
  // },
  // Example: Enable TTL with a 5-minute time-to-live
  // prismaAccelerate: {
  //   ttl: '5m',
  // },
})

async function main() {
  const startTime = Date.now()

  // Example query that might benefit from caching
  const posts = await prisma.post.findMany({
    include: {
      author: true,
    },
  })

  const endTime = Date.now()
  console.log(`The query took ${(endTime - startTime)}ms.`) // Example output: The query took 2009.2467149999998ms.

  // Run again to observe caching effect
  const startTime2 = Date.now()
  const posts2 = await prisma.post.findMany({
    include: {
      author: true,
    },
  })
  const endTime2 = Date.now()
  console.log(`The query took ${(endTime2 - startTime2)}ms.`) // Example output: The query took 300.5655280000001ms.
}

main()
  .catch((e) => {
    console.error(e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Prisma Client Setup and Configuration
DESCRIPTION: Guides on setting up and configuring Prisma Client for your project, including database connection strings and client instantiation.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/deployment/traditional/deploy-to-render

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  // ... your prisma client queries
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Prisma Client Setup and Configuration
DESCRIPTION: Guides on how to set up and configure Prisma Client in your project, including connection strings and environment variables.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/using-raw-sql/safeql

LANGUAGE: APIDOC
CODE:
```
Prisma Client Configuration:

Connection URL:
  The DATABASE_URL environment variable specifies the database connection string.
  Example for PostgreSQL:
    DATABASE_URL="postgresql://user:password@host:port/database?schema=public"
  Example for MySQL:
    DATABASE_URL="mysql://user:password@host:port/database"

PrismaClientOptions:
  The PrismaClient constructor accepts an optional options object.
  options.datasources?: DatasourceOptions
    Specifies alternative datasource configurations.
  options.log?: LogLevel[] | Array<'query' | 'info' | 'warn' | 'error'>
    Configures logging levels for Prisma Client.
  options.errorFormat?: 'pretty' | 'colorless' | 'minimal'
    Sets the format for error messages.

// Example:
// import { PrismaClient } from '@prisma/client'
// const prisma = new PrismaClient({
//   log: ['query', 'info'],
// })

// Related Configuration:
// Environment Variables: DATABASE_URL, PRISMA_CLIENT_ENGINE_TYPE, etc.
// prisma.schema file: Defines the datasource and generator.
```

----------------------------------------

TITLE: Connect to MySQL with Node.js
DESCRIPTION: This guide explains how to connect your existing project to a MySQL database using Prisma with Node.js. It covers the necessary steps to configure your database connection.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-cockroachdb

LANGUAGE: javascript
CODE:
```
npx prisma db push

// Example Prisma schema
// datasource db {
//   url      = env("DATABASE_URL")
//   provider = "mysql"
// }
```

----------------------------------------

TITLE: Connect to PlanetScale with TypeScript
DESCRIPTION: This guide explains how to connect your existing project to a PlanetScale database using Prisma with TypeScript. It covers the necessary steps to configure your database connection.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-cockroachdb

LANGUAGE: typescript
CODE:
```
npx prisma db push

// Example Prisma schema
// datasource db {
//   url      = env("DATABASE_URL")
//   provider = "mysql" // PlanetScale uses the MySQL provider
// }
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup
DESCRIPTION: Documentation for setting up Prisma with PostgreSQL, including CLI commands and importing from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-node-postgresql

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider postgresql
```

LANGUAGE: bash
CODE:
```
npx prisma db push
```

LANGUAGE: bash
CODE:
```
npx prisma db pull
```

----------------------------------------

TITLE: Prisma ORM Setup for Relational Databases (Node.js)
DESCRIPTION: Guides on setting up Prisma ORM with various relational databases using Node.js. Covers connecting the database and initial project setup.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/using-prisma-migrate-typescript-prismaPostgres

LANGUAGE: node
CODE:
```
// Example for connecting to PostgreSQL
// prisma/schema.prisma

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// generator client {
//   provider = "prisma-client-js"
// }
```

----------------------------------------

TITLE: Prisma CLI, Client, and Migrate Introduction
DESCRIPTION: This section introduces key Prisma tools: Prisma CLI for database management, Prisma Client for type-safe database access, and Prisma Migrate for schema evolution. It's essential for setting up new projects.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-mysql

LANGUAGE: APIDOC
CODE:
```
Prisma Tools Overview:

Prisma CLI:
  - Purpose: Database management, schema migrations, client generation.
  - Usage: Command-line interface for interacting with Prisma.

Prisma Client:
  - Purpose: Type-safe database access in your application.
  - Features: Auto-generated and type-safe database client.
  - Integration: Used within Node.js and TypeScript applications.

Prisma Migrate:
  - Purpose: Database schema migration management.
  - Workflow: Define schema changes, generate migration files, apply to database.
  - Benefits: Version control for database schema.
```

----------------------------------------

TITLE: Prisma Client Setup and Configuration
DESCRIPTION: Guides on how to set up and configure Prisma Client in your project, including environment variable management and connection string setup.

SOURCE: https://www.prisma.io/docs/orm/more/upgrade-guides/upgrading-versions/upgrading-to-prisma-6

LANGUAGE: APIDOC
CODE:
```
Prisma Client Setup:

1. Install Prisma Client:
   `npm install prisma --save-dev`
   `npm install @prisma/client`

2. Configure your database connection:
   Create a `.env` file in your project root:
   ```
   DATABASE_URL="postgresql://user:password@host:port/database?schema=public"
   ```
   Replace placeholders with your actual database credentials.

3. Generate Prisma Client:
   Run `npx prisma generate` to generate the Prisma Client based on your schema.prisma file.

4. Instantiate Prisma Client in your application:
   ```typescript
   import { PrismaClient } from '@prisma/client'
   const prisma = new PrismaClient()
   ```

Configuration Options (PrismaClientOptions):
- `datasources`: Allows overriding the default datasource URL.
- `log`: Enables logging of database queries, information, warnings, or errors.
- `errorFormat`: Sets the format for error messages ('pretty', 'minimal', 'colorless').
```

----------------------------------------

TITLE: Prisma Client Setup & Configuration
DESCRIPTION: Guides users through the process of setting up and configuring Prisma Client in their projects.

SOURCE: https://www.prisma.io/docs/orm/more/upgrade-guides/upgrade-from-prisma-1/upgrading-prisma-binding-to-sdl-first

LANGUAGE: APIDOC
CODE:
```
Prisma Client Setup & Configuration:
  Installation steps using npm or yarn
  Generating the Prisma Client
  Basic configuration options
```

----------------------------------------

TITLE: Prisma MongoDB Setup (TypeScript)
DESCRIPTION: A guide for setting up Prisma with MongoDB for a TypeScript project, aiming for a quick 15-minute setup.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-node-cockroachdb

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider mongodb
```

----------------------------------------

TITLE: MongoDB Setup for Existing Projects (Node.js)
DESCRIPTION: Guides on setting up Prisma with an existing MongoDB project using Node.js. Covers connecting the database, introspection, installing Prisma Client, and querying.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/mongodb/introspection-typescript-mongodb

LANGUAGE: javascript
CODE:
```
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function main() {
  const users = await prisma.user.findMany();
  console.log(users);
}
main();
```

----------------------------------------

TITLE: Connect to MySQL Database (Node.js)
DESCRIPTION: This guide explains how to connect a Node.js project to a MySQL database using Prisma, including the necessary configuration steps for the database connection.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/baseline-your-database-node-postgresql

LANGUAGE: node
CODE:
```
console.log('Refer to Prisma documentation for connection string examples.');
// Example: DATABASE_URL=mysql://user:password@host:port/database
```

----------------------------------------

TITLE: Prisma with PostgreSQL
DESCRIPTION: Guides for setting up and using Prisma with PostgreSQL, including CLI setup, upgrades, and importing data.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/using-prisma-migrate-node-sqlserver

LANGUAGE: typescript
CODE:
```
// Setup from CLI: https://www.prisma.io/docs/getting-started/prisma-postgres/from-the-cli
```

LANGUAGE: typescript
CODE:
```
// Upgrade from Early Access: https://www.prisma.io/docs/getting-started/prisma-postgres/upgrade-from-early-access
```

LANGUAGE: typescript
CODE:
```
// Import from existing PostgreSQL: https://www.prisma.io/docs/getting-started/prisma-postgres/import-from-existing-database-postgresql
```

LANGUAGE: typescript
CODE:
```
// Import from existing MySQL: https://www.prisma.io/docs/getting-started/prisma-postgres/import-from-existing-database-mysql
```

----------------------------------------

TITLE: Install Prisma Client for PostgreSQL (Node.js)
DESCRIPTION: This guide details the steps to install Prisma Client for PostgreSQL using Node.js. It covers setting up your project and connecting to the database.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-typescript-sqlserver

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider postgresql
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup
DESCRIPTION: Guides for setting up Prisma with PostgreSQL, including connecting from the CLI, upgrading from early access versions, and importing data from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-typescript-cockroachdb

LANGUAGE: bash
CODE:
```
npx prisma db push
```

----------------------------------------

TITLE: Connect to SQL Server with TypeScript
DESCRIPTION: This guide explains how to connect your existing project to a SQL Server database using Prisma with TypeScript. It covers the necessary steps to establish the database connection.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-postgresql

LANGUAGE: typescript
CODE:
```
npx prisma init --datasource-provider sqlserver

// prisma/schema.prisma

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}
```

----------------------------------------

TITLE: Prisma Postgres Setup with TypeScript
DESCRIPTION: This guide details the process of creating a new TypeScript project from scratch using Prisma with a Postgres database. It covers setting up the project, creating the database, performing schema migrations, executing queries using Prisma ORM, and configuring connection pooling and caching with Prisma Accelerate.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-prismaPostgres

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main() {
  // ... your Prisma queries here
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

LANGUAGE: prisma
CODE:
```
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup and Management
DESCRIPTION: Documentation for setting up Prisma with PostgreSQL, including CLI operations, upgrading from early access versions, and importing data from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-node-cockroachdb

LANGUAGE: typescript
CODE:
```
// Example: Prisma CLI command to migrate database
// npx prisma migrate dev --name init

// Example: Prisma schema definition for PostgreSQL
// datasource db {
//   url      = env("DATABASE_URL")
//   provider = "postgresql"
// }

// model User {
//   id    Int    @id @default(autoincrement())
//   email String @unique
//   name  String?
// }
```

LANGUAGE: typescript
CODE:
```
// Example: Importing data from an existing MySQL database
// npx prisma db import --datasource-url "mysql://user:password@host:port/database" --schema "./prisma/schema.prisma"
```

----------------------------------------

TITLE: MongoDB Setup for Existing Projects (TypeScript)
DESCRIPTION: Guides on setting up Prisma with MongoDB in an existing TypeScript project. Covers connecting the database, introspection, installing Prisma Client, and querying the database.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/mongodb/introspection-node-mongodb

LANGUAGE: bash
CODE:
```
npx prisma db push
npx prisma generate
```

----------------------------------------

TITLE: Prisma Client Setup and Configuration
DESCRIPTION: Guides on setting up and configuring Prisma Client for your Node.js or TypeScript project. Covers installation, creating a Prisma Client instance, and basic configuration options.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/deployment/edge/deploy-to-cloudflare

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  // ... your prisma client queries
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup (CLI)
DESCRIPTION: Steps to set up Prisma with a PostgreSQL database using the command-line interface (CLI). This includes initializing Prisma and pushing the schema to the database.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-node-planetscale

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider postgresql
npx prisma migrate dev --name init
npx prisma db push
```

----------------------------------------

TITLE: Connect to SQL Server Database (Node.js)
DESCRIPTION: This guide provides steps for connecting a Node.js project to a SQL Server database using Prisma, covering the configuration of the database connection.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/baseline-your-database-node-postgresql

LANGUAGE: node
CODE:
```
console.log('Refer to Prisma documentation for connection string examples.');
// Example: DATABASE_URL=sqlserver://host:port;database=database;user=user;password=password;
```

----------------------------------------

TITLE: Prisma Client Setup and Configuration
DESCRIPTION: Instructions for setting up and configuring Prisma Client in your project. Covers installation, database connection, and basic client instantiation.

SOURCE: https://www.prisma.io/docs/orm/more/upgrade-guides/upgrading-versions/upgrading-to-prisma-4

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npm install @prisma/client
```

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  // Example: Create a new user
  const newUser = await prisma.user.create({
    data: {
      email: 'test@example.com',
      name: 'Test User',
    },
  })
  console.log('Created new user:', newUser)

  // Example: Find all users
  const users = await prisma.user.findMany()
  console.log('All users:', users)
}

main()
  .catch((e) => {
    console.error(e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Connect to PostgreSQL with Node.js
DESCRIPTION: This guide explains how to connect your existing project to a PostgreSQL database using Prisma with Node.js. It covers the necessary steps to configure your database connection.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-cockroachdb

LANGUAGE: javascript
CODE:
```
npx prisma db push

// Example Prisma schema
// datasource db {
//   url      = env("DATABASE_URL")
//   provider = "postgresql"
// }
```

----------------------------------------

TITLE: Connect to MySQL with TypeScript
DESCRIPTION: This guide explains how to connect your existing project to a MySQL database using Prisma with TypeScript. It covers the necessary steps to configure your database connection.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-cockroachdb

LANGUAGE: typescript
CODE:
```
npx prisma db push

// Example Prisma schema
// datasource db {
//   url      = env("DATABASE_URL")
//   provider = "mysql"
// }
```

----------------------------------------

TITLE: Install Prisma Client (TypeScript)
DESCRIPTION: Guides on installing Prisma Client for TypeScript projects, ensuring type safety for database operations across various databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-typescript-planetscale

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for Prisma Client installation.');
// Example: npm install @prisma/client or yarn add @prisma/client would be detailed here.
```

----------------------------------------

TITLE: Create Project Directory and Navigate
DESCRIPTION: Creates a new project directory named 'hello-prisma' and changes the current directory to it.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-prismaPostgres

LANGUAGE: bash
CODE:
```
mkdir hello-prisma
cd hello-prisma
```

----------------------------------------

TITLE: Connect to CockroachDB Database (TypeScript)
DESCRIPTION: This guide explains how to connect a TypeScript project to a CockroachDB database using Prisma, covering the configuration required for the database connection.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/baseline-your-database-node-postgresql

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for connection string examples.');
// Example: DATABASE_URL=postgresql://user:password@host:port/database?sslmode=verify-full
```

----------------------------------------

TITLE: Prisma Client Setup and Configuration
DESCRIPTION: Guides on setting up and configuring Prisma Client, including generating the client, instantiating it, managing database connections, and customizing model names.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration

LANGUAGE: javascript
CODE:
```
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()
```

----------------------------------------

TITLE: Prisma.io Navigation Links
DESCRIPTION: Provides navigation links to different sections of the Prisma.io documentation, including getting started, specific databases, ORM features, and guides.

SOURCE: https://www.prisma.io/docs/guides/github-actions

LANGUAGE: html
CODE:
```
[Get Started](https://www.prisma.io/docs/getting-started)
[Postgres](https://www.prisma.io/docs/postgres)
[ORM](https://www.prisma.io/docs/orm)
[Guides](https://www.prisma.io/docs/guides)
[More](https://www.prisma.io/docs/guides/github-actions)
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup and Management
DESCRIPTION: Documentation for setting up Prisma with PostgreSQL, including CLI operations, upgrading from early access versions, and importing data from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-typescript-mysql

LANGUAGE: typescript
CODE:
```
// Example: Prisma CLI command to migrate database
// npx prisma migrate dev --name init

// Example: Prisma schema definition for PostgreSQL
// datasource db {
//   url      = env("DATABASE_URL")
//   provider = "postgresql"
// }

// model User {
//   id    Int    @id @default(autoincrement())
//   email String @unique
//   name  String?
// }
```

LANGUAGE: typescript
CODE:
```
// Example: Importing data from an existing MySQL database
// npx prisma db import --datasource-url "mysql://user:password@host:port/database" --schema "./prisma/schema.prisma"
```

----------------------------------------

TITLE: Connect to PostgreSQL with TypeScript
DESCRIPTION: This guide explains how to connect your existing project to a PostgreSQL database using Prisma with TypeScript. It covers the necessary steps to configure your database connection.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-cockroachdb

LANGUAGE: typescript
CODE:
```
npx prisma db push

// Example Prisma schema
// datasource db {
//   url      = env("DATABASE_URL")
//   provider = "postgresql"
// }
```

----------------------------------------

TITLE: Connect to PlanetScale with Node.js
DESCRIPTION: This guide explains how to connect your existing project to a PlanetScale database using Prisma with Node.js. It covers the necessary steps to configure your database connection.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-cockroachdb

LANGUAGE: javascript
CODE:
```
npx prisma db push

// Example Prisma schema
// datasource db {
//   url      = env("DATABASE_URL")
//   provider = "mysql" // PlanetScale uses the MySQL provider
// }
```

----------------------------------------

TITLE: Connect Database with TypeScript
DESCRIPTION: Guides on connecting to various relational databases using TypeScript with Prisma. This includes setup instructions and connection examples for PostgreSQL, MySQL, CockroachDB, PlanetScale, and SQL Server.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-node-cockroachdb

LANGUAGE: typescript
CODE:
```
// Example for connecting to PostgreSQL with TypeScript
// prisma/schema.prisma
// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// Example for connecting to MySQL with TypeScript
// prisma/schema.prisma
// datasource db {
//   provider = "mysql"
//   url      = env("DATABASE_URL")
// }

// Example for connecting to CockroachDB with TypeScript
// prisma/schema.prisma
// datasource db {
//   provider = "cockroachdb"
//   url      = env("DATABASE_URL")
// }

// Example for connecting to PlanetScale with TypeScript
// prisma/schema.prisma
// datasource db {
//   provider = "mysql"
//   url      = env("DATABASE_URL")
// }

// Example for connecting to SQL Server with TypeScript
// prisma/schema.prisma
// datasource db {
//   provider = "sqlserver"
//   url      = env("DATABASE_URL")
// }
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup and Management
DESCRIPTION: Documentation for setting up Prisma with PostgreSQL, including CLI operations, upgrading from early access versions, and importing data from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-node-planetscale

LANGUAGE: typescript
CODE:
```
// Example: Prisma CLI command to migrate database
// npx prisma migrate dev --name init

// Example: Prisma schema definition for PostgreSQL
// datasource db {
//   url      = env("DATABASE_URL")
//   provider = "postgresql"
// }

// model User {
//   id    Int    @id @default(autoincrement())
//   email String @unique
//   name  String?
// }
```

LANGUAGE: typescript
CODE:
```
// Example: Importing data from an existing MySQL database
// npx prisma db import --datasource-url "mysql://user:password@host:port/database" --schema "./prisma/schema.prisma"
```

----------------------------------------

TITLE: Prisma ORM Setup and Database Connection (Node.js)
DESCRIPTION: Guides users through setting up Prisma ORM for Node.js projects and connecting to different relational databases. It covers the initial project setup and the process of establishing a database connection.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-planetscale

LANGUAGE: javascript
CODE:
```
npx prisma init --datasource-provider postgresql

// Example connection string in schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// In your Node.js application:
// const { PrismaClient } = require('@prisma/client')
// const prisma = new PrismaClient()
```

LANGUAGE: javascript
CODE:
```
npx prisma init --datasource-provider mysql

// Example connection string in schema.prisma
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// In your Node.js application:
// const { PrismaClient } = require('@prisma/client')
// const prisma = new PrismaClient()
```

LANGUAGE: javascript
CODE:
```
npx prisma init --datasource-provider planetscale

// Example connection string in schema.prisma
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// In your Node.js application:
// const { PrismaClient } = require('@prisma/client')
// const prisma = new PrismaClient()
```

LANGUAGE: javascript
CODE:
```
npx prisma init --datasource-provider sqlserver

// Example connection string in schema.prisma
datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// In your Node.js application:
// const { PrismaClient } = require('@prisma/client')
// const prisma = new PrismaClient()
```

LANGUAGE: javascript
CODE:
```
npx prisma init --datasource-provider cockroachdb

// Example connection string in schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// In your Node.js application:
// const { PrismaClient } = require('@prisma/client')
// const prisma = new PrismaClient()
```

----------------------------------------

TITLE: Connect to SQL Server with TypeScript
DESCRIPTION: This guide explains how to connect your existing project to a SQL Server database using Prisma with TypeScript. It covers the necessary steps to configure your database connection.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-cockroachdb

LANGUAGE: typescript
CODE:
```
npx prisma db push

// Example Prisma schema
// datasource db {
//   url      = env("DATABASE_URL")
//   provider = "sqlserver"
// }
```

----------------------------------------

TITLE: Install Prisma Client for Existing Projects (Node.js/MySQL)
DESCRIPTION: This guide details the steps to integrate Prisma Client into an existing Node.js project using JavaScript and a MySQL database. It covers the necessary setup and configuration for a smooth integration.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/install-prisma-client-typescript-mysql

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider mysql
```

----------------------------------------

TITLE: Prisma Client Setup and Configuration
DESCRIPTION: Guides on setting up and configuring Prisma Client for your Node.js or TypeScript project. Covers installation, generating the client, and basic configuration options.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/special-fields-and-types/working-with-json-fields

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init
```

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()
```

----------------------------------------

TITLE: Prisma ORM Setup for Relational Databases (Node.js)
DESCRIPTION: Guides on setting up Prisma ORM with relational databases using Node.js. Covers starting from scratch and connecting to various database systems like PostgreSQL, MySQL, PlanetScale, SQL Server, and CockroachDB.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-mysql

LANGUAGE: node
CODE:
```
npx prisma init --datasource-provider mysql

```

LANGUAGE: node
CODE:
```
npx prisma migrate dev --name init

```

LANGUAGE: node
CODE:
```
npx prisma generate

```

----------------------------------------

TITLE: Prisma PostgreSQL Setup from CLI
DESCRIPTION: Guidance on setting up Prisma with PostgreSQL directly from the command line interface.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-node-mysql

LANGUAGE: cli
CODE:
```
npx prisma init --datasource-provider postgresql
npx prisma db push
```

----------------------------------------

TITLE: Connect to SQL Server with Node.js
DESCRIPTION: This guide explains how to connect your existing project to a SQL Server database using Prisma with Node.js. It covers the necessary steps to establish the database connection.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-postgresql

LANGUAGE: javascript
CODE:
```
npx prisma init --datasource-provider sqlserver

// prisma/schema.prisma

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup
DESCRIPTION: Documentation for setting up Prisma with PostgreSQL, including CLI commands and importing from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/install-prisma-client-node-mysql

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider postgresql
```

LANGUAGE: bash
CODE:
```
npx prisma db push
```

LANGUAGE: bash
CODE:
```
npx prisma db pull
```

----------------------------------------

TITLE: Connect to CockroachDB with Node.js
DESCRIPTION: This guide explains how to connect your existing project to a CockroachDB database using Prisma with Node.js. It covers the necessary steps to establish the database connection.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-postgresql

LANGUAGE: javascript
CODE:
```
npx prisma init --datasource-provider cockroachdb

// prisma/schema.prisma

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}
```

----------------------------------------

TITLE: Install Prisma Client (TypeScript)
DESCRIPTION: Guides on installing Prisma Client for TypeScript projects, ensuring type safety for database operations across various databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-node-postgresql

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for Prisma Client installation.');
// Example: npm install @prisma/client or yarn add @prisma/client would be detailed here.
```

----------------------------------------

TITLE: Connect to Relational Databases (Node.js)
DESCRIPTION: Guides on connecting to various relational databases using Node.js with Prisma. Covers setup from scratch and connection procedures.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/using-prisma-migrate-node-planetscale

LANGUAGE: node
CODE:
```
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-postgresql
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-mysql
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-planetscale
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-sqlserver
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-cockroachdb
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-node-cockroachdb
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-node-mysql
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-node-planetscale
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-node-postgresql
```

----------------------------------------

TITLE: Connect to PostgreSQL Database (Node.js)
DESCRIPTION: Instructions for connecting a Node.js application to a PostgreSQL database using Prisma. This involves configuring the database connection string within the Prisma setup.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/baseline-your-database-node-postgresql

LANGUAGE: node
CODE:
```
console.log('Refer to Prisma documentation for connection string examples.');
// Example: DATABASE_URL=postgresql://user:password@host:port/database
```

----------------------------------------

TITLE: Basic TypeScript Project Setup for Prisma Management API
DESCRIPTION: Demonstrates the initial setup for a TypeScript project to interact with the Prisma Management API. This includes setting up environment variables and basic script execution for API calls.

SOURCE: https://www.prisma.io/docs/guides/management-api-basic

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client';

// Assuming you have a PrismaClient instance configured for management API interactions
// const prisma = new PrismaClient();

async function main() {
  // Example: Fetching connection details for a project
  // const projects = await prisma.project.findMany();
  // console.log(projects);

  console.log('Prisma Management API setup complete. Ready to interact.');
}

main()
  .catch((e) => {
    console.error(e);
    process.exit(1);
  });

```

----------------------------------------

TITLE: Prisma PostgreSQL Setup
DESCRIPTION: Guides for setting up Prisma with PostgreSQL, including connecting from the CLI, upgrading from early access versions, and importing data from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-node-cockroachdb

LANGUAGE: bash
CODE:
```
npx prisma db push
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup
DESCRIPTION: Documentation for setting up Prisma with PostgreSQL, including CLI commands and importing from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-node-postgresql

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider postgresql
```

LANGUAGE: bash
CODE:
```
npx prisma db push
```

LANGUAGE: bash
CODE:
```
npx prisma db pull
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup
DESCRIPTION: Documentation for setting up Prisma with PostgreSQL, including CLI commands and importing from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/baseline-your-database-node-mysql

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider postgresql
```

LANGUAGE: bash
CODE:
```
npx prisma db push
```

LANGUAGE: bash
CODE:
```
npx prisma db pull
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup
DESCRIPTION: Documentation for setting up Prisma with PostgreSQL, including CLI commands and importing from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-node-mysql

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider postgresql
```

LANGUAGE: bash
CODE:
```
npx prisma db push
```

LANGUAGE: bash
CODE:
```
npx prisma db pull
```

----------------------------------------

TITLE: Install Prisma Client for CockroachDB (TypeScript)
DESCRIPTION: This guide details the steps to install Prisma Client for CockroachDB using TypeScript. It covers setting up your project and connecting to the database.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-typescript-sqlserver

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider cockroachdb
```

----------------------------------------

TITLE: React Router Starter Examples with Prisma Client
DESCRIPTION: Examples showcasing Prisma Client integration with React Router applications, including setups for Node.js runtime with Vite bundler and Cloudflare Workers.

SOURCE: https://www.prisma.io/docs/orm/prisma-schema/overview/generators

LANGUAGE: javascript
CODE:
```
react-router-starter-nodejs: https://github.com/prisma/prisma-examples/tree/latest/generator-prisma-client/react-router-starter-nodejs
react-router-starter-cloudflare-workerd: https://github.com/prisma/prisma-examples/tree/latest/generator-prisma-client/react-router-starter-cloudflare-workerd
```

----------------------------------------

TITLE: Connect to CockroachDB with TypeScript
DESCRIPTION: This guide explains how to connect your existing project to a CockroachDB database using Prisma with TypeScript. It covers the necessary steps to establish the database connection.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-postgresql

LANGUAGE: typescript
CODE:
```
npx prisma init --datasource-provider cockroachdb

// prisma/schema.prisma

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}
```

----------------------------------------

TITLE: Install Prisma Client (TypeScript)
DESCRIPTION: Guides on installing Prisma Client for TypeScript projects, ensuring type safety for database operations across various databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-typescript-postgresql

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for Prisma Client installation.');
// Example: npm install @prisma/client or yarn add @prisma/client would be detailed here.
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup
DESCRIPTION: Documentation for setting up Prisma with PostgreSQL, including CLI commands and importing from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-node-planetscale

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider postgresql
```

LANGUAGE: bash
CODE:
```
npx prisma db push
```

LANGUAGE: bash
CODE:
```
npx prisma db pull
```

----------------------------------------

TITLE: Connect to SQL Server with Node.js
DESCRIPTION: This guide explains how to connect your existing project to a SQL Server database using Prisma with Node.js. It covers the necessary steps to configure your database connection.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-cockroachdb

LANGUAGE: javascript
CODE:
```
npx prisma db push

// Example Prisma schema
// datasource db {
//   url      = env("DATABASE_URL")
//   provider = "sqlserver"
// }
```

----------------------------------------

TITLE: Install Prisma Client (TypeScript)
DESCRIPTION: Guides on installing Prisma Client for TypeScript projects, ensuring type safety for database operations across various databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-typescript-sqlserver

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for Prisma Client installation.');
// Example: npm install @prisma/client or yarn add @prisma/client would be detailed here.
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup and Management
DESCRIPTION: Documentation for setting up Prisma with PostgreSQL, including CLI operations, upgrading from early access versions, and importing data from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-typescript-postgresql

LANGUAGE: typescript
CODE:
```
// Example: Prisma CLI command to migrate database
// npx prisma migrate dev --name init

// Example: Prisma schema definition for PostgreSQL
// datasource db {
//   url      = env("DATABASE_URL")
//   provider = "postgresql"
// }

// model User {
//   id    Int    @id @default(autoincrement())
//   email String @unique
//   name  String?
// }
```

LANGUAGE: typescript
CODE:
```
// Example: Importing data from an existing MySQL database
// npx prisma db import --datasource-url "mysql://user:password@host:port/database" --schema "./prisma/schema.prisma"
```

----------------------------------------

TITLE: Connect to CockroachDB with TypeScript
DESCRIPTION: This guide explains how to connect your existing project to a CockroachDB database using Prisma with TypeScript. It covers the necessary steps to configure your database connection.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-cockroachdb

LANGUAGE: typescript
CODE:
```
npx prisma db push

// Example Prisma schema
// datasource db {
//   url      = env("DATABASE_URL")
//   provider = "cockroachdb"
// }
```

----------------------------------------

TITLE: Install Prisma Client Extension
DESCRIPTION: Installs the necessary Prisma Client extension for Prisma Optimize. This is a prerequisite for using Optimize's features.

SOURCE: https://www.prisma.io/docs/postgres/query-optimization/setup

LANGUAGE: bash
CODE:
```
npm install @prisma/client@latest
```

----------------------------------------

TITLE: Connect to CockroachDB with Node.js
DESCRIPTION: This guide explains how to connect your existing project to a CockroachDB database using Prisma with Node.js. It covers the necessary steps to configure your database connection.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-cockroachdb

LANGUAGE: javascript
CODE:
```
npx prisma db push

// Example Prisma schema
// datasource db {
//   url      = env("DATABASE_URL")
//   provider = "cockroachdb"
// }
```

----------------------------------------

TITLE: Configure Environment Variables and Install Dotenv
DESCRIPTION: Steps to create a .env file, install the dotenv library for loading environment variables, and add the Prisma service token.

SOURCE: https://www.prisma.io/docs/guides/management-api-basic

LANGUAGE: bash
CODE:
```
touch .env
npm install dotenv
PRISMA_SERVICE_TOKEN="ey..."
```

----------------------------------------

TITLE: Prisma CLI for PostgreSQL Setup
DESCRIPTION: Instructions on setting up Prisma with PostgreSQL using the command-line interface (CLI). This typically involves initializing Prisma and generating the client.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/querying-the-database-typescript-prismaPostgres

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider postgresql
npx prisma generate
```

----------------------------------------

TITLE: Install Prisma Client (TypeScript)
DESCRIPTION: Guides on installing Prisma Client for TypeScript projects, ensuring type safety for database operations across various databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/install-prisma-client-node-postgresql

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for Prisma Client installation.');
// Example: npm install @prisma/client or yarn add @prisma/client would be detailed here.
```

----------------------------------------

TITLE: Install Prisma Client (TypeScript)
DESCRIPTION: Guides on installing Prisma Client for TypeScript projects, ensuring type safety for database operations across various databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-typescript-mysql

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for Prisma Client installation.');
// Example: npm install @prisma/client or yarn add @prisma/client would be detailed here.
```

----------------------------------------

TITLE: Fetch All User Records
DESCRIPTION: This code demonstrates how to query the database for all records in the 'User' model using Prisma Client's `findMany` method. It then logs the retrieved user data to the console. This is a fundamental example of reading data.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-typescript-postgresql

LANGUAGE: typescript
CODE:
```
async function main() {
  const allUsers = await prisma.user.findMany()
  console.log(allUsers)
}
```

----------------------------------------

TITLE: Example PostgreSQL Connection URL (Local macOS)
DESCRIPTION: Shows an example PostgreSQL connection URL for a local setup on macOS. It assumes the OS user's credentials are used for the database connection.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-node-postgresql

LANGUAGE: postgresql
CODE:
```
DATABASE_URL="postgresql://janedoe:janedoe@localhost:5432/janedoe?schema=hello-prisma"
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup
DESCRIPTION: Guides for setting up Prisma with PostgreSQL, including connecting from the CLI, upgrading from early access versions, and importing data from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/introspection-typescript-planetscale

LANGUAGE: bash
CODE:
```
npx prisma db push
```

----------------------------------------

TITLE: Connect to PlanetScale (Node.js)
DESCRIPTION: This example shows how to set up Prisma Client for a Node.js application connecting to PlanetScale. It includes the necessary commands for installing Prisma and initializing it with the PlanetScale data source provider.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-node-cockroachdb

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider mysql
npm install @prisma/client
```

----------------------------------------

TITLE: Add Prisma to Existing Project (Node.js + PostgreSQL)
DESCRIPTION: This guide explains how to integrate Prisma into an existing Node.js project when using a PostgreSQL database. It covers the necessary steps for setting up the Prisma ORM and connecting it to your database.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/baseline-your-database-node-postgresql

LANGUAGE: node
CODE:
```
console.log('Follow Prisma documentation for setup steps.');
// Example: prisma init
// Example: prisma db push
```

----------------------------------------

TITLE: Install Prisma Client
DESCRIPTION: Instructions for installing Prisma Client, the type-safe database client for Node.js and TypeScript applications.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-planetscale

LANGUAGE: typescript
CODE:
```
npm install prisma --save-dev
npx prisma generate

// Example usage in TypeScript:
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main() {
  const users = await prisma.user.findMany()
  console.log(users)
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Install Prisma Client for Existing Projects (TypeScript/MySQL)
DESCRIPTION: This guide details the steps to integrate Prisma Client into an existing Node.js project using TypeScript and a MySQL database. It covers the necessary setup and configuration for a smooth integration.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/install-prisma-client-typescript-mysql

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider mysql
```

----------------------------------------

TITLE: Local macOS PostgreSQL Connection Example
DESCRIPTION: Shows an example of a PostgreSQL connection URL for a local macOS setup, where user and password often match the OS username, and includes a schema.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-node-postgresql

LANGUAGE: text
CODE:
```
DATABASE_URL="postgresql://janedoe:janedoe@localhost:5432/janedoe?schema=hello-prisma"
```

----------------------------------------

TITLE: Nuxt Project Setup with Prisma
DESCRIPTION: This guide outlines the steps to set up a new Nuxt project and integrate the Prisma Nuxt module. It covers installing dependencies, configuring Prisma ORM, and setting up Prisma Postgres.

SOURCE: https://www.prisma.io/docs/guides/nuxt

LANGUAGE: bash
CODE:
```
npx nuxi init <your-project-name>
cd <your-project-name>
npm install prisma @prisma/client
npx prisma init
npx prisma db push
```

LANGUAGE: javascript
CODE:
```
// nuxt.config.ts
export default defineNuxtConfig({
  modules: [
    '@prisma/nuxt'
  ]
})
```

----------------------------------------

TITLE: Prisma Client: Setup & Configuration
DESCRIPTION: Instructions on how to install and configure Prisma Client in your project, including setting up the database connection.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/queries/pagination

LANGUAGE: javascript
CODE:
```
npm install @prisma/client
# or
yarn add @prisma/client

// In your application code:
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function main() {
  // Your database operations here
}

main()
  .catch((e) => {
    throw e;
  })
  .finally(async () => {
    await prisma.$disconnect();
  });

```

LANGUAGE: typescript
CODE:
```
npm install @prisma/client
# or
yarn add @prisma/client

// In your application code:
import { PrismaClient } from '@prisma/client';
const prisma = new PrismaClient();

async function main(): Promise<void> {
  // Your database operations here
}

main()
  .catch((e) => {
    throw e;
  })
  .finally(async () => {
    await prisma.$disconnect();
  });

```

----------------------------------------

TITLE: Example PostgreSQL Connection URL (Local macOS)
DESCRIPTION: Shows an example PostgreSQL connection URL for a local macOS setup, where user and database names often match the OS user.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-typescript-postgresql

LANGUAGE: postgresql
CODE:
```
DATABASE_URL="postgresql://janedoe:janedoe@localhost:5432/janedoe?schema=hello-prisma"
```

----------------------------------------

TITLE: Install Prisma Client for CockroachDB (Node.js)
DESCRIPTION: This guide details the steps to install Prisma Client for CockroachDB using Node.js. It covers setting up your project and connecting to the database.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-typescript-sqlserver

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider cockroachdb
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup
DESCRIPTION: Documentation for setting up Prisma with PostgreSQL, including CLI commands and importing from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-node-planetscale

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider postgresql
```

LANGUAGE: bash
CODE:
```
npx prisma db push
```

LANGUAGE: bash
CODE:
```
npx prisma db pull
```

----------------------------------------

TITLE: Connect to SQL Server Database (TypeScript)
DESCRIPTION: This guide details how to connect a TypeScript project to a SQL Server database using Prisma, including the necessary configuration for the database connection.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/baseline-your-database-node-postgresql

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for connection string examples.');
// Example: DATABASE_URL=sqlserver://host:port;database=database;user=user;password=password;
```

----------------------------------------

TITLE: Prisma Client Setup and Configuration
DESCRIPTION: Guide to setting up and configuring Prisma Client in your Node.js or TypeScript project. Covers installation, creating a Prisma Client instance, and basic configuration options.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/special-fields-and-types/null-and-undefined

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npm install @prisma/client
```

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  // Example query
  const users = await prisma.user.findMany()
  console.log(users)
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Querying Relational Databases (TypeScript)
DESCRIPTION: Examples of how to query various relational databases using Prisma Client with TypeScript. Covers different database providers like PostgreSQL, MySQL, SQL Server, CockroachDB, and PlanetScale.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-cockroachdb

LANGUAGE: typescript
CODE:
```
// Example for PostgreSQL
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main() {
  const users = await prisma.user.findMany()
  console.log(users)
}
```

LANGUAGE: typescript
CODE:
```
// Example for MySQL
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main() {
  const posts = await prisma.post.findMany()
  console.log(posts)
}
```

LANGUAGE: typescript
CODE:
```
// Example for SQL Server
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main() {
  const products = await prisma.product.findMany()
  console.log(products)
}
```

LANGUAGE: typescript
CODE:
```
// Example for CockroachDB
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main() {
  const orders = await prisma.order.findMany()
  console.log(orders)
}
```

LANGUAGE: typescript
CODE:
```
// Example for PlanetScale
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main() {
  const comments = await prisma.comment.findMany()
  console.log(comments)
}
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup
DESCRIPTION: Documentation for setting up Prisma with PostgreSQL, including CLI commands and importing from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/next-steps

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider postgresql
```

LANGUAGE: bash
CODE:
```
npx prisma db push
```

LANGUAGE: bash
CODE:
```
npx prisma db pull
```

----------------------------------------

TITLE: Install Prisma Client with TypeScript for CockroachDB
DESCRIPTION: This guide details the steps to install Prisma Client using TypeScript for a CockroachDB database. It covers setting up the project and connecting to the database.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-typescript-cockroachdb

LANGUAGE: typescript
CODE:
```
npx prisma init --datasource-provider cockroachdb
npx prisma db push
```

----------------------------------------

TITLE: Install Prisma Client with TypeScript and PostgreSQL
DESCRIPTION: This guide details the steps to install Prisma Client for a TypeScript project using a PostgreSQL database. It covers setting up the project and connecting to your database.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-typescript-prismaPostgres

LANGUAGE: typescript
CODE:
```
npx prisma init --datasource-provider postgresql
npx prisma db push
npx prisma generate
```

----------------------------------------

TITLE: Prisma ORM Setup and Database Connection (TypeScript)
DESCRIPTION: Guides users through setting up Prisma ORM for TypeScript projects and connecting to different relational databases. It covers the initial project setup and the process of establishing a database connection.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-planetscale

LANGUAGE: typescript
CODE:
```
npx prisma init --datasource-provider postgresql

// Example connection string in schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// In your TypeScript application:
// import { PrismaClient } from '@prisma/client'
// const prisma = new PrismaClient()
```

LANGUAGE: typescript
CODE:
```
npx prisma init --datasource-provider mysql

// Example connection string in schema.prisma
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// In your TypeScript application:
// import { PrismaClient } from '@prisma/client'
// const prisma = new PrismaClient()
```

LANGUAGE: typescript
CODE:
```
npx prisma init --datasource-provider planetscale

// Example connection string in schema.prisma
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// In your TypeScript application:
// import { PrismaClient } from '@prisma/client'
// const prisma = new PrismaClient()
```

LANGUAGE: typescript
CODE:
```
npx prisma init --datasource-provider sqlserver

// Example connection string in schema.prisma
datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// In your TypeScript application:
// import { PrismaClient } from '@prisma/client'
// const prisma = new PrismaClient()
```

LANGUAGE: typescript
CODE:
```
npx prisma init --datasource-provider cockroachdb

// Example connection string in schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// In your TypeScript application:
// import { PrismaClient } from '@prisma/client'
// const prisma = new PrismaClient()
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup and Management
DESCRIPTION: Documentation for setting up Prisma with PostgreSQL, including CLI operations, upgrading from early access versions, and importing data from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-node-sqlserver

LANGUAGE: typescript
CODE:
```
// Example: Prisma CLI command to migrate database
// npx prisma migrate dev --name init

// Example: Prisma schema definition for PostgreSQL
// datasource db {
//   url      = env("DATABASE_URL")
//   provider = "postgresql"
// }

// model User {
//   id    Int    @id @default(autoincrement())
//   email String @unique
//   name  String?
// }
```

LANGUAGE: typescript
CODE:
```
// Example: Importing data from an existing MySQL database
// npx prisma db import --datasource-url "mysql://user:password@host:port/database" --schema "./prisma/schema.prisma"
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup
DESCRIPTION: Documentation for setting up Prisma with PostgreSQL, including CLI commands and importing from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-node-sqlserver

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider postgresql
```

LANGUAGE: bash
CODE:
```
npx prisma db push
```

LANGUAGE: bash
CODE:
```
npx prisma db pull
```

----------------------------------------

TITLE: Install Prisma Client (JavaScript)
DESCRIPTION: Instructions for installing Prisma Client for Node.js applications, enabling database access with JavaScript.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-node-sqlserver

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init
npm install @prisma/client
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup
DESCRIPTION: Documentation for setting up Prisma with PostgreSQL, including CLI commands and importing from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-mysql

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider postgresql
```

LANGUAGE: bash
CODE:
```
npx prisma db push
```

LANGUAGE: bash
CODE:
```
npx prisma db pull
```

----------------------------------------

TITLE: Prisma Client Setup and Configuration
DESCRIPTION: Guides on setting up and configuring Prisma Client, including generating the client, instantiating it, managing database connections, and customizing model names.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/database-polyfills

LANGUAGE: javascript
CODE:
```
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()
```

----------------------------------------

TITLE: gRPC API Example
DESCRIPTION: A simple gRPC API example demonstrating Prisma ORM integration. This example is useful for developers looking to build high-performance microservices with gRPC and Prisma.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/mongodb/next-steps

LANGUAGE: go
CODE:
```
package main

import (
	"context"
	"log"
	"net"

	"google.golang.org/grpc"
	"github.com/prisma/prisma-examples/grpc/prisma/generated/go/prisma"
)

type server struct {
	prisma.UnimplementedUserServiceServer
}

func (s *server) GetUser(ctx context.Context, req *prisma.UserRequest) (*prisma.UserResponse, error) {
	log.Printf("Received: %v", req.GetName())
	// In a real application, you would interact with Prisma here
	return &prisma.UserResponse{Id: "1", Name: "Prisma User"}, nil
}

func main() {
	lis, err := net.Listen("tcp", ":4040")
	if err != nil {
		log.Fatalf("failed to listen: %v", err)
	}
	ss := grpc.NewServer()
	prisma.RegisterUserServiceServer(ss, &server{})
	if err := ss.Serve(lis); err != nil {
		log.Fatalf("failed to serve: %v", err)
	}
}
```

----------------------------------------

TITLE: Install Prisma Client (TypeScript)
DESCRIPTION: Guides on installing Prisma Client for TypeScript projects, ensuring type safety for database operations across various databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-node-cockroachdb

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for Prisma Client installation.');
// Example: npm install @prisma/client or yarn add @prisma/client would be detailed here.
```

----------------------------------------

TITLE: Prisma Guides Overview
DESCRIPTION: This section provides links to various guides available for Prisma, covering a wide range of topics from web frameworks to database migration.

SOURCE: https://www.prisma.io/docs/guides

LANGUAGE: markdown
CODE:
```
## [Web Frameworks](https://www.prisma.io/docs/guides/astro)
## [Development Tools](https://www.prisma.io/docs/guides/data-dog)
## [Integration Solutions](https://www.prisma.io/docs/guides/ai-sdk-nextjs)
## [Database Management](https://www.prisma.io/docs/guides/cloudflare-d1)
## [Prisma Postgres](https://www.prisma.io/docs/guides/management-api)
## [Connection Pooling Guides](https://www.prisma.io/docs/guides/neon-accelerate)
## [ORM Migration](https://www.prisma.io/docs/guides/migrate-from-drizzle)
## [DB Migration](https://www.prisma.io/docs/getting-started/prisma-postgres/import-from-existing-database-postgresql)
```

----------------------------------------

TITLE: Install Axios for HTTP Requests
DESCRIPTION: Command to install the axios library, which will be used as the HTTP client to interact with the Prisma Management API.

SOURCE: https://www.prisma.io/docs/guides/management-api-basic

LANGUAGE: bash
CODE:
```
npm install axios
```

----------------------------------------

TITLE: Example Output for Empty Database
DESCRIPTION: This represents the expected output when querying for user records from a database that contains no 'User' entries. It shows an empty array, indicating no data was found.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-typescript-postgresql

LANGUAGE: json
CODE:
```
[]
```

----------------------------------------

TITLE: Install Prisma Client
DESCRIPTION: Installs the `@prisma/client` package using npm. This package provides the Prisma Client constructor for database interactions.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-node-postgresql

LANGUAGE: bash
CODE:
```
npm install @prisma/client
```

----------------------------------------

TITLE: Connect to Relational Databases (TypeScript)
DESCRIPTION: Guides on connecting to various relational databases using TypeScript with Prisma. Covers setup from scratch and connection procedures.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/using-prisma-migrate-node-planetscale

LANGUAGE: typescript
CODE:
```
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-postgresql
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-prismaPostgres
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-mysql
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-planetscale
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-sqlserver
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-cockroachdb
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-typescript-cockroachdb
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-typescript-mysql
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-typescript-planetscale
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-typescript-postgresql
```

----------------------------------------

TITLE: Querying Relational Databases (Node.js)
DESCRIPTION: Examples of how to query various relational databases using Prisma Client with Node.js. Covers different database providers like PostgreSQL, MySQL, SQL Server, CockroachDB, and PlanetScale.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-cockroachdb

LANGUAGE: typescript
CODE:
```
// Example for PostgreSQL
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main() {
  const users = await prisma.user.findMany()
  console.log(users)
}
```

LANGUAGE: typescript
CODE:
```
// Example for MySQL
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main() {
  const posts = await prisma.post.findMany()
  console.log(posts)
}
```

LANGUAGE: typescript
CODE:
```
// Example for SQL Server
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main() {
  const products = await prisma.product.findMany()
  console.log(products)
}
```

LANGUAGE: typescript
CODE:
```
// Example for CockroachDB
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main() {
  const orders = await prisma.order.findMany()
  console.log(orders)
}
```

LANGUAGE: typescript
CODE:
```
// Example for PlanetScale
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main() {
  const comments = await prisma.comment.findMany()
  console.log(comments)
}
```

----------------------------------------

TITLE: Install Prisma Optimize Extension
DESCRIPTION: Installs the necessary Prisma Client extension for Prisma Optimize. This command should be run in your project's terminal.

SOURCE: https://www.prisma.io/docs/postgres/query-optimization/setup

LANGUAGE: bash
CODE:
```
npm install @prisma/extension-optimize
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup
DESCRIPTION: Documentation for setting up Prisma with PostgreSQL, including CLI commands and importing from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/install-prisma-client-node-sqlserver

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider postgresql
```

LANGUAGE: bash
CODE:
```
npx prisma db push
```

LANGUAGE: bash
CODE:
```
npx prisma db pull
```

----------------------------------------

TITLE: PostgreSQL Setup from CLI
DESCRIPTION: Instructions for setting up Prisma with a PostgreSQL database directly from the command line interface (CLI). This typically involves initializing Prisma and configuring the database connection.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/mongodb-typescript-mongodb

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider postgresql
```

----------------------------------------

TITLE: Prisma Migrate Getting Started
DESCRIPTION: Initial steps for using Prisma Migrate to manage database schema changes and migrations.

SOURCE: https://www.prisma.io/docs/orm/prisma-schema/overview/location

LANGUAGE: bash
CODE:
```
# Initialize Prisma Migrate in your project
npx prisma init

# Create your first migration file based on your schema.prisma
npx prisma migrate dev --name init_schema

# This command will:
# 1. Create a "migrations" folder.
# 2. Generate SQL migration files.
# 3. Apply the migrations to your database.
# 4. Generate the Prisma Client.
```

----------------------------------------

TITLE: Prisma Client Setup & Configuration
DESCRIPTION: Guide to setting up and configuring Prisma Client in your application.

SOURCE: https://www.prisma.io/docs/orm/overview/databases/mysql

LANGUAGE: APIDOC
CODE:
```
Prisma Client Setup & Configuration:

1. Install Prisma CLI and Prisma Client:
   `npm install prisma --save-dev`
   `npm install @prisma/client`

2. Define your database schema in `schema.prisma`.

3. Generate the Prisma Client:
   `npx prisma generate`

4. Instantiate Prisma Client in your application:
   ```javascript
   import { PrismaClient } from '@prisma/client'
   const prisma = new PrismaClient()
   ```

5. Configure connection URL (typically via environment variable `DATABASE_URL`).

// Related: Prisma Client API Reference
// Related: Environment Variables Reference
```

----------------------------------------

TITLE: MongoDB Setup with Prisma
DESCRIPTION: Instructions for setting up Prisma with MongoDB using TypeScript. This includes the initial project setup and configuration for MongoDB databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/using-prisma-migrate-typescript-postgresql

LANGUAGE: bash
CODE:
```
# Initialize Prisma for MongoDB
npx prisma init --datasource-provider mongodb
```

LANGUAGE: typescript
CODE:
```
// Example Prisma schema for MongoDB
// datasource db {
//   url      = env("DATABASE_URL")
//   provider = "mongodb"
// }
//
// generator client {
//   provider = "prisma-client-js"
// }
```

----------------------------------------

TITLE: Import from Existing MySQL Database with Prisma
DESCRIPTION: Steps to import data from an existing MySQL database into Prisma.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-cockroachdb

LANGUAGE: bash
CODE:
```
npx prisma db pull --datasource-url "mysql://user:password@host:port/database"
```

----------------------------------------

TITLE: Prisma MongoDB Setup
DESCRIPTION: Instructions for setting up Prisma with MongoDB using TypeScript. This includes initializing Prisma and performing basic operations.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-node-postgresql

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider mongodb
```

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function createPost() {
  const newPost = await prisma.post.create({
    data: {
      title: 'My First Post',
      content: 'This is the content of my first post.',
      published: true,
      author: {
        connect: {
          email: 'user@example.com',
        },
      },
    },
  });
  console.log('Created post:', newPost);
}

createPost();

```

----------------------------------------

TITLE: Install Prisma Client
DESCRIPTION: Installs the Prisma Client package using npm. This is the first step to using Prisma in your Node.js project.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-node-sqlserver

LANGUAGE: bash
CODE:
```
npm install @prisma/client
```

----------------------------------------

TITLE: Prisma with PostgreSQL
DESCRIPTION: Documentation and setup guides for using Prisma with PostgreSQL databases, including CLI commands and migration strategies.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-sqlserver

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider postgresql
npx prisma migrate dev --name init
```

----------------------------------------

TITLE: Extend Prisma Client Instance
DESCRIPTION: This snippet shows how to extend your Prisma Client instance with the Optimize functionality. This involves importing and using the Optimize client extension.

SOURCE: https://www.prisma.io/docs/optimize/getting-started

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'
import { withOptimize } from '@prisma/client-optimize'

const prisma = new PrismaClient()
const prismaWithOptimize = withOptimize(prisma)

// Now you can use prismaWithOptimize to generate insights
```

----------------------------------------

TITLE: Prisma Docker Configuration Example
DESCRIPTION: This snippet demonstrates a typical setup for running a Prisma application within Docker. It includes a Dockerfile for building the application image and a basic example of how Prisma might be used in a Node.js application.

SOURCE: https://www.prisma.io/docs/tags/docker

LANGUAGE: dockerfile
CODE:
```
FROM node:18-alpine

WORKDIR /app

COPY package*.json ./ 
RUN npm install

COPY . .

RUN npx prisma generate

EXPOSE 3000
CMD ["npm", "start"]
```

LANGUAGE: javascript
CODE:
```
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function main() {
  const newUser = await prisma.user.create({
    data: {
      name: 'Alice',
      email: 'alice@example.com'
    }
  });
  console.log(newUser);
}

main()
  .catch((e) => {
    console.error(e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
```

----------------------------------------

TITLE: Generate Prisma Client for Accelerate (Serverless/Edge)
DESCRIPTION: Generates the Prisma Client for serverless or edge environments, excluding the Query Engine to reduce bundle size.

SOURCE: https://www.prisma.io/docs/accelerate/getting-started

LANGUAGE: bash
CODE:
```
npx prisma generate --no-engine
```

----------------------------------------

TITLE: Setting up Prisma with MongoDB
DESCRIPTION: A guide for setting up Prisma with a MongoDB database using TypeScript. It covers the initial project setup and connection.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/using-prisma-migrate-node-planetscale

LANGUAGE: typescript
CODE:
```
npx prisma init --datasource-provider mongodb
npx prisma db push
```

----------------------------------------

TITLE: Prisma ORM Navigation
DESCRIPTION: Provides links and navigation paths for accessing different sections of the Prisma ORM documentation, including getting started, database-specific guides, and overview topics.

SOURCE: https://www.prisma.io/docs/orm/prisma-migrate/understanding-prisma-migrate

LANGUAGE: APIDOC
CODE:
```
Navigation:
  - Get Started: https://www.prisma.io/docs/getting-started
  - Postgres: https://www.prisma.io/docs/postgres
  - ORM: https://www.prisma.io/docs/orm
  - Guides: https://www.prisma.io/docs/guides
  - ORM Overview:
    - Introduction: https://www.prisma.io/docs/orm/overview/introduction
    - Prisma ORM in your stack: https://www.prisma.io/docs/orm/overview/prisma-in-your-stack
    - Databases: https://www.prisma.io/docs/orm/overview/databases
```

----------------------------------------

TITLE: Install Prisma Client with Node.js and PostgreSQL
DESCRIPTION: This guide details the steps to install Prisma Client for a Node.js project using a PostgreSQL database. It covers setting up the project and connecting to your database.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-typescript-prismaPostgres

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider postgresql
npx prisma db push
npx prisma generate
```

----------------------------------------

TITLE: Prisma ORM Setup for Various Relational Databases (TypeScript)
DESCRIPTION: This guide outlines the process of setting up Prisma ORM for various relational databases in a TypeScript project. It includes initialization commands and schema configuration examples for different database systems.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/evolve-your-schema-node-postgresql

LANGUAGE: typescript
CODE:
```
// Initialize Prisma for PostgreSQL
npx prisma init --datasource-provider postgresql

// Initialize Prisma for MySQL
npx prisma init --datasource-provider mysql

// Initialize Prisma for SQL Server
npx prisma init --datasource-provider sqlserver

// Initialize Prisma for CockroachDB
npx prisma init --datasource-provider cockroachdb

// Initialize Prisma for PlanetScale
npx prisma init --datasource-provider planetscale

// Example schema.prisma for PostgreSQL
// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }
```

----------------------------------------

TITLE: Development Tools Integration Guides
DESCRIPTION: Guides for integrating Prisma with development tools like Datadog, Docker, and GitHub Actions, as well as managing projects with pnpm workspaces.

SOURCE: https://www.prisma.io/docs/guides

LANGUAGE: en
CODE:
```
Datadog
Docker
GitHub Actions
pnpm workspaces
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup
DESCRIPTION: Documentation for setting up Prisma with PostgreSQL, including CLI commands and importing from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/baseline-your-database-node-sqlserver

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider postgresql
```

LANGUAGE: bash
CODE:
```
npx prisma db push
```

LANGUAGE: bash
CODE:
```
npx prisma db pull
```

----------------------------------------

TITLE: Connect Database with Prisma
DESCRIPTION: Guides on connecting your existing project to a relational database using Prisma. Covers setup for SQL Server with TypeScript.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/install-prisma-client-node-planetscale

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for database connection steps.');
// Example: prisma.schema configuration would be detailed here.
```

----------------------------------------

TITLE: Install Prisma Client (TypeScript)
DESCRIPTION: Guides on installing Prisma Client for TypeScript projects, ensuring type safety for database operations across various databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-typescript-cockroachdb

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for Prisma Client installation.');
// Example: npm install @prisma/client or yarn add @prisma/client would be detailed here.
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup
DESCRIPTION: Documentation for setting up Prisma with PostgreSQL, including CLI commands and importing from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/baseline-your-database-typescript-mysql

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider postgresql
```

LANGUAGE: bash
CODE:
```
npx prisma db push
```

LANGUAGE: bash
CODE:
```
npx prisma db pull
```

----------------------------------------

TITLE: Connect Database with Prisma
DESCRIPTION: Guides on connecting your database to Prisma. Covers setup for existing projects using TypeScript and SQL Server.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/install-prisma-client-typescript-cockroachdb

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for database connection steps.');
// Example: prisma.schema configuration would be detailed here.
```

----------------------------------------

TITLE: Prisma Client Setup and Configuration
DESCRIPTION: Details on how to set up and configure Prisma Client for your project, including installation and basic configuration options.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/deployment/serverless/deploy-to-azure-functions

LANGUAGE: en
CODE:
```
Setup & configuration: https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration
```

----------------------------------------

TITLE: Install Prisma Client for Node.js with MySQL
DESCRIPTION: This snippet provides instructions for setting up Prisma Client in a Node.js project when using MySQL as the database. It guides through the installation and initialization process.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/install-prisma-client-node-cockroachdb

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider mysql
npx prisma generate
```

----------------------------------------

TITLE: Prisma with PostgreSQL
DESCRIPTION: Guides on setting up and using Prisma with PostgreSQL, including CLI installation, upgrades, and importing data from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-typescript-postgresql

LANGUAGE: bash
CODE:
```
npx prisma db push
```

----------------------------------------

TITLE: Connect to Relational Databases with TypeScript
DESCRIPTION: Guides on connecting to various relational databases using TypeScript with Prisma. Covers setup from scratch and database connection steps.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-typescript-sqlserver

LANGUAGE: typescript
CODE:
```
npx prisma db push

```

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

```

----------------------------------------

TITLE: Install Prisma CLI and Prisma Client
DESCRIPTION: Installs the Prisma CLI for database management and Prisma Client for type-safe database access. This is a crucial first step for using Prisma ORM.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-node-planetscale

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init
```

----------------------------------------

TITLE: Prisma ORM Setup and Database Connection (Node.js & TypeScript)
DESCRIPTION: Guides on setting up Prisma ORM for Node.js and TypeScript projects, including connecting to relational databases like PostgreSQL, MySQL, SQL Server, CockroachDB, and PlanetScale. Covers initial project setup and database connection strategies.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/using-prisma-migrate-node-postgresql

LANGUAGE: javascript
CODE:
```
npx prisma init --datasource-provider postgresql

// schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ... other schema definitions
```

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  // ... your database operations
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Initialize Node.js Project and Install Prisma CLI
DESCRIPTION: Initializes a new Node.js project with default settings using 'npm init -y' and installs the Prisma CLI as a development dependency. This sets up the project's package.json file.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-sqlserver

LANGUAGE: bash
CODE:
```
npm init -y
npm install prisma --save-dev
```

----------------------------------------

TITLE: Migrate Database Schema
DESCRIPTION: Instructions on how to apply database schema migrations using Prisma. This ensures your database schema is up-to-date with your Prisma schema.

SOURCE: https://www.prisma.io/docs/getting-started/prisma-postgres/from-the-cli

LANGUAGE: bash
CODE:
```
npx prisma migrate dev --name init
```

----------------------------------------

TITLE: Install Prisma Client (TypeScript)
DESCRIPTION: Guides on installing Prisma Client for TypeScript projects, ensuring type safety for database operations across various databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/introspection-typescript-postgresql

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for Prisma Client installation.');
// Example: npm install @prisma/client or yarn add @prisma/client would be detailed here.
```

----------------------------------------

TITLE: Prisma ORM Setup for Relational Databases (Node.js & SQL Server)
DESCRIPTION: This guide explains how to set up Prisma ORM with a SQL Server database for Node.js projects. It covers prerequisites like Node.js installation and database connection details, and introduces core Prisma tools.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-sqlserver

LANGUAGE: javascript
CODE:
```
console.log('Prisma ORM setup guide for Node.js and SQL Server');
// Further steps involve using Prisma CLI, Prisma Client, and Prisma Migrate.
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup
DESCRIPTION: Documentation for setting up Prisma with PostgreSQL, including CLI commands and importing from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/install-prisma-client-typescript-mysql

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider postgresql
```

LANGUAGE: bash
CODE:
```
npx prisma db push
```

LANGUAGE: bash
CODE:
```
npx prisma db pull
```

----------------------------------------

TITLE: Applying Prisma Accelerate with Prisma Middleware
DESCRIPTION: Shows how to apply Prisma middleware before the Accelerate extension to ensure middleware functions are executed prior to any Accelerate-specific logic.

SOURCE: https://www.prisma.io/docs/accelerate/getting-started

LANGUAGE: javascript
CODE:
```
const prisma =new PrismaClient().$use(middleware).$extends(withAccelerate())
```

----------------------------------------

TITLE: Prisma Migrate with JavaScript and MySQL
DESCRIPTION: This guide explains how to use Prisma Migrate with JavaScript and a MySQL database. It covers the setup and migration process for your project.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/using-prisma-migrate-node-mysql

LANGUAGE: bash
CODE:
```
npx prisma migrate dev --name init
```

----------------------------------------

TITLE: Local CockroachDB Connection URL
DESCRIPTION: An example of a connection URL for a locally hosted CockroachDB database. This format is typically used for development environments and may have SSL disabled.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-cockroachdb

LANGUAGE: postgresql
CODE:
```
DATABASE_URL="postgresql://root@localhost:26257?sslmode=disable"
```

----------------------------------------

TITLE: Initialize Node.js Project and Install Prisma CLI
DESCRIPTION: Initializes a new Node.js project with `npm init -y` and installs the Prisma CLI as a development dependency. This sets up the `package.json` for the Node.js application.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-postgresql

LANGUAGE: bash
CODE:
```
npm init -y
npm install prisma --save-dev
```

----------------------------------------

TITLE: Prisma Database Introspection
DESCRIPTION: Details the process of introspecting your database schema to generate a Prisma Client. Supports various databases like CockroachDB, MySQL, PlanetScale, PostgreSQL, and SQL Server, with examples for both Node.js and TypeScript.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/baseline-your-database-node-postgresql

LANGUAGE: javascript
CODE:
```
console.log('Refer to Prisma documentation for introspection commands.');
// Example: npx prisma db pull (for Node.js)
// Example: prisma db pull (for TypeScript)
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup
DESCRIPTION: Documentation for setting up Prisma with PostgreSQL, including CLI commands and importing from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/evolve-your-schema-node-sqlserver

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider postgresql
```

LANGUAGE: bash
CODE:
```
npx prisma db push
```

LANGUAGE: bash
CODE:
```
npx prisma db pull
```

----------------------------------------

TITLE: Install Prisma Client (Node.js)
DESCRIPTION: Instructions for installing Prisma Client, the type-safe database client for Node.js applications.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-node-mysql

LANGUAGE: node
CODE:
```
npm install prisma --save-dev
npx prisma generate

// Example usage in Node.js:
const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

async function main() {
  const users = await prisma.user.findMany()
  console.log(users)
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Prisma CLI, Client, and Migrate Introduction
DESCRIPTION: This section introduces the core Prisma tools: Prisma CLI for database migrations and client generation, Prisma Client for type-safe database access in your application, and Prisma Migrate for managing database schema changes.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-planetscale

LANGUAGE: prisma-cli
CODE:
```
Prisma CLI: For database migrations and client generation.
Prisma Client: Type-safe database access.
Prisma Migrate: Database schema management.
```

----------------------------------------

TITLE: Install Prisma Client
DESCRIPTION: Instructions for installing Prisma Client, the type-safe database client for Node.js and TypeScript applications.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-node-cockroachdb

LANGUAGE: typescript
CODE:
```
npm install prisma --save-dev
npx prisma generate

// Example usage in TypeScript:
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main() {
  const users = await prisma.user.findMany()
  console.log(users)
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Install Prisma Client (Node.js)
DESCRIPTION: Instructions for installing Prisma Client, the type-safe database client for Node.js applications.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/using-prisma-migrate-typescript-mysql

LANGUAGE: node
CODE:
```
npm install prisma --save-dev
npx prisma generate

// Example usage in Node.js:
const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

async function main() {
  const users = await prisma.user.findMany()
  console.log(users)
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Prisma CLI for PostgreSQL Setup
DESCRIPTION: Steps to set up Prisma with PostgreSQL using the command-line interface (CLI).

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-typescript-sqlserver

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider postgresql
npx prisma migrate dev --name init_db
```

----------------------------------------

TITLE: Install Prisma Client (TypeScript)
DESCRIPTION: Guides on installing Prisma Client for TypeScript projects, ensuring type safety for database operations across various databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/install-prisma-client-typescript-cockroachdb

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for Prisma Client installation.');
// Example: npm install @prisma/client or yarn add @prisma/client would be detailed here.
```

----------------------------------------

TITLE: Prisma ORM Setup for Relational Databases (TypeScript & SQL Server)
DESCRIPTION: This guide explains how to set up Prisma ORM with a SQL Server database for TypeScript projects. It covers prerequisites like Node.js installation and database connection details, and introduces core Prisma tools.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-sqlserver

LANGUAGE: typescript
CODE:
```
console.log('Prisma ORM setup guide for TypeScript and SQL Server');
// Further steps involve using Prisma CLI, Prisma Client, and Prisma Migrate.
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup
DESCRIPTION: Documentation for setting up Prisma with PostgreSQL, including CLI commands and importing from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-node-cockroachdb

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider postgresql
```

LANGUAGE: bash
CODE:
```
npx prisma db push
```

LANGUAGE: bash
CODE:
```
npx prisma db pull
```

----------------------------------------

TITLE: Connect to PlanetScale Database (TypeScript)
DESCRIPTION: Instructions for connecting a TypeScript application to a PlanetScale database using Prisma.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-typescript-postgresql

LANGUAGE: typescript
CODE:
```
// Example connection string for PlanetScale
const connectionString: string = "mysql://user:password@host:port/database"; // PlanetScale uses MySQL protocol
console.log(`Connecting to PlanetScale: ${connectionString}`);
// Prisma client would be initialized with this connection string.
```

----------------------------------------

TITLE: Prisma Client Setup and Configuration
DESCRIPTION: Guides on setting up and configuring Prisma Client, including generating the client, instantiating it, managing database connections, and customizing model/field names.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/generating-prisma-client

LANGUAGE: en
CODE:
```
Generating Prisma Client:
https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/generating-prisma-client

Instantiating Prisma Client:
https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/instantiate-prisma-client

Database connections:
https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/databases-connections

Custom model and field names:
https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/custom-model-and-field-names
```

----------------------------------------

TITLE: Prisma ORM with Nuxt Guide
DESCRIPTION: A step-by-step guide detailing the setup and usage of Prisma ORM and Prisma Postgres within a Nuxt project. It also covers deployment to Vercel.

SOURCE: https://www.prisma.io/docs/tags/prisma-postgres

LANGUAGE: markdown
CODE:
```
## [How to use Prisma ORM with Nuxt](https://www.prisma.io/docs/guides/nuxt)
A step-by-step guide to setting up and using Prisma ORM and Prisma Postgres with the Prisma Nuxt module and deploying to Vercel.
```

----------------------------------------

TITLE: Add Prisma to Existing Project (TypeScript + PostgreSQL)
DESCRIPTION: This guide details the process of adding Prisma to an existing TypeScript project that uses PostgreSQL. It outlines the configuration and connection steps required to use Prisma's ORM capabilities.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/baseline-your-database-node-postgresql

LANGUAGE: typescript
CODE:
```
console.log('Follow Prisma documentation for setup steps.');
// Example: prisma init
// Example: prisma db push
```

----------------------------------------

TITLE: Prisma Optimize
DESCRIPTION: Improve database query performance by leveraging insights and recommendations generated by Prisma Optimize.

SOURCE: https://www.prisma.io/docs/getting-started

LANGUAGE: APIDOC
CODE:
```
Prisma Optimize:

Purpose:
- Provides insights and recommendations to optimize database queries.

Usage:
- Integrate Prisma Optimize into your workflow to analyze query performance and apply suggested improvements.
```

----------------------------------------

TITLE: Import Data to PostgreSQL with Prisma
DESCRIPTION: Instructions on how to import data into a PostgreSQL database using Prisma, specifically for existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/evolve-your-schema-typescript-sqlserver

LANGUAGE: bash
CODE:
```
npx prisma db push
```

----------------------------------------

TITLE: Prisma Migrate with JavaScript and SQL Server
DESCRIPTION: This guide explains how to use Prisma Migrate with JavaScript and a SQL Server database. It covers the setup and migration process.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/using-prisma-migrate-node-sqlserver

LANGUAGE: javascript
CODE:
```
// See: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/using-prisma-migrate-node-sqlserver
```

LANGUAGE: sql
CODE:
```
-- SQL Server specific migration commands might be detailed in the linked documentation.
```

----------------------------------------

TITLE: Prisma Migrate Workflows
DESCRIPTION: Information on Prisma Migrate, including getting started, understanding its concepts, and common workflows.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/generating-prisma-client

LANGUAGE: en
CODE:
```
Getting started with Prisma Migrate:
https://www.prisma.io/docs/orm/prisma-migrate/getting-started

Understanding Prisma Migrate:
https://www.prisma.io/docs/orm/prisma-migrate/understanding-prisma-migrate

Prisma Migrate Workflows:
https://www.prisma.io/docs/orm/prisma-migrate/workflows
```

----------------------------------------

TITLE: Connect to MySQL Database (TypeScript)
DESCRIPTION: Instructions for connecting a TypeScript application to a MySQL database using Prisma.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-typescript-postgresql

LANGUAGE: typescript
CODE:
```
// Example connection string for MySQL
const connectionString: string = "mysql://user:password@host:port/database";
console.log(`Connecting to MySQL: ${connectionString}`);
// Prisma client would be initialized with this connection string.
```

----------------------------------------

TITLE: Prisma Client Setup and Configuration
DESCRIPTION: Guide to setting up and configuring Prisma Client, including database connection and logging options.

SOURCE: https://www.prisma.io/docs/orm/overview/databases

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient({
  log: [
    {
      emit: 'event',
      level: 'query',
    },
    'info',
    'warn',
    'error',
  ],
})

prisma.$on('query', (e) => {
  console.log('Query: ' + e.query)
  console.log('Params: ' + e.params)
})

async function main() {
  // Your database operations here
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Prisma with PostgreSQL
DESCRIPTION: Documentation and setup guides for using Prisma with PostgreSQL databases, including CLI commands and migration strategies.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/install-prisma-client-typescript-postgresql

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider postgresql
npx prisma migrate dev --name init
```

----------------------------------------

TITLE: Install Prisma Client (TypeScript)
DESCRIPTION: Guides on installing Prisma Client for TypeScript projects, ensuring type safety for database operations across various databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/install-prisma-client-node-sqlserver

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for Prisma Client installation.');
// Example: npm install @prisma/client or yarn add @prisma/client would be detailed here.
```

----------------------------------------

TITLE: Install Prisma Client
DESCRIPTION: Instructions for installing Prisma Client, the type-safe database client for Node.js and TypeScript applications.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-planetscale

LANGUAGE: typescript
CODE:
```
npm install prisma --save-dev
npx prisma generate

// Example usage in TypeScript:
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main() {
  const users = await prisma.user.findMany()
  console.log(users)
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Initialize Node.js Project and Install Prisma CLI
DESCRIPTION: Initializes a new Node.js project with `npm init -y` and installs the Prisma CLI as a development dependency using `npm install prisma --save-dev`. This sets up the `package.json` file.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/mongodb-node-mongodb

LANGUAGE: bash
CODE:
```
npm init -y
npm install prisma --save-dev
```

----------------------------------------

TITLE: Connect Database with Prisma
DESCRIPTION: Guides on connecting your database to Prisma. Covers setup for existing projects using TypeScript and SQL Server.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-node-postgresql

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for database connection steps.');
// Example: prisma.schema configuration would be detailed here.
```

----------------------------------------

TITLE: Import Data to PostgreSQL with Prisma
DESCRIPTION: Instructions on how to import data into a PostgreSQL database using Prisma, specifically for existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-typescript-postgresql

LANGUAGE: bash
CODE:
```
npx prisma db push
```

----------------------------------------

TITLE: Connect Database with Prisma
DESCRIPTION: Guides on connecting your existing project to a relational database using Prisma. Covers setup for SQL Server with TypeScript.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/install-prisma-client-typescript-planetscale

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for database connection steps.');
// Example: prisma.schema configuration would be detailed here.
```

----------------------------------------

TITLE: Install Prisma Client (Node.js)
DESCRIPTION: Instructions for installing Prisma Client, the type-safe database client for Node.js applications.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-planetscale

LANGUAGE: node
CODE:
```
npm install prisma --save-dev
npx prisma generate

// Example usage in Node.js:
const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

async function main() {
  const users = await prisma.user.findMany()
  console.log(users)
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Install Prisma Client for MongoDB
DESCRIPTION: This snippet shows the command to install Prisma Client, which is necessary for interacting with your database after defining the schema.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/mongodb/connect-your-database-node-mongodb

LANGUAGE: bash
CODE:
```
npm install @prisma/client
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup
DESCRIPTION: Documentation for setting up Prisma with PostgreSQL, including CLI commands and importing from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-node-postgresql

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider postgresql
```

LANGUAGE: bash
CODE:
```
npx prisma db push
```

LANGUAGE: bash
CODE:
```
npx prisma db pull
```

----------------------------------------

TITLE: Install Prisma Client
DESCRIPTION: Installs the `@prisma/client` package using npm. This is the first step to using Prisma Client in your project.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-typescript-planetscale

LANGUAGE: bash
CODE:
```
npm install @prisma/client
```

----------------------------------------

TITLE: Environment Variables for Prisma Accelerate
DESCRIPTION: Sets the `DATABASE_URL` for Prisma Accelerate and `DIRECT_DATABASE_URL` for direct database access in the `.env` file.

SOURCE: https://www.prisma.io/docs/accelerate/getting-started

LANGUAGE: env
CODE:
```
DATABASE_URL="prisma://accelerate.prisma-data.net/?api_key=__API_KEY__"
DIRECT_DATABASE_URL="postgresql://user:password@host:port/db_name?schema=public"
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup from CLI
DESCRIPTION: Guidance on setting up Prisma with PostgreSQL directly from the command line interface.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/baseline-your-database-node-cockroachdb

LANGUAGE: cli
CODE:
```
npx prisma init --datasource-provider postgresql
npx prisma db push
```

----------------------------------------

TITLE: Prisma Client Setup and Configuration
DESCRIPTION: Guides on setting up and configuring Prisma Client, including generating the client, instantiating it, managing database connections, and customizing model/field names.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/error-formatting

LANGUAGE: javascript
CODE:
```
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  // ... your prisma client queries
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main(): Promise<void> {
  // ... your prisma client queries
}

main()
  .catch((e: Error) => {
    console.error(e)
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Prisma Contact Us Links
DESCRIPTION: Contact information for Prisma, primarily linking to their community page.

SOURCE: https://www.prisma.io/docs/getting-started/quickstart-sqlite

LANGUAGE: APIDOC
CODE:
```
Contact Us:
  - Community: https://www.prisma.io/community
```

----------------------------------------

TITLE: Connect Database with Prisma
DESCRIPTION: Guides on connecting your database to Prisma. Covers setup for existing projects using TypeScript and SQL Server.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-node-cockroachdb

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for database connection steps.');
// Example: prisma.schema configuration would be detailed here.
```

----------------------------------------

TITLE: Connect to Relational Databases with Node.js
DESCRIPTION: Guides on connecting to various relational databases using Node.js with Prisma. Covers setup from scratch and database connection steps.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-typescript-sqlserver

LANGUAGE: node
CODE:
```
npx prisma db push

```

LANGUAGE: node
CODE:
```
const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

```

----------------------------------------

TITLE: Prisma ORM Setup for Existing Projects
DESCRIPTION: General guidance on adding Prisma ORM to an existing project, covering initial setup and database connection strategies for various relational databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-node-sqlserver

LANGUAGE: APIDOC
CODE:
```
Prisma ORM Setup:

1. Install Prisma CLI:
   npm install prisma --save-dev
   or
   yarn add prisma --dev

2. Initialize Prisma:
   npx prisma init --datasource-provider <database_provider>
   (e.g., postgresql, mysql, sqlite, sqlserver, mongodb, cockroachdb)

3. Configure Database Connection:
   Edit the .env file to set the DATABASE_URL.
   Example for PostgreSQL:
   DATABASE_URL="postgresql://user:password@host:port/database?schema=public"

4. Define your Schema:
   Modify the schema.prisma file to define your database models.
   Example:
   model User {
     id    Int     @id @default(autoincrement())
     email String  @unique
     name  String?
   }

5. Generate Prisma Client:
   npx prisma generate

6. Connect to Database:
   Use the generated Prisma Client in your application code.
   Example (Node.js):
   import { PrismaClient } from '@prisma/client'
   const prisma = new PrismaClient()

   async function main() {
     const newUser = await prisma.user.create({
       data: {
         email: 'test@example.com',
         name: 'Test User',
       },
     })
     console.log(newUser)
   }
   main()
     .catch((e) => {
       console.error(e)
       process.exit(1)
     })
     .finally(async () => {
       await prisma.$disconnect()
     })

Supported Datasource Providers:
- PostgreSQL
- MySQL
- SQLite
- SQL Server
- MongoDB
- CockroachDB
- MongoDB Atlas
- Microsoft SQL Server
- PlanetScale
- Neon
- Railway
- Vercel Postgres
- Supabase
- Azure SQL Database
- AWS RDS (PostgreSQL, MySQL, SQL Server)
- Google Cloud SQL (PostgreSQL, MySQL, SQL Server)

Related Commands:
- `npx prisma migrate dev`: Creates a new migration and applies it to the database.
- `npx prisma db push`: Pushes the schema to the database without creating a migration.
- `npx prisma studio`: Opens a GUI to explore and manipulate your database data.
```

----------------------------------------

TITLE: Connect Database with Prisma
DESCRIPTION: Guides on connecting your database to Prisma. Covers setup for existing projects using TypeScript and SQL Server.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-typescript-postgresql

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for database connection steps.');
// Example: prisma.schema configuration would be detailed here.
```

----------------------------------------

TITLE: Connect Database with Prisma
DESCRIPTION: Guides on connecting your existing project to a relational database using Prisma. Covers setup for SQL Server with TypeScript.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/install-prisma-client-typescript-sqlserver

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for database connection steps.');
// Example: prisma.schema configuration would be detailed here.
```

----------------------------------------

TITLE: Prisma IO Navigation and Features
DESCRIPTION: Provides links to key sections of the Prisma IO documentation, including Get Started, Postgres integration, ORM, Guides, Studio, Optimize, and Accelerate.

SOURCE: https://www.prisma.io/docs/postgres/query-optimization/recommendations/storing-blob-in-database

LANGUAGE: en
CODE:
```
Get Started: https://www.prisma.io/docs/getting-started
Postgres: https://www.prisma.io/docs/postgres
ORM: https://www.prisma.io/docs/orm
Guides: https://www.prisma.io/docs/guides
Studio: https://www.prisma.io/docs/postgres/database/prisma-studio
Optimize: https://www.prisma.io/docs/optimize
Accelerate: https://www.prisma.io/docs/accelerate
```

----------------------------------------

TITLE: Initialize TypeScript Project and Install Dependencies
DESCRIPTION: Initializes a new Node.js project with a package.json file and installs necessary development dependencies including Prisma CLI, TypeScript, and tsx.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-sqlserver

LANGUAGE: bash
CODE:
```
npm init -y
npm install prisma typescript tsx @types/node --save-dev
```

----------------------------------------

TITLE: Install Prisma Client
DESCRIPTION: Provides instructions for installing Prisma Client in your project, enabling type-safe database access. Covers installation for Node.js and TypeScript with support for CockroachDB, MySQL, PlanetScale, PostgreSQL, and SQL Server.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/next-steps

LANGUAGE: javascript
CODE:
```
console.log('Refer to Prisma documentation for Prisma Client installation.');
// Example: npm install @prisma/client (for Node.js)
// Example: npm install @prisma/client (for TypeScript)
```

----------------------------------------

TITLE: Install Prisma Client and Extensions
DESCRIPTION: Commands to install the Prisma Client and the Prisma Accelerate extension for Deno.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/deployment/edge/deploy-to-deno-deploy

LANGUAGE: bash
CODE:
```
deno install npm:@prisma/client
deno install npm:@prisma/extension-accelerate
deno install npm:dotenv-cli
```

----------------------------------------

TITLE: Prisma IO Navigation Links
DESCRIPTION: Provides navigation links to key sections of the Prisma IO documentation, including getting started, database guides, ORM overview, and advanced features.

SOURCE: https://www.prisma.io/docs/orm/more/upgrade-guides/upgrading-versions/upgrading-to-prisma-3/referential-actions

LANGUAGE: APIDOC
CODE:
```
Navigation:
  - Get Started: https://www.prisma.io/docs/getting-started
  - Postgres: https://www.prisma.io/docs/postgres
  - ORM: https://www.prisma.io/docs/orm
  - Guides: https://www.prisma.io/docs/guides
  - More: https://www.prisma.io/docs/orm/more/upgrade-guides/upgrading-versions/upgrading-to-prisma-3/referential-actions

Related Tools:
  - Studio: Explore and manipulate your data (https://www.prisma.io/docs/postgres/database/prisma-studio)
  - Optimize: AI-driven query analysis (https://www.prisma.io/docs/optimize)
  - Accelerate: Make your database global (https://www.prisma.io/docs/accelerate)
```

----------------------------------------

TITLE: Connect to PostgreSQL Database (TypeScript)
DESCRIPTION: Instructions for connecting a TypeScript application to a PostgreSQL database using Prisma.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-typescript-postgresql

LANGUAGE: typescript
CODE:
```
// Example connection string for PostgreSQL
const connectionString: string = "postgresql://user:password@host:port/database";
console.log(`Connecting to PostgreSQL: ${connectionString}`);
// Prisma client would be initialized with this connection string.
```

----------------------------------------

TITLE: Connect Database with Prisma
DESCRIPTION: Guides on connecting your existing project to a relational database using Prisma. Covers setup for SQL Server with TypeScript.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/next-steps

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for database connection steps.');
// Example: prisma.schema configuration would be detailed here.
```

----------------------------------------

TITLE: Install Prisma Client (Node.js)
DESCRIPTION: Instructions for installing Prisma Client, the type-safe database client for Node.js applications.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/querying-the-database-typescript-prismaPostgres

LANGUAGE: node
CODE:
```
npm install prisma --save-dev
npx prisma generate

// Example usage in Node.js:
const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

async function main() {
  const users = await prisma.user.findMany()
  console.log(users)
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Install axios for HTTP requests
DESCRIPTION: This snippet demonstrates how to install the `axios` library, which is used for making HTTP requests in the project. It's a common dependency for interacting with APIs.

SOURCE: https://www.prisma.io/docs/guides/management-api-basic

LANGUAGE: bash
CODE:
```
npm install axios
# or
yarn add axios
```

----------------------------------------

TITLE: Prisma Client Setup and Configuration
DESCRIPTION: Guides on setting up and configuring Prisma Client for your project, including connection strings and environment variables.

SOURCE: https://www.prisma.io/docs/orm/more/upgrade-guides/upgrade-from-prisma-1/upgrading-the-prisma-layer-mysql

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  // ... your prisma client queries
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup
DESCRIPTION: Documentation for setting up Prisma with PostgreSQL, including CLI commands and importing from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-typescript-planetscale

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider postgresql
```

LANGUAGE: bash
CODE:
```
npx prisma db push
```

LANGUAGE: bash
CODE:
```
npx prisma db pull
```

----------------------------------------

TITLE: Install Prisma Client
DESCRIPTION: Instructions for installing Prisma Client, the type-safe database client for Node.js and TypeScript applications.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/querying-the-database-typescript-prismaPostgres

LANGUAGE: typescript
CODE:
```
npm install prisma --save-dev
npx prisma generate

// Example usage in TypeScript:
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main() {
  const users = await prisma.user.findMany()
  console.log(users)
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Connect Database with Prisma
DESCRIPTION: Guides on connecting your existing project to a relational database using Prisma. Covers setup for SQL Server with TypeScript.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/baseline-your-database-node-mysql

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for database connection steps.');
// Example: prisma.schema configuration would be detailed here.
```

----------------------------------------

TITLE: Prisma MongoDB Setup (TypeScript)
DESCRIPTION: Instructions for setting up Prisma with MongoDB for a TypeScript project. This includes initialization and basic client usage.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/install-prisma-client-typescript-sqlserver

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider mongodb
```

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main() {
  const users = await prisma.user.findMany()
  console.log(users)
}
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup from CLI
DESCRIPTION: Guidance on setting up Prisma with PostgreSQL directly from the command line interface.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/baseline-your-database-typescript-cockroachdb

LANGUAGE: cli
CODE:
```
npx prisma init --datasource-provider postgresql
npx prisma db push
```

----------------------------------------

TITLE: Prisma ORM Setup - Relational Databases (Node.js)
DESCRIPTION: Guides users on setting up the Prisma ORM for Node.js applications with various relational databases. Covers connecting to databases and basic ORM usage.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-sqlserver

LANGUAGE: javascript
CODE:
```
npx prisma init --datasource-provider <provider>

// Example: Connecting to PostgreSQL
// datasource db {
//   url      = env("DATABASE_URL")
//   provider = "postgresql"
// }

// Example: Connecting to MySQL
// datasource db {
//   url      = env("DATABASE_URL")
//   provider = "mysql"
// }

// Example: Connecting to SQL Server
// datasource db {
//   url      = env("DATABASE_URL")
//   provider = "sqlserver"
// }

// Example: Connecting to CockroachDB
// datasource db {
//   url      = env("DATABASE_URL")
//   provider = "cockroachdb"
// }

// Example: Connecting to PlanetScale
// datasource db {
//   url      = env("DATABASE_URL")
//   provider = "mysql"
// }

// After setting up .env with DATABASE_URL:
npx prisma migrate dev --name init
```

----------------------------------------

TITLE: Install Prisma Client (TypeScript and PlanetScale)
DESCRIPTION: Instructions for installing Prisma Client for TypeScript projects, specifically targeting PlanetScale as the database. This involves setting up the necessary dependencies and configurations.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-typescript-planetscale

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init
npx prisma generate
```

----------------------------------------

TITLE: Invoke Prisma CLI
DESCRIPTION: Demonstrates how to invoke the Prisma CLI after installation, typically used for managing Prisma-related tasks.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-mysql

LANGUAGE: bash
CODE:
```
npx prisma
```

----------------------------------------

TITLE: Create Migration Directory
DESCRIPTION: Creates a new directory for the initial migration, named '0_init', within the 'prisma/migrations' path. The `-p` flag ensures that parent directories are created if they don't exist.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/baseline-your-database-node-postgresql

LANGUAGE: bash
CODE:
```
mkdir -p prisma/migrations/0_init
```

----------------------------------------

TITLE: Install TanStack Router and Vinxi
DESCRIPTION: Installs the core TanStack Router and Vinxi packages required by TanStack Start.

SOURCE: https://www.prisma.io/docs/guides/tanstack-start

LANGUAGE: bash
CODE:
```
npm install @tanstack/react-start @tanstack/react-router vinxi
```

----------------------------------------

TITLE: Install Prisma Client
DESCRIPTION: Instructions for installing Prisma Client, the type-safe database client for Node.js and TypeScript applications.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/using-prisma-migrate-typescript-mysql

LANGUAGE: typescript
CODE:
```
npm install prisma --save-dev
npx prisma generate

// Example usage in TypeScript:
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main() {
  const users = await prisma.user.findMany()
  console.log(users)
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Install and Configure Better-Auth
DESCRIPTION: Guides on installing and configuring the Better-Auth library, a solution for authentication within your Next.js project using Prisma.

SOURCE: https://www.prisma.io/docs/guides/betterauth-nextjs

LANGUAGE: bash
CODE:
```
npm install better-auth @prisma/client
# or
yarn add better-auth @prisma/client
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup
DESCRIPTION: Documentation for setting up Prisma with PostgreSQL, including CLI commands and importing from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/evolve-your-schema-node-postgresql

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider postgresql
```

LANGUAGE: bash
CODE:
```
npx prisma db push
```

LANGUAGE: bash
CODE:
```
npx prisma db pull
```

----------------------------------------

TITLE: Install Prisma Client with Node.js for CockroachDB
DESCRIPTION: This guide details the steps to install Prisma Client using Node.js for a CockroachDB database. It covers setting up the project and connecting to the database.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-typescript-cockroachdb

LANGUAGE: node
CODE:
```
npx prisma init --datasource-provider cockroachdb
npx prisma db push
```

----------------------------------------

TITLE: Install Prisma Client for PlanetScale (Node.js)
DESCRIPTION: This snippet guides you through installing Prisma Client for a PlanetScale database using Node.js in an existing project. It covers the necessary steps to integrate Prisma into your application.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/install-prisma-client-typescript-postgresql

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider mysql
```

LANGUAGE: javascript
CODE:
```
const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()
```

----------------------------------------

TITLE: Connect Database with Prisma
DESCRIPTION: Guides on connecting your existing project to a relational database using Prisma. Covers setup for SQL Server with TypeScript.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/install-prisma-client-typescript-mysql

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for database connection steps.');
// Example: prisma.schema configuration would be detailed here.
```

----------------------------------------

TITLE: Querying Relational Databases with Prisma
DESCRIPTION: Guides on how to query relational databases using Prisma with different drivers and setups. Covers Node.js and TypeScript.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/using-prisma-migrate-node-planetscale

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main() {
  // ... your Prisma client queries
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Connect Database with Prisma
DESCRIPTION: Guides on connecting your database to Prisma. Covers setup for existing projects using TypeScript and SQL Server.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-typescript-planetscale

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for database connection steps.');
// Example: prisma.schema configuration would be detailed here.
```

----------------------------------------

TITLE: Connect Database with Prisma
DESCRIPTION: Guides on connecting your existing project to a relational database using Prisma. Covers setup for SQL Server with TypeScript.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-node-sqlserver

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for database connection steps.');
// Example: prisma.schema configuration would be detailed here.
```

----------------------------------------

TITLE: Install Prisma ORM and Initialize MongoDB Datasource
DESCRIPTION: Installs the latest version of Prisma ORM and the Prisma Client, then initializes a new Prisma project with MongoDB as the datasource provider. This process creates the necessary `prisma/schema.prisma` and `.env` files.

SOURCE: https://www.prisma.io/docs/orm/more/upgrade-guides/upgrade-from-prisma-1/upgrade-from-mongodb-beta

LANGUAGE: bash
CODE:
```
npm install prisma@latest && npm install @prisma/client  
npx prisma init --datasource-provider=mongodb
```

----------------------------------------

TITLE: Prisma Migrate Workflows
DESCRIPTION: Explains the workflows associated with Prisma Migrate, including getting started, understanding migration concepts, and common migration scenarios. It guides users on how to manage database schema evolution.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/custom-model-and-field-names

LANGUAGE: APIDOC
CODE:
```
Prisma Migrate Workflows:

  Getting Started:
    Steps: Define schema, run `prisma migrate dev`, apply migrations.
    Description: Initial setup for using Prisma Migrate.

  Understanding Migrations:
    Concepts: Schema changes, migration files, database state.
    Description: How Prisma Migrate tracks and applies schema changes.

  Common Workflows:
    - Development: `prisma migrate dev` for local changes.
    - Production: Using `prisma migrate deploy` for applying migrations in production environments.
    - Resetting: `prisma migrate reset` to reset the database to an empty state.
```

----------------------------------------

TITLE: Install Prisma Client (Node.js)
DESCRIPTION: Instructions for installing Prisma Client, the type-safe database client for Node.js applications.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/using-prisma-migrate-typescript-cockroachdb

LANGUAGE: node
CODE:
```
npm install prisma --save-dev
npx prisma generate

// Example usage in Node.js:
const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

async function main() {
  const users = await prisma.user.findMany()
  console.log(users)
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Connect Database with Prisma
DESCRIPTION: Guides on connecting your existing project to a relational database using Prisma. Covers setup for SQL Server with TypeScript.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/baseline-your-database-typescript-sqlserver

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for database connection steps.');
// Example: prisma.schema configuration would be detailed here.
```

----------------------------------------

TITLE: Prisma ORM Setup and Database Connection (Node.js)
DESCRIPTION: Guides on setting up Prisma ORM and connecting to various relational databases using Node.js. This includes steps for initializing Prisma, defining the schema, and establishing a connection.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/querying-the-database-node-cockroachdb

LANGUAGE: javascript
CODE:
```
npx prisma init --datasource-provider postgresql

// schema.prisma example
// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }
// generator client {
//   provider = "prisma-client-js"
// }
```

LANGUAGE: javascript
CODE:
```
// Example of connecting to a database
// import { PrismaClient } from '@prisma/client'
// const prisma = new PrismaClient()

// async function main() {
//   const users = await prisma.user.findMany()
//   console.log(users)
// }
```

----------------------------------------

TITLE: Prisma Client API Reference
DESCRIPTION: Provides an overview of the Prisma Client API, encouraging users to leverage editor auto-completion for discovering available methods and arguments. It suggests exploring the official API reference for a complete list of functionalities.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/next-steps

LANGUAGE: APIDOC
CODE:
```
Prisma Client API Reference:
  - Explore methods for querying, creating, updating, and deleting data.
  - Utilize editor auto-completion (e.g., CTRL+SPACE) to discover API calls and arguments.
  - Refer to the official [API reference](https://www.prisma.io/docs/orm/prisma-client) for comprehensive details.

Common Operations:
  - findMany: Retrieve multiple records with filtering and sorting.
  - create: Insert new records, potentially connecting to existing related records.
  - delete: Remove records based on specified criteria.
  - findUnique: Retrieve a single record based on a unique identifier.

Relations:
  - Use fluent API to traverse relationships between models (e.g., user.posts()).
```

----------------------------------------

TITLE: CockroachDB Cloud Serverless/Dedicated Connection URL
DESCRIPTION: An example of a connection URL for CockroachDB Serverless or Dedicated databases hosted on CockroachDB Cloud. It includes specific placeholders for cloud-hosted details and SSL configuration.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-cockroachdb

LANGUAGE: postgresql
CODE:
```
DATABASE_URL="postgresql://<myusername>:<mypassword>@<short-id>.<region>.cockroachlabs.cloud:26257/defaultdb?sslmode=verify-full&sslrootcert=$HOME/.postgresql/root.crt&options=--<mycluster>"
```

----------------------------------------

TITLE: Connect to MySQL Database (Node.js)
DESCRIPTION: Instructions for connecting a Node.js application to a MySQL database using Prisma.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-typescript-postgresql

LANGUAGE: javascript
CODE:
```
// Example connection string for MySQL
const connectionString = "mysql://user:password@host:port/database";
console.log(`Connecting to MySQL: ${connectionString}`);
// Prisma client would be initialized with this connection string.
```

----------------------------------------

TITLE: Set up Node.js and Prisma Application
DESCRIPTION: This section details the initial setup for a Node.js project using Prisma ORM. It includes project initialization, dependency installation, Prisma ORM setup, and creating an Express.js server.

SOURCE: https://www.prisma.io/docs/guides/docker

LANGUAGE: bash
CODE:
```
npm init -y
npm install prisma --save-dev
npx prisma init
npm install express

```

LANGUAGE: javascript
CODE:
```
const express = require('express');
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();
const app = express();

app.get('/', async (req, res) => {
  const users = await prisma.user.findMany();
  res.json(users);
});

const port = process.env.PORT || 3000;
app.listen(port, () => {
  console.log(`Server running on port ${port}`);
});

```

----------------------------------------

TITLE: Prisma Contact & Support Links
DESCRIPTION: Contact and support channels for Prisma, including community, enterprise, partners, and OSS friends.

SOURCE: https://www.prisma.io/docs/getting-started/quickstart-prismaPostgres

LANGUAGE: en
CODE:
```
Community: https://www.prisma.io/community
Support: https://www.prisma.io/support
Enterprise: https://www.prisma.io/enterprise
Partners: https://www.prisma.io/partners
OSS Friends: https://www.prisma.io/oss-friends
```

----------------------------------------

TITLE: Prisma CLI Synopsis and Examples
DESCRIPTION: Displays the Prisma CLI's command usage and help documentation, along with examples for common commands like init, generate, studio, migrate, db pull, db push, validate, format, version, and debug.

SOURCE: https://www.prisma.io/docs/orm/tools/prisma-cli

LANGUAGE: bash
CODE:
```
prisma

$ npx prisma
  
    ◭  Prisma is a modern DB toolkit to query, migrate and model your database (https://prisma.io)  
  
    Usage  
  
      $ prisma [command]  
  
    Commands  
  
                init   Set up Prisma for your app  
            generate   Generate artifacts (e.g. Prisma Client)  
                  db   Manage your database schema and lifecycle  
             migrate   Migrate your database  
              studio   Browse your data with Prisma Studio  
            validate   Validate your Prisma schema  
              format   Format your Prisma schema  
             version   Displays Prisma version info  
               debug   Displays Prisma debug info  
                 mcp   Starts an MCP server to use with AI development tools  
  
    Flags  
  
         --preview-feature   Run Preview Prisma commands  
         --help, -h          Show additional information about a command  
  
    Examples  
  
      Set up a new Prisma project  
      $ prisma init  
  
      Generate artifacts (e.g. Prisma Client)  
      $ prisma generate  
  
      Browse your data  
      $ prisma studio  
  
      Create migrations from your Prisma schema, apply them to the database, generate artifacts (e.g. Prisma Client)  
      $ prisma migrate dev  
  
      Pull the schema from an existing database, updating the Prisma schema  
      $ prisma db pull  
  
      Push the Prisma schema state to the database  
      $ prisma db push  
  
      Validate your Prisma schema  
      $ prisma validate  
  
      Format your Prisma schema  
      $ prisma format  
  
      Display Prisma version info  
      $ prisma version  
  
      Display Prisma debug info  
      $ prisma debug  
```

----------------------------------------

TITLE: Create and Navigate Project Directory
DESCRIPTION: Creates a new directory for the project and changes the current directory to it.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-typescript-postgresql

LANGUAGE: bash
CODE:
```
mkdir hello-prisma
cd hello-prisma
```

----------------------------------------

TITLE: Prisma ORM Setup and Database Connection (Node.js)
DESCRIPTION: Guides for setting up Prisma ORM from scratch with Node.js, covering connection to various relational databases like PostgreSQL, MySQL, PlanetScale, SQL Server, and CockroachDB.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/querying-the-database-node-planetscale

LANGUAGE: javascript
CODE:
```
npx prisma init --datasource-provider <provider>

// Example for PostgreSQL
npx prisma init --datasource-provider postgresql

// Example for PlanetScale
npx prisma init --datasource-provider mysql

// Then configure your database URL in .env file
DATABASE_URL="mysql://user:password@host:port/database"

// Generate Prisma Client
npx prisma generate
```

----------------------------------------

TITLE: Install Prisma Client for MongoDB (Node.js)
DESCRIPTION: Installs the Prisma Client for Node.js to interact with your MongoDB database. This is a crucial step before you can start querying.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/mongodb/querying-the-database-node-mongodb

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma generate
```

----------------------------------------

TITLE: Prisma MongoDB Setup (TypeScript)
DESCRIPTION: Instructions for setting up Prisma with MongoDB for a TypeScript project. This includes initialization and basic client usage.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/install-prisma-client-node-postgresql

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider mongodb
```

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main() {
  const users = await prisma.user.findMany()
  console.log(users)
}
```

----------------------------------------

TITLE: Prisma.io Navigation and Links
DESCRIPTION: Provides links to key sections of the Prisma.io documentation, including getting started, Postgres database operations, ORM features, guides, and specialized tools like Prisma Studio, Optimize, and Accelerate.

SOURCE: https://www.prisma.io/docs/postgres/query-optimization/recommendations/current-time

LANGUAGE: APIDOC
CODE:
```
Project: /websites/prisma_io

Navigation:
- Get Started: https://www.prisma.io/docs/getting-started
- Postgres: https://www.prisma.io/docs/postgres
- ORM: https://www.prisma.io/docs/orm
- Guides: https://www.prisma.io/docs/guides
- Studio: https://www.prisma.io/docs/postgres/database/prisma-studio
- Optimize: https://www.prisma.io/docs/optimize
- Accelerate: https://www.prisma.io/docs/accelerate

Postgres Specifics:
- Prisma Postgres: https://www.prisma.io/docs/postgres
- Introduction: https://www.prisma.io/docs/postgres/introduction
  - Getting started: https://www.prisma.io/docs/postgres/introduction/getting-started
  - npx create-db: https://www.prisma.io/docs/postgres/introduction/npx-create-db
  - Import from existing database: https://www.prisma.io/docs/postgres/introduction/import-from-existing-database
```

----------------------------------------

TITLE: Prisma IO Navigation and Features
DESCRIPTION: Links and descriptions for various sections of the Prisma IO documentation, including getting started, database guides, ORM information, and specific tools like Prisma Studio, Optimize, and Accelerate.

SOURCE: https://www.prisma.io/docs/guides/management-api

LANGUAGE: APIDOC
CODE:
```
Get Started: https://www.prisma.io/docs/getting-started
Postgres: https://www.prisma.io/docs/postgres
ORM: https://www.prisma.io/docs/orm
Guides: https://www.prisma.io/docs/guides
More: https://www.prisma.io/docs/guides/management-api

Studio: Explore and manipulate your data (https://www.prisma.io/docs/postgres/database/prisma-studio)
Optimize: AI-driven query analysis (https://www.prisma.io/docs/optimize)
Accelerate: Make your database global (https://www.prisma.io/docs/accelerate)
```

----------------------------------------

TITLE: Prisma Migrate Up Example
DESCRIPTION: Shows how to apply pending database migrations using Prisma Migrate.

SOURCE: https://www.prisma.io/docs/orm/more/upgrade-guides/upgrading-to-use-preview-features

LANGUAGE: bash
CODE:
```
npx prisma migrate up
```

----------------------------------------

TITLE: Prisma Database Introspection
DESCRIPTION: Details the process of introspecting your database schema to generate a Prisma Client. Supports various databases like CockroachDB, MySQL, PlanetScale, PostgreSQL, and SQL Server, with examples for both Node.js and TypeScript.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/evolve-your-schema-typescript-sqlserver

LANGUAGE: javascript
CODE:
```
console.log('Refer to Prisma documentation for introspection commands.');
// Example: npx prisma db pull (for Node.js)
// Example: prisma db pull (for TypeScript)
```

----------------------------------------

TITLE: Connect Database with Prisma
DESCRIPTION: Guides on connecting your existing project to a relational database using Prisma. Covers setup for SQL Server with TypeScript.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-node-planetscale

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for database connection steps.');
// Example: prisma.schema configuration would be detailed here.
```

----------------------------------------

TITLE: Connect Database with Prisma
DESCRIPTION: Guides on connecting your existing project to a relational database using Prisma. Covers setup for SQL Server with TypeScript.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/install-prisma-client-typescript-postgresql

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for database connection steps.');
// Example: prisma.schema configuration would be detailed here.
```

----------------------------------------

TITLE: Prisma with PostgreSQL
DESCRIPTION: Documentation and setup guides for using Prisma with PostgreSQL databases, including CLI commands and migration strategies.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-typescript-sqlserver

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider postgresql
npx prisma migrate dev --name init
```

----------------------------------------

TITLE: Connect Database with Prisma
DESCRIPTION: Guides on connecting your existing project to a relational database using Prisma. Covers setup for SQL Server with TypeScript.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/install-prisma-client-node-cockroachdb

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for database connection steps.');
// Example: prisma.schema configuration would be detailed here.
```

----------------------------------------

TITLE: Import Data to PostgreSQL with Prisma
DESCRIPTION: Instructions on how to import data into a PostgreSQL database using Prisma, specifically for existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-postgresql

LANGUAGE: bash
CODE:
```
npx prisma db push
```

----------------------------------------

TITLE: Prisma Database Introspection
DESCRIPTION: Details the process of introspecting your database schema to generate a Prisma Client. Supports various databases like CockroachDB, MySQL, PlanetScale, PostgreSQL, and SQL Server, with examples for both Node.js and TypeScript.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-postgresql

LANGUAGE: javascript
CODE:
```
console.log('Refer to Prisma documentation for introspection commands.');
// Example: npx prisma db pull (for Node.js)
// Example: prisma db pull (for TypeScript)
```

----------------------------------------

TITLE: Install Prisma Client (SQL Server)
DESCRIPTION: Instructions for installing Prisma Client for Node.js applications with SQL Server, enabling database access with JavaScript.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-node-sqlserver

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init
npm install @prisma/client
```

----------------------------------------

TITLE: Install Prisma Client
DESCRIPTION: Installs the Prisma Client package using npm and generates the client based on the Prisma schema.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-typescript-postgresql

LANGUAGE: bash
CODE:
```
npm install @prisma/client
```

LANGUAGE: bash
CODE:
```
npx prisma generate
```

----------------------------------------

TITLE: Install Prisma Client
DESCRIPTION: Instructions for installing Prisma Client for both Node.js and TypeScript projects. This enables type-safe database access.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-postgresql

LANGUAGE: node
CODE:
```
console.log('See Prisma documentation for installation commands.');
// Example: npm install prisma --save-dev
// Example: npm install @prisma/client
```

LANGUAGE: typescript
CODE:
```
console.log('See Prisma documentation for installation commands.');
// Example: npm install prisma --save-dev
// Example: npm install @prisma/client
```

----------------------------------------

TITLE: Connect to PlanetScale Database (Node.js)
DESCRIPTION: Instructions for connecting a Node.js application to a PlanetScale database using Prisma.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-typescript-postgresql

LANGUAGE: javascript
CODE:
```
// Example connection string for PlanetScale
const connectionString = "mysql://user:password@host:port/database"; // PlanetScale uses MySQL protocol
console.log(`Connecting to PlanetScale: ${connectionString}`);
// Prisma client would be initialized with this connection string.
```

----------------------------------------

TITLE: Prisma Database Introspection
DESCRIPTION: Details the process of introspecting your database schema to generate a Prisma Client. Supports various databases like CockroachDB, MySQL, PlanetScale, PostgreSQL, and SQL Server, with examples for both Node.js and TypeScript.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-cockroachdb

LANGUAGE: javascript
CODE:
```
console.log('Refer to Prisma documentation for introspection commands.');
// Example: npx prisma db pull (for Node.js)
// Example: prisma db pull (for TypeScript)
```

----------------------------------------

TITLE: Add Prisma ORM to Existing Project
DESCRIPTION: Connect Prisma ORM to your existing database by introspecting its schema and learn how to query your data.

SOURCE: https://www.prisma.io/docs/getting-started

LANGUAGE: typescript
CODE:
```
// Example for PostgreSQL
// npx prisma init --datasource-provider postgresql
// npx prisma db pull
// npx prisma generate
```

LANGUAGE: typescript
CODE:
```
// Example for MySQL
// npx prisma init --datasource-provider mysql
// npx prisma db pull
// npx prisma generate
```

LANGUAGE: typescript
CODE:
```
// Example for SQL Server
// npx prisma init --datasource-provider sqlserver
// npx prisma db pull
// npx prisma generate
```

LANGUAGE: typescript
CODE:
```
// Example for PlanetScale
// npx prisma init --datasource-provider mysql
// npx prisma db pull
// npx prisma generate
```

LANGUAGE: typescript
CODE:
```
// Example for CockroachDB
// npx prisma init --datasource-provider cockroachdb
// npx prisma db pull
// npx prisma generate
```

LANGUAGE: typescript
CODE:
```
// Example for MongoDB
// npx prisma init --datasource-provider mongodb
// npx prisma db pull
// npx prisma generate
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup
DESCRIPTION: Documentation for setting up Prisma with PostgreSQL, including CLI commands and importing from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/baseline-your-database-typescript-postgresql

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider postgresql
```

LANGUAGE: bash
CODE:
```
npx prisma db push
```

LANGUAGE: bash
CODE:
```
npx prisma db pull
```

----------------------------------------

TITLE: Install Prisma Client
DESCRIPTION: Instructions for installing Prisma Client, the type-safe database client for Node.js and TypeScript applications.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/querying-the-database-typescript-sqlserver

LANGUAGE: typescript
CODE:
```
npm install prisma --save-dev
npx prisma generate

// Example usage in TypeScript:
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main() {
  const users = await prisma.user.findMany()
  console.log(users)
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Connect to PostgreSQL Database (Node.js)
DESCRIPTION: Instructions for connecting a Node.js application to a PostgreSQL database using Prisma.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-typescript-postgresql

LANGUAGE: javascript
CODE:
```
// Example connection string for PostgreSQL
const connectionString = "postgresql://user:password@host:port/database";
console.log(`Connecting to PostgreSQL: ${connectionString}`);
// Prisma client would be initialized with this connection string.
```

----------------------------------------

TITLE: Connect Database with Prisma
DESCRIPTION: Guides on connecting your database to Prisma. Covers setup for existing projects using TypeScript and SQL Server.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-typescript-sqlserver

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for database connection steps.');
// Example: prisma.schema configuration would be detailed here.
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup
DESCRIPTION: Documentation for setting up Prisma with PostgreSQL, including CLI commands and importing from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/install-prisma-client-typescript-cockroachdb

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider postgresql
```

LANGUAGE: bash
CODE:
```
npx prisma db push
```

LANGUAGE: bash
CODE:
```
npx prisma db pull
```

----------------------------------------

TITLE: Install Prisma CLI and Prisma Client
DESCRIPTION: Installs the necessary Prisma tools for database management and type-safe client generation. This is a foundational step for using Prisma in your project.

SOURCE: https://www.prisma.io/docs/guides/solid-start

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init
npm install @prisma/client
```

----------------------------------------

TITLE: Permit RBAC Prisma Client Extension Usage
DESCRIPTION: This section outlines the prerequisites, installation, and basic setup for using the Permit RBAC Prisma Client Extension. It guides developers on how to integrate RBAC, ABAC, and ReBAC into their Prisma applications.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/client-extensions/shared-extensions/permit-rbac

LANGUAGE: javascript
CODE:
```
/*
  Prerequisites:
  - A Permit.io account
  - Prisma project setup

  Installation:
  npm install @permitio/permit-prisma-client

  Basic Setup:
  // In your Prisma Client initialization file (e.g., prisma/index.ts)
  import { PrismaClient } from '@prisma/client'
  import { withPermit } from '@permitio/permit-prisma-client'

  const prisma = new PrismaClient()
  const permitPrisma = withPermit(prisma, {
    // Your Permit.io API key and tenant ID
    api_key: process.env.PERMIT_API_KEY,
    tenant_id: process.env.PERMIT_TENANT_ID,
  })

  // Use permitPrisma instead of prisma for operations requiring authorization
  // Example: await permitPrisma.user.findMany()
*/
```

----------------------------------------

TITLE: Install Prisma Client for MySQL (Node.js)
DESCRIPTION: This snippet guides you through installing Prisma Client for a MySQL database using Node.js in an existing project. It covers the necessary steps to integrate Prisma into your application.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/install-prisma-client-typescript-postgresql

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider mysql
```

LANGUAGE: javascript
CODE:
```
const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()
```

----------------------------------------

TITLE: Connect Database with Prisma
DESCRIPTION: Guides on connecting your existing project to a relational database using Prisma. Covers setup for SQL Server with TypeScript.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-node-sqlserver

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for database connection steps.');
// Example: prisma.schema configuration would be detailed here.
```

----------------------------------------

TITLE: Connect Database with Prisma
DESCRIPTION: Guides on connecting your existing project to a relational database using Prisma. Covers setup for SQL Server with TypeScript.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-node-postgresql

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for database connection steps.');
// Example: prisma.schema configuration would be detailed here.
```

----------------------------------------

TITLE: Install Prisma Client (Node.js)
DESCRIPTION: Instructions for installing Prisma Client, the type-safe database client for Node.js applications.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/querying-the-database-typescript-sqlserver

LANGUAGE: node
CODE:
```
npm install prisma --save-dev
npx prisma generate

// Example usage in Node.js:
const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

async function main() {
  const users = await prisma.user.findMany()
  console.log(users)
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Install Prisma Client for SQL Server (Node.js)
DESCRIPTION: This snippet guides you through installing Prisma Client for a SQL Server database using Node.js in an existing project. It covers the necessary steps to integrate Prisma into your application.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/install-prisma-client-typescript-postgresql

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider sqlserver
```

LANGUAGE: javascript
CODE:
```
const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()
```

----------------------------------------

TITLE: Connect Database with Prisma
DESCRIPTION: Guides on connecting your existing project to a relational database using Prisma. Covers setup for SQL Server with TypeScript.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-node-mysql

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for database connection steps.');
// Example: prisma.schema configuration would be detailed here.
```

----------------------------------------

TITLE: Connect Database with Prisma
DESCRIPTION: Guides on connecting your database to Prisma. Covers setup for existing projects using TypeScript and SQL Server.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-typescript-cockroachdb

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for database connection steps.');
// Example: prisma.schema configuration would be detailed here.
```

----------------------------------------

TITLE: Adding Prisma to an Existing Project
DESCRIPTION: Steps for integrating Prisma ORM into an existing project. This includes installation, schema generation, and client setup.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/mongodb/connect-your-database-typescript-mongodb

LANGUAGE: bash
CODE:
```
# Install Prisma
npm install prisma --save-dev
# or
yarn add prisma --dev

# Initialize Prisma (if not already done)
npx prisma init

# Ensure your DATABASE_URL is set in your .env file

# Generate the Prisma Client
npx prisma generate
# or
yarn prisma generate
```

----------------------------------------

TITLE: Connect Database with Prisma
DESCRIPTION: Guides on connecting your database to Prisma. Covers setup for existing projects using TypeScript and SQL Server.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-typescript-mysql

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for database connection steps.');
// Example: prisma.schema configuration would be detailed here.
```

----------------------------------------

TITLE: Install Prisma Client for PostgreSQL (Node.js)
DESCRIPTION: This snippet guides you through installing Prisma Client for a PostgreSQL database using Node.js in an existing project. It covers the necessary steps to integrate Prisma into your application.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/install-prisma-client-typescript-postgresql

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider postgresql
```

LANGUAGE: javascript
CODE:
```
const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()
```

----------------------------------------

TITLE: Prisma Client Setup & Configuration
DESCRIPTION: Guides on setting up and configuring the Prisma Client in your application, including environment variables and connection strings.

SOURCE: https://www.prisma.io/docs/orm/overview/databases/postgresql

LANGUAGE: javascript
CODE:
```
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  // Example usage:
  const newUser = await prisma.user.create({
    data: {
      email: 'test@example.com',
      name: 'Test User',
    },
  })
  console.log(newUser)
}

main()
  .catch((e) => {
    console.error(e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Connect Database with Prisma
DESCRIPTION: Guides on connecting your existing project to a relational database using Prisma. Covers setup for SQL Server with TypeScript.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/evolve-your-schema-node-sqlserver

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for database connection steps.');
// Example: prisma.schema configuration would be detailed here.
```

----------------------------------------

TITLE: Prisma Accelerate
DESCRIPTION: Enhance database query performance with global database caching and connection pooling using Prisma Accelerate.

SOURCE: https://www.prisma.io/docs/getting-started

LANGUAGE: APIDOC
CODE:
```
Prisma Accelerate Setup:

1. Add Accelerate to your project:
   - Follow the 'Get started' guide for integration.

Features:
- Global database caching
- Connection pooling

Resources:
- Get started: https://www.prisma.io/docs/accelerate/getting-started
- Examples: https://github.com/prisma/prisma-examples?tab=readme-ov-file#prisma-accelerate
- Speed Test: https://accelerate-speed-test.prisma.io/
```

----------------------------------------

TITLE: Install Prisma Client
DESCRIPTION: Instructions for installing Prisma Client for both Node.js and TypeScript projects. This enables type-safe database access.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/using-prisma-migrate-node-planetscale

LANGUAGE: node
CODE:
```
console.log('See Prisma documentation for installation commands.');
// Example: npm install prisma --save-dev
// Example: npm install @prisma/client
```

LANGUAGE: typescript
CODE:
```
console.log('See Prisma documentation for installation commands.');
// Example: npm install prisma --save-dev
// Example: npm install @prisma/client
```

----------------------------------------

TITLE: Install Prisma Client
DESCRIPTION: Installs the `@prisma/client` package using npm. This package provides the Prisma Client API for interacting with your database.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/mongodb/install-prisma-client-node-mongodb

LANGUAGE: bash
CODE:
```
npm install @prisma/client
```

----------------------------------------

TITLE: Install Prisma Client
DESCRIPTION: Provides instructions for installing Prisma Client in your project, enabling type-safe database access. Covers installation for Node.js and TypeScript with support for CockroachDB, MySQL, PlanetScale, PostgreSQL, and SQL Server.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-node-sqlserver

LANGUAGE: javascript
CODE:
```
console.log('Refer to Prisma documentation for Prisma Client installation.');
// Example: npm install @prisma/client (for Node.js)
// Example: npm install @prisma/client (for TypeScript)
```

----------------------------------------

TITLE: Connect to SQL Server Database (TypeScript)
DESCRIPTION: Instructions for connecting a TypeScript application to a SQL Server database using Prisma.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-typescript-postgresql

LANGUAGE: typescript
CODE:
```
// Example connection string for SQL Server
const connectionString: string = "sqlserver://user:password@host:port;database=databaseName";
console.log(`Connecting to SQL Server: ${connectionString}`);
// Prisma client would be initialized with this connection string.
```

----------------------------------------

TITLE: Connect Database with Prisma
DESCRIPTION: Guides on connecting your existing project to a relational database using Prisma. Covers setup for SQL Server with TypeScript.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-planetscale

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for database connection steps.');
// Example: prisma.schema configuration would be detailed here.
```

----------------------------------------

TITLE: Connect Database with Prisma
DESCRIPTION: Guides on connecting your existing project to a relational database using Prisma. Covers setup for SQL Server with TypeScript.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-node-mysql

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for database connection steps.');
// Example: prisma.schema configuration would be detailed here.
```

----------------------------------------

TITLE: Install Prisma Client
DESCRIPTION: Instructions for installing Prisma Client for both Node.js and TypeScript projects. This enables type-safe database access.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/querying-the-database-typescript-mysql

LANGUAGE: node
CODE:
```
console.log('See Prisma documentation for installation commands.');
// Example: npm install prisma --save-dev
// Example: npm install @prisma/client
```

LANGUAGE: typescript
CODE:
```
console.log('See Prisma documentation for installation commands.');
// Example: npm install prisma --save-dev
// Example: npm install @prisma/client
```

----------------------------------------

TITLE: Generate Prisma Client for Accelerate (Older Versions)
DESCRIPTION: Generates the Prisma Client with the `--accelerate` or `--data-proxy` flag for Prisma versions prior to 5.2.0 and 5.0.0 respectively.

SOURCE: https://www.prisma.io/docs/accelerate/getting-started

LANGUAGE: bash
CODE:
```
npx prisma generate --accelerate
```

LANGUAGE: bash
CODE:
```
npx prisma generate --data-proxy
```

----------------------------------------

TITLE: Prisma ORM Guides and Resources
DESCRIPTION: Links to various guides and resources for learning and utilizing Prisma ORM, including its core concepts and advanced features.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/deployment/serverless/deploy-to-aws-lambda

LANGUAGE: markdown
CODE:
```
Guides: https://www.prisma.io/docs/guides
```

----------------------------------------

TITLE: Connect Database (Node.js) - MySQL
DESCRIPTION: Guides on connecting a Node.js application to a MySQL database using Prisma. Covers initial setup and connection string configuration.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-node-planetscale

LANGUAGE: javascript
CODE:
```
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-node-mysql
```

----------------------------------------

TITLE: Install Prisma Client
DESCRIPTION: Installs the @prisma/client package using npm. This is the first step to using Prisma Client in your project.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-typescript-cockroachdb

LANGUAGE: bash
CODE:
```
npm install @prisma/client
```

----------------------------------------

TITLE: Install Prisma Client for TypeScript with PlanetScale
DESCRIPTION: This snippet details the steps for installing Prisma Client in a TypeScript project when using PlanetScale. It ensures proper setup for type-safe database interactions.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/install-prisma-client-node-cockroachdb

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider mysql
npx prisma generate
```

----------------------------------------

TITLE: Install Prisma Client
DESCRIPTION: Instructions for installing Prisma Client, the type-safe database client for Node.js and TypeScript applications.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/using-prisma-migrate-typescript-cockroachdb

LANGUAGE: typescript
CODE:
```
npm install prisma --save-dev
npx prisma generate

// Example usage in TypeScript:
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main() {
  const users = await prisma.user.findMany()
  console.log(users)
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Connect Database with Prisma
DESCRIPTION: Guides on connecting your database to Prisma. Covers setup for existing projects using TypeScript and SQL Server.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/introspection-typescript-postgresql

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for database connection steps.');
// Example: prisma.schema configuration would be detailed here.
```

----------------------------------------

TITLE: Importing Data from PostgreSQL
DESCRIPTION: This guide explains how to import data into a PostgreSQL database using Prisma. It covers the necessary steps and commands to facilitate data migration or initial setup.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/mongodb/install-prisma-client-node-mongodb

LANGUAGE: bash
CODE:
```
npx prisma db push
# Or for more complex migrations:
npx prisma migrate dev --name init_schema
```

----------------------------------------

TITLE: Connect Database with Prisma
DESCRIPTION: Guides on connecting your existing project to a relational database using Prisma. Covers setup for SQL Server with TypeScript.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-node-planetscale

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for database connection steps.');
// Example: prisma.schema configuration would be detailed here.
```

----------------------------------------

TITLE: Connect to MySQL Database (TypeScript)
DESCRIPTION: This guide explains how to set up Prisma Client for a TypeScript project to connect to a MySQL database. It covers the installation and initialization steps.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-node-postgresql

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider mysql
npm install @prisma/client
```

----------------------------------------

TITLE: Prisma Client: Setup & Configuration
DESCRIPTION: Guide to setting up and configuring Prisma Client in your Node.js or TypeScript project.

SOURCE: https://www.prisma.io/docs/orm/overview/databases/neon

LANGUAGE: javascript
CODE:
```
import { PrismaClient } from '@prisma/client'

// Instantiate PrismaClient
const prisma = new PrismaClient({
  // Optional: Configure logging
  log: [
    'query',
    'info',
    'warn',
    'error',
  ],
  // Optional: Configure error format
  errorFormat: 'pretty',
})

// Use the prisma client instance throughout your application
async function getUser(id) {
  const user = await prisma.user.findUnique({
    where: {
      id: id,
    },
  })
  return user
}

// Remember to disconnect the client when your application shuts down
// prisma.$disconnect()

```

----------------------------------------

TITLE: Prisma Postgres Query Optimization Setup
DESCRIPTION: Guides users through the initial setup process for query optimization features within Prisma Postgres. This includes configuring necessary tools and ensuring the environment is ready for performance analysis.

SOURCE: https://www.prisma.io/docs/postgres/query-optimization

LANGUAGE: APIDOC
CODE:
```
Query Optimization Setup:
  Purpose: To configure Prisma Postgres for query performance analysis.
  Steps:
    1. Install Prisma CLI: Ensure you have the latest Prisma CLI installed.
       `npm install prisma --save-dev` or `yarn add prisma --dev`
    2. Configure Prisma Schema: Make sure your schema is up-to-date.
    3. Enable Query Logging: Configure your database or Prisma Client to log queries.
       (Specific configuration depends on the environment and database)
    4. Initialize Prisma Optimize: Run the initialization command if applicable.
       `npx prisma optimize init` (Conceptual command)
  Dependencies:
    - Prisma Client
    - Prisma Schema
    - Database connection
  Outputs:
    - Optimized query execution plans.
    - Performance metrics.
  Considerations:
    - Ensure proper database permissions for logging.
    - Monitor resource usage during analysis.
```

----------------------------------------

TITLE: Prisma Client - Setup and Configuration
DESCRIPTION: Guides on setting up and configuring Prisma Client in your project, including database connection and schema generation.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/queries

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function main() {
  // Your database operations here
}

main()
  .catch((e) => {
    throw e;
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
```

----------------------------------------

TITLE: Install Prisma Client for TypeScript with SQL Server
DESCRIPTION: This snippet details the steps for installing Prisma Client in a TypeScript project with SQL Server. It ensures proper setup for type-safe database operations.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/install-prisma-client-node-cockroachdb

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider sqlserver
npx prisma generate
```

----------------------------------------

TITLE: Install Prisma Client (Node.js)
DESCRIPTION: Instructions for installing Prisma Client, the type-safe database client for Node.js applications.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-node-cockroachdb

LANGUAGE: node
CODE:
```
npm install prisma --save-dev
npx prisma generate

// Example usage in Node.js:
const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

async function main() {
  const users = await prisma.user.findMany()
  console.log(users)
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Install Prisma Client (JavaScript & PlanetScale)
DESCRIPTION: Instructions for installing Prisma Client, specifically for JavaScript environments and PlanetScale databases. This typically involves using npm or yarn.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-node-planetscale

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init
npm install @prisma/client
```

----------------------------------------

TITLE: Install Prisma Client
DESCRIPTION: Instructions for installing Prisma Client, the type-safe database client for Node.js and TypeScript applications.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-node-mysql

LANGUAGE: typescript
CODE:
```
npm install prisma --save-dev
npx prisma generate

// Example usage in TypeScript:
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main() {
  const users = await prisma.user.findMany()
  console.log(users)
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup
DESCRIPTION: Documentation for setting up Prisma with PostgreSQL, including CLI commands and importing from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/evolve-your-schema-typescript-mysql

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider postgresql
```

LANGUAGE: bash
CODE:
```
npx prisma db push
```

LANGUAGE: bash
CODE:
```
npx prisma db pull
```

----------------------------------------

TITLE: Prisma ORM Setup and Database Connection (TypeScript)
DESCRIPTION: Guides for setting up Prisma ORM from scratch with TypeScript, covering connection to various relational databases like PostgreSQL, MySQL, PlanetScale, SQL Server, and CockroachDB.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/querying-the-database-node-planetscale

LANGUAGE: typescript
CODE:
```
npx prisma init --datasource-provider <provider>

// Example for PostgreSQL
npx prisma init --datasource-provider postgresql

// Example for PlanetScale
npx prisma init --datasource-provider mysql

// Then configure your database URL in .env file
DATABASE_URL="mysql://user:password@host:port/database"

// Generate Prisma Client
npx prisma generate
```

----------------------------------------

TITLE: Prisma Client Setup and Configuration
DESCRIPTION: Guides on setting up and configuring Prisma Client in your Node.js or TypeScript project.

SOURCE: https://www.prisma.io/docs/orm/reference/prisma-client-reference

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  // Example query
  const users = await prisma.user.findMany({
    where: {
      email: {
        endsWith: '@example.com'
      }
    }
  })
  console.log(users)
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Importing Data into Prisma Postgres
DESCRIPTION: Guides on how to import data from existing PostgreSQL and MySQL databases into a Prisma project.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-typescript-sqlserver

LANGUAGE: bash
CODE:
```
npx prisma db push
# For existing data, manual migration or custom scripts might be needed.
```

----------------------------------------

TITLE: Prisma MongoDB Setup (TypeScript)
DESCRIPTION: Instructions for setting up Prisma with MongoDB for a TypeScript project. This includes initialization and basic client usage.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-planetscale

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider mongodb
```

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main() {
  const users = await prisma.user.findMany()
  console.log(users)
}
```

----------------------------------------

TITLE: Add Prisma to Existing Project (Node.js)
DESCRIPTION: Guides on integrating Prisma into an existing Node.js project, covering setup and database connection for various relational databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/baseline-your-database-node-cockroachdb

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init
```

----------------------------------------

TITLE: Connection Pooling Guides
DESCRIPTION: Guides detailing how to use connection pooling with Prisma Accelerate, specifically with Neon and Supabase.

SOURCE: https://www.prisma.io/docs/guides

LANGUAGE: en
CODE:
```
Neon with Accelerate
Supabase with Accelerate
```

----------------------------------------

TITLE: Connect Database with Prisma
DESCRIPTION: Guides on connecting your existing project to a relational database using Prisma. Covers setup for SQL Server with TypeScript.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/evolve-your-schema-node-mysql

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for database connection steps.');
// Example: prisma.schema configuration would be detailed here.
```

----------------------------------------

TITLE: Install Prisma Client for MySQL (TypeScript)
DESCRIPTION: This snippet guides you through installing Prisma Client for a MySQL database using TypeScript in an existing project. It covers the necessary steps to integrate Prisma into your Node.js application.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/install-prisma-client-typescript-postgresql

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider mysql
```

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()
```

----------------------------------------

TITLE: Install Prisma Client for MongoDB (Node.js)
DESCRIPTION: This snippet details the process of installing Prisma Client for a Node.js project with a MongoDB database. It covers the necessary commands to set up the client, enabling database interactions.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/mongodb/install-prisma-client-node-mongodb

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider mongodb
npx prisma generate
```

----------------------------------------

TITLE: Instantiate Prisma Client (TypeScript)
DESCRIPTION: Demonstrates the basic import and instantiation of Prisma Client in a TypeScript project. This is the standard way to get started with Prisma Client.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/instantiate-prisma-client

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()
```

----------------------------------------

TITLE: Install Prisma Client
DESCRIPTION: Provides instructions for installing Prisma Client in your project, enabling type-safe database access. Covers installation for Node.js and TypeScript with support for CockroachDB, MySQL, PlanetScale, PostgreSQL, and SQL Server.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-node-planetscale

LANGUAGE: javascript
CODE:
```
console.log('Refer to Prisma documentation for Prisma Client installation.');
// Example: npm install @prisma/client (for Node.js)
// Example: npm install @prisma/client (for TypeScript)
```

----------------------------------------

TITLE: Connect Database with Prisma
DESCRIPTION: Guides on connecting your existing project to a relational database using Prisma. Covers setup for SQL Server with TypeScript.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-node-planetscale

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for database connection steps.');
// Example: prisma.schema configuration would be detailed here.
```

----------------------------------------

TITLE: Install Prisma Client for TypeScript with PostgreSQL
DESCRIPTION: This snippet details the steps for installing Prisma Client in a TypeScript project with PostgreSQL. It ensures proper setup for type-safe database operations.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/install-prisma-client-node-cockroachdb

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider postgresql
npx prisma generate
```

----------------------------------------

TITLE: Install Prisma Client
DESCRIPTION: Provides instructions for installing Prisma Client in your project, enabling type-safe database access. Covers installation for Node.js and TypeScript with support for CockroachDB, MySQL, PlanetScale, PostgreSQL, and SQL Server.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/baseline-your-database-typescript-sqlserver

LANGUAGE: javascript
CODE:
```
console.log('Refer to Prisma documentation for Prisma Client installation.');
// Example: npm install @prisma/client (for Node.js)
// Example: npm install @prisma/client (for TypeScript)
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup
DESCRIPTION: Documentation for setting up Prisma with PostgreSQL, including CLI commands and importing from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-typescript-cockroachdb

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider postgresql
```

LANGUAGE: bash
CODE:
```
npx prisma db push
```

LANGUAGE: bash
CODE:
```
npx prisma db pull
```

----------------------------------------

TITLE: Start Nuxt Development Server
DESCRIPTION: Command to start the Nuxt.js development server. This action triggers several automatic processes including Prisma CLI installation, project initialization, and database migration.

SOURCE: https://www.prisma.io/docs/orm/more/help-and-troubleshooting/prisma-nuxt-module

LANGUAGE: bash
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Install Prisma Client for CockroachDB (Node.js)
DESCRIPTION: This snippet guides you through installing Prisma Client for a CockroachDB database using Node.js in an existing project. It covers the necessary steps to integrate Prisma into your application.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/install-prisma-client-typescript-postgresql

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider cockroachdb
```

LANGUAGE: javascript
CODE:
```
const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()
```

----------------------------------------

TITLE: Connect Database with Prisma
DESCRIPTION: Guides on connecting your existing project to a relational database using Prisma. Covers setup for SQL Server with TypeScript.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/baseline-your-database-node-cockroachdb

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for database connection steps.');
// Example: prisma.schema configuration would be detailed here.
```

----------------------------------------

TITLE: Prisma ORM Setup - Relational Databases (TypeScript)
DESCRIPTION: Guides users on setting up the Prisma ORM for TypeScript applications with various relational databases. Covers connecting to databases and basic ORM usage.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-sqlserver

LANGUAGE: typescript
CODE:
```
npx prisma init --datasource-provider <provider>

// Example: Connecting to PostgreSQL
// datasource db {
//   url      = env("DATABASE_URL")
//   provider = "postgresql"
// }

// Example: Connecting to MySQL
// datasource db {
//   url      = env("DATABASE_URL")
//   provider = "mysql"
// }

// Example: Connecting to SQL Server
// datasource db {
//   url      = env("DATABASE_URL")
//   provider = "sqlserver"
// }

// Example: Connecting to CockroachDB
// datasource db {
//   url      = env("DATABASE_URL")
//   provider = "cockroachdb"
// }

// Example: Connecting to PlanetScale
// datasource db {
//   url      = env("DATABASE_URL")
//   provider = "mysql"
// }

// After setting up .env with DATABASE_URL:
npx prisma migrate dev --name init
```

----------------------------------------

TITLE: Connect Database with Prisma
DESCRIPTION: Guides on connecting your existing project to a relational database using Prisma. Covers setup for SQL Server with TypeScript.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/baseline-your-database-typescript-postgresql

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for database connection steps.');
// Example: prisma.schema configuration would be detailed here.
```

----------------------------------------

TITLE: Connect Database with Prisma
DESCRIPTION: Guides on connecting your existing project to a relational database using Prisma. Covers setup for SQL Server with TypeScript.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-mysql

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for database connection steps.');
// Example: prisma.schema configuration would be detailed here.
```

----------------------------------------

TITLE: Connect Database with Prisma
DESCRIPTION: Guides on connecting your existing project to a relational database using Prisma. Covers setup for SQL Server with TypeScript.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-typescript-sqlserver

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for database connection steps.');
// Example: prisma.schema configuration would be detailed here.
```

----------------------------------------

TITLE: Prisma MongoDB Setup (TypeScript)
DESCRIPTION: Instructions for setting up Prisma with MongoDB for a TypeScript project. This includes initialization and basic client usage.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/install-prisma-client-node-mysql

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider mongodb
```

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main() {
  const users = await prisma.user.findMany()
  console.log(users)
}
```

----------------------------------------

TITLE: Permit.io Access Control Guide - Table of Contents
DESCRIPTION: Table of contents for the Permit.io Access Control guide in Prisma documentation, outlining setup, authorization models, data modeling, and policy definition.

SOURCE: https://www.prisma.io/docs/guides/permit-io-access-control

LANGUAGE: en
CODE:
```
Introduction: https://www.prisma.io/docs/guides/permit-io-access-control#introduction
Prerequisites: https://www.prisma.io/docs/guides/permit-io-access-control#prerequisites
1. Set up your project: https://www.prisma.io/docs/guides/permit-io-access-control#1-set-up-your-project
  1.1 Create the project folder: https://www.prisma.io/docs/guides/permit-io-access-control#11-create-the-project-folder
  1.2 Install the required dependencies: https://www.prisma.io/docs/guides/permit-io-access-control#12-install-the-required-dependencies
  1.3 Set up your TypeScript config: https://www.prisma.io/docs/guides/permit-io-access-control#13-set-up-your-typescript-config
  1.4 Create your folder structure: https://www.prisma.io/docs/guides/permit-io-access-control#14-create-your-folder-structure
2. The authorization model: https://www.prisma.io/docs/guides/permit-io-access-control#2-the-authorization-model
  Scenario overview: https://www.prisma.io/docs/guides/permit-io-access-control#scenario-overview
  Resources: https://www.prisma.io/docs/guides/permit-io-access-control#resources
  Relationships: https://www.prisma.io/docs/guides/permit-io-access-control#relationships
  Instance-level roles: https://www.prisma.io/docs/guides/permit-io-access-control#instance-level-roles
  Role derivation: https://www.prisma.io/docs/guides/permit-io-access-control#role-derivation
  Access policies: https://www.prisma.io/docs/guides/permit-io-access-control#access-policies
3. Define your data model: https://www.prisma.io/docs/guides/permit-io-access-control#3-define-your-data-model
  3.1 Update your Prisma schema: https://www.prisma.io/docs/guides/permit-io-access-control#31-update-your-prisma-schema
  3.2 Run your first migration: https://www.prisma.io/docs/guides/permit-io-access-control#32-run-your-first-migration
  3.3 Confirm the structure: https://www.prisma.io/docs/guides/permit-io-access-control#33-confirm-the-structure
4. Seed test data with project boundaries: https://www.prisma.io/docs/guides/permit-io-access-control#4-seed-test-data-with-project-boundaries
  4.1 Create the seed script: https://www.prisma.io/docs/guides/permit-io-access-control#41-create-the-seed-script
  4.2 Run the seed script: https://www.prisma.io/docs/guides/permit-io-access-control#42-run-the-seed-script
  5.2 Configure the Permit client: https://www.prisma.io/docs/guides/permit-io-access-control#52-configure-the-permit-client
  5.3 What this configuration does: https://www.prisma.io/docs/guides/permit-io-access-control#53-what-this-configuration-does
6. Define your access control policy in Permit.io: https://www.prisma.io/docs/guides/permit-io-access-control#6-define-your-access-control-policy-in-permitio
  6.1 Install the Permit CLI: https://www.prisma.io/docs/guides/permit-io-access-control#61-install-the-permit-cli
  6.2 Log in to your Permit account: https://www.prisma.io/docs/guides/permit-io-access-control#62-log-in-to-your-permit-account
  6.3 Apply the ReBAC policy template: https://www.prisma.io/docs/guides/permit-io-access-control#63-apply-the-rebac-policy-template
  6.4 View the policy in the Permit UI: https://www.prisma.io/docs/guides/permit-io-access-control#64-view-the-policy-in-the-permit-ui
```

----------------------------------------

TITLE: Install Prisma Client for PlanetScale (TypeScript)
DESCRIPTION: This snippet guides you through installing Prisma Client for a PlanetScale database using TypeScript in an existing project. It covers the necessary steps to integrate Prisma into your Node.js application.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/install-prisma-client-typescript-postgresql

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider mysql
```

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()
```

----------------------------------------

TITLE: Invoke Prisma CLI
DESCRIPTION: Demonstrates how to invoke the Prisma CLI commands after installation.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases-node-planetscale

LANGUAGE: bash
CODE:
```
npx prisma
```

----------------------------------------

TITLE: Connect to SQL Server Database (Node.js)
DESCRIPTION: This guide covers connecting a Node.js application to a SQL Server database using Prisma. It outlines the installation of Prisma and the client, and project initialization for SQL Server.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-node-postgresql

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider sqlserver
npm install @prisma/client
```

----------------------------------------

TITLE: Install Prisma Client
DESCRIPTION: Instructions for installing Prisma Client for both Node.js and TypeScript projects. This enables type-safe database access.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/querying-the-database-node-planetscale

LANGUAGE: node
CODE:
```
console.log('See Prisma documentation for installation commands.');
// Example: npm install prisma --save-dev
// Example: npm install @prisma/client
```

LANGUAGE: typescript
CODE:
```
console.log('See Prisma documentation for installation commands.');
// Example: npm install prisma --save-dev
// Example: npm install @prisma/client
```

----------------------------------------

TITLE: Install Prisma Client for PostgreSQL (TypeScript)
DESCRIPTION: This snippet guides you through installing Prisma Client for a PostgreSQL database using TypeScript in an existing project. It covers the necessary steps to integrate Prisma into your Node.js application.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/install-prisma-client-typescript-postgresql

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider postgresql
```

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()
```

----------------------------------------

TITLE: Add Prisma to Existing Project (Node.js)
DESCRIPTION: Guides on integrating Prisma into an existing Node.js project for various relational databases. Covers setup and connection steps.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-node-sqlserver

LANGUAGE: javascript
CODE:
```
console.log('Node.js Prisma integration guide');
```

----------------------------------------

TITLE: PostgreSQL Setup from Existing Database (CLI)
DESCRIPTION: Instructions for setting up Prisma with an existing PostgreSQL database using the command-line interface.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/mongodb/introspection-node-mongodb

LANGUAGE: bash
CODE:
```
npx prisma db push
npx prisma generate
```

----------------------------------------

TITLE: Connect Database with Prisma
DESCRIPTION: Guides on connecting your existing project to a relational database using Prisma. Covers setup for SQL Server with TypeScript.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-typescript-planetscale

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for database connection steps.');
// Example: prisma.schema configuration would be detailed here.
```

----------------------------------------

TITLE: Connect Database with Prisma
DESCRIPTION: Guides on connecting your existing project to a relational database using Prisma. Covers setup for SQL Server with TypeScript.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/evolve-your-schema-node-postgresql

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for database connection steps.');
// Example: prisma.schema configuration would be detailed here.
```

----------------------------------------

TITLE: Prisma ORM Setup and Database Connection (TypeScript)
DESCRIPTION: Guides users through setting up Prisma ORM from scratch for TypeScript projects and connecting to various relational databases like PostgreSQL, MySQL, PlanetScale, SQL Server, and CockroachDB.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/querying-the-database-typescript-postgresql

LANGUAGE: typescript
CODE:
```
// Example for connecting to PostgreSQL
// prisma/schema.prisma

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// generator client {
//   provider = "prisma-client-js"
// }
```

LANGUAGE: typescript
CODE:
```
// Example for connecting to MySQL
// prisma/schema.prisma

// datasource db {
//   provider = "mysql"
//   url      = env("DATABASE_URL")
// }

// generator client {
//   provider = "prisma-client-js"
// }
```

LANGUAGE: typescript
CODE:
```
// Example for connecting to PlanetScale
// prisma/schema.prisma

// datasource db {
//   provider = "mysql" // PlanetScale uses MySQL protocol
//   url      = env("DATABASE_URL")
// }

// generator client {
//   provider = "prisma-client-js"
// }
```

LANGUAGE: typescript
CODE:
```
// Example for connecting to SQL Server
// prisma/schema.prisma

// datasource db {
//   provider = "sqlserver"
//   url      = env("DATABASE_URL")
// }

// generator client {
//   provider = "prisma-client-js"
// }
```

LANGUAGE: typescript
CODE:
```
// Example for connecting to CockroachDB
// prisma/schema.prisma

// datasource db {
//   provider = "postgresql" // CockroachDB uses PostgreSQL protocol
//   url      = env("DATABASE_URL")
// }

// generator client {
//   provider = "prisma-client-js"
// }
```

----------------------------------------

TITLE: Connect Database with Prisma
DESCRIPTION: Guides on connecting your existing project to a relational database using Prisma. Covers setup for SQL Server with TypeScript.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-node-postgresql

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for database connection steps.');
// Example: prisma.schema configuration would be detailed here.
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup
DESCRIPTION: Documentation for setting up Prisma with PostgreSQL, including CLI commands and importing from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/introspection-typescript-cockroachdb

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider postgresql
```

LANGUAGE: bash
CODE:
```
npx prisma db push
```

LANGUAGE: bash
CODE:
```
npx prisma db pull
```

----------------------------------------

TITLE: Install Prisma Client (JavaScript and MySQL)
DESCRIPTION: This section details how to install the Prisma Client for JavaScript applications using a MySQL database. It covers the necessary steps to set up Prisma in your project.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-node-mysql

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init
npx prisma db push
```

----------------------------------------

TITLE: Install Prisma Client (JavaScript & PostgreSQL)
DESCRIPTION: This snippet demonstrates how to install Prisma Client for a Node.js project using PostgreSQL as the database. It covers the necessary steps for setting up the client and connecting to your database.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/install-prisma-client-node-postgresql

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider postgresql
```

LANGUAGE: javascript
CODE:
```
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function main() {
  // Example query
  const users = await prisma.user.findMany();
  console.log(users);
}

main()
  .catch((e) => {
    throw e;
  })
  .finally(async () => {
    await prisma.$disconnect();
  });

```

----------------------------------------

TITLE: Prisma Schema Definition
DESCRIPTION: This is an example of a Prisma schema file (`schema.prisma`) defining database models and their relationships. It's the core of your Prisma setup.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/using-prisma-migrate-typescript-cockroachdb

LANGUAGE: prisma
CODE:
```
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
  posts Post[]
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
}
```

----------------------------------------

TITLE: Add Prisma to Existing Project (TypeScript)
DESCRIPTION: Guides for adding Prisma to an existing project using TypeScript with various relational databases. Covers setup and connection steps.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-typescript-planetscale

LANGUAGE: typescript
CODE:
```
https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-typescript-postgresql
https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-typescript-mysql
https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-typescript-planetscale
https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-typescript-sqlserver
https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-typescript-cockroachdb
```

----------------------------------------

TITLE: Connect Database with Prisma
DESCRIPTION: Guides on connecting your existing project to a relational database using Prisma. Covers setup for SQL Server with TypeScript.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-node-sqlserver

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for database connection steps.');
// Example: prisma.schema configuration would be detailed here.
```

----------------------------------------

TITLE: Prisma with PostgreSQL
DESCRIPTION: Documentation and setup guides for using Prisma with PostgreSQL databases, including CLI commands and migration strategies.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/introspection-node-postgresql

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider postgresql
npx prisma migrate dev --name init
```

----------------------------------------

TITLE: Connect Database with Prisma
DESCRIPTION: Guides on connecting your existing project to a relational database using Prisma. Covers setup for SQL Server with TypeScript.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases-node-mysql

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for database connection steps.');
// Example: prisma.schema configuration would be detailed here.
```

----------------------------------------

TITLE: Integration Solutions Guides
DESCRIPTION: Guides on integrating Prisma with various third-party services and solutions, including AI SDK, Auth.js, Better-Auth, Clerk, Permit.io, and Shopify, often with a focus on Next.js.

SOURCE: https://www.prisma.io/docs/guides

LANGUAGE: en
CODE:
```
AI SDK (with Next.js)
Auth.js (with Next.js)
Better-Auth (with Next.js)
Clerk (with Next.js)
Permit.io
Shopify
```

----------------------------------------

TITLE: Navigate to Project Directory
DESCRIPTION: Changes the current directory to the newly created Prisma project folder.

SOURCE: https://www.prisma.io/docs/getting-started/quickstart-prismaPostgres

LANGUAGE: bash
CODE:
```
cd hello-prisma
```

----------------------------------------

TITLE: Prisma Client Setup & Configuration
DESCRIPTION: Guide to setting up and configuring Prisma Client in your project, including database connection and environment variables.

SOURCE: https://www.prisma.io/docs/orm/more/help-and-troubleshooting/vercel-caching-issue

LANGUAGE: APIDOC
CODE:
```
Prisma Client Setup:
  1. Install Prisma Client: `npm install @prisma/client` or `yarn add @prisma/client`.
  2. Configure your database connection in `schema.prisma` using the `datasource` block.
     Example:
     datasource db {
       provider = "postgresql"
       url      = env("DATABASE_URL")
     }
  3. Ensure the `DATABASE_URL` environment variable is set.
  4. Generate the Prisma Client: `npx prisma generate`.
  5. Import and use Prisma Client in your application:
     import { PrismaClient } from '@prisma/client'
     const prisma = new PrismaClient()
```

----------------------------------------

TITLE: Prisma Client Setup and Configuration
DESCRIPTION: Guides on setting up and configuring Prisma Client for your application. Covers connection strings, environment variables, and basic client instantiation.

SOURCE: https://www.prisma.io/docs/orm/more/upgrade-guides/upgrade-from-prisma-1/schema-incompatibilities-mysql

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  // ... your database operations
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Prisma Client Setup and Configuration
DESCRIPTION: Guides on setting up and configuring Prisma Client in your Node.js or TypeScript project.

SOURCE: https://www.prisma.io/docs/orm/prisma-migrate

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  // ... your Prisma Client queries here
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Connect to SQL Server Database (Node.js)
DESCRIPTION: Instructions for connecting a Node.js application to a SQL Server database using Prisma.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/querying-the-database-typescript-postgresql

LANGUAGE: javascript
CODE:
```
// Example connection string for SQL Server
const connectionString = "sqlserver://user:password@host:port;database=databaseName";
console.log(`Connecting to SQL Server: ${connectionString}`);
// Prisma client would be initialized with this connection string.
```

----------------------------------------

TITLE: Install Prisma CLI and Prisma Client
DESCRIPTION: Commands to install the Prisma CLI as a development dependency and then install the Prisma Client package for use in your project.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/setup-and-configuration/introduction

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma
npm install @prisma/client
```

----------------------------------------

TITLE: Prisma Resources
DESCRIPTION: A list of resources for Prisma users, including documentation, ecosystem, playground, ORM benchmarks, customer stories, and a data guide.

SOURCE: https://www.prisma.io/docs/guides

LANGUAGE: markdown
CODE:
```
Resources
  * [Docs](https://www.prisma.io/docs)
  * [Ecosystem](https://www.prisma.io/ecosystem)
  * [Playground ↗](https://playground.prisma.io/)
  * [ORM Benchmarks ↗](https://benchmarks.prisma.io/)
  * [Customer stories](https://www.prisma.io/showcase)
  * [Data guide](https://www.prisma.io/dataguide)
```

----------------------------------------

TITLE: Install Prisma Client for SQL Server (TypeScript)
DESCRIPTION: This snippet guides you through installing Prisma Client for a SQL Server database using TypeScript in an existing project. It covers the necessary steps to integrate Prisma into your Node.js application.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/install-prisma-client-typescript-postgresql

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider sqlserver
```

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()
```

----------------------------------------

TITLE: Prisma ORM Setup and Database Connection (TypeScript)
DESCRIPTION: Guides on setting up Prisma ORM and connecting to various relational databases using TypeScript. This includes steps for initializing Prisma, defining the schema, and establishing a connection.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/querying-the-database-node-cockroachdb

LANGUAGE: typescript
CODE:
```
npx prisma init --datasource-provider postgresql

// schema.prisma example
// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }
// generator client {
//   provider = "prisma-client-js"
// }
```

LANGUAGE: typescript
CODE:
```
// Example of connecting to a database
// import { PrismaClient } from '@prisma/client'
// const prisma = new PrismaClient()

// async function main(): Promise<void> {
//   const users = await prisma.user.findMany()
//   console.log(users)
// }
```

----------------------------------------

TITLE: Prisma Contact Us
DESCRIPTION: Information on how to contact Prisma for community support, enterprise inquiries, partnerships, and more. Includes links to social media.

SOURCE: https://www.prisma.io/docs/getting-started

LANGUAGE: en
CODE:
```
Community
Support
Enterprise
Partners
OSS Friends
```

----------------------------------------

TITLE: Prisma Setup for PostgreSQL
DESCRIPTION: Instructions for setting up Prisma with a PostgreSQL database, including CLI commands for initialization and schema generation.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/using-prisma-migrate-typescript-mysql

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider postgresql
```

----------------------------------------

TITLE: Connect Database (TypeScript) - MySQL
DESCRIPTION: Guides on connecting a TypeScript application to a MySQL database using Prisma. Covers initial setup and connection string configuration.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-node-planetscale

LANGUAGE: typescript
CODE:
```
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-typescript-mysql
```

----------------------------------------

TITLE: Connect Database with Prisma
DESCRIPTION: Guides on connecting your existing project to a relational database using Prisma. Covers setup for SQL Server with TypeScript.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/baseline-your-database-typescript-cockroachdb

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for database connection steps.');
// Example: prisma.schema configuration would be detailed here.
```

----------------------------------------

TITLE: Prisma MongoDB Setup (TypeScript)
DESCRIPTION: Instructions for setting up Prisma with MongoDB for a TypeScript project. This includes initialization and basic client usage.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/install-prisma-client-typescript-mysql

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider mongodb
```

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()

async function main() {
  const users = await prisma.user.findMany()
  console.log(users)
}
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup
DESCRIPTION: Documentation for setting up Prisma with PostgreSQL, including CLI commands and importing from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/introspection-typescript-postgresql

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider postgresql
```

LANGUAGE: bash
CODE:
```
npx prisma db push
```

LANGUAGE: bash
CODE:
```
npx prisma db pull
```

----------------------------------------

TITLE: Prisma PostgreSQL Setup
DESCRIPTION: Documentation for setting up Prisma with PostgreSQL, including CLI commands and importing from existing databases.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/evolve-your-schema-typescript-cockroachdb

LANGUAGE: bash
CODE:
```
npx prisma init --datasource-provider postgresql
```

LANGUAGE: bash
CODE:
```
npx prisma db push
```

LANGUAGE: bash
CODE:
```
npx prisma db pull
```

----------------------------------------

TITLE: Connect Database (TypeScript) - PostgreSQL
DESCRIPTION: Guides on connecting a TypeScript application to a PostgreSQL database using Prisma. Covers initial setup and connection string configuration.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-node-planetscale

LANGUAGE: typescript
CODE:
```
https://www.prisma.io/docs/getting-started/setup-prisma/start-from-scratch/relational-databases/connect-your-database-typescript-postgresql
```

----------------------------------------

TITLE: Prisma Cloudflare Worker Setup Commands
DESCRIPTION: Commands to create a new Cloudflare Worker project, install Prisma, and initialize the Prisma CLI.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/deployment/edge/deploy-to-cloudflare

LANGUAGE: bash
CODE:
```
npm create cloudflare@latest prisma-cloudflare-worker-example -- --type hello-world
cd prisma-cloudflare-worker-example
npm install prisma --save-dev && npm install @prisma/client
npx prisma init --output ../generated/prisma
```

----------------------------------------

TITLE: Prisma Client - Setup & Configuration
DESCRIPTION: Instructions on how to set up and configure Prisma Client in your Node.js or TypeScript project, including installation and basic client instantiation.

SOURCE: https://www.prisma.io/docs/orm/more/comparisons/prisma-and-sequelize

LANGUAGE: APIDOC
CODE:
```
Setting up Prisma Client:

1. Installation:
   Install Prisma Client as a dependency in your project:
   npm install prisma --save-dev
   npm install @prisma/client

   Or using Yarn:
   yarn add prisma --dev
   yarn add @prisma/client

2. Define your Database Schema:
   Create a schema.prisma file in the root of your project (or in a dedicated prisma/ directory).
   Configure your datasource and generator:

   datasource db {
     provider = "postgresql" // or mysql, sqlite, sqlserver, mongodb
     url      = env("DATABASE_URL")
   }

   generator client {
     provider = "prisma-client-js"
   }

   // Define your models here...
   model User {
     id    Int @id @default(autoincrement())
     email String @unique
     name  String?
   }

3. Generate Prisma Client:
   Run the generate command to create the Prisma Client based on your schema:
   npx prisma generate

   This command reads schema.prisma and generates the Prisma Client code in node_modules/@prisma/client.

4. Instantiate Prisma Client:
   Import and instantiate the Prisma Client in your application code:

   // In your JavaScript/TypeScript file (e.g., index.js or app.ts)
   import { PrismaClient } from '@prisma/client';

   const prisma = new PrismaClient();

   async function main() {
     // Use the prisma client to interact with your database
     const newUser = await prisma.user.create({
       data: {
         email: 'test@example.com',
         name: 'Test User',
       },
     });
     console.log('Created user:', newUser);

     const users = await prisma.user.findMany();
     console.log('All users:', users);
   }

   main()
     .catch((e) => {
       console.error(e);
       process.exit(1);
     })
     .finally(async () => {
       await prisma.$disconnect();
     });

5. Configure Database Connection:
   Set the DATABASE_URL environment variable in your .env file to point to your database.
   DATABASE_URL="postgresql://user:password@host:port/database?schema=public"

   Ensure you have the appropriate database driver installed (e.g., pg for PostgreSQL).

```

----------------------------------------

TITLE: Install Prisma Client
DESCRIPTION: Provides instructions for installing Prisma Client in your project, enabling type-safe database access. Covers installation for Node.js and TypeScript with support for CockroachDB, MySQL, PlanetScale, PostgreSQL, and SQL Server.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/connect-your-database-node-postgresql

LANGUAGE: javascript
CODE:
```
console.log('Refer to Prisma documentation for Prisma Client installation.');
// Example: npm install @prisma/client (for Node.js)
// Example: npm install @prisma/client (for TypeScript)
```

----------------------------------------

TITLE: Installing Prisma Client for MongoDB
DESCRIPTION: Instructions for installing Prisma Client, which is necessary for interacting with your MongoDB database via Prisma ORM.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/mongodb/next-steps

LANGUAGE: bash
CODE:
```
# Install Prisma Client as a dependency
npm install @prisma/client

# Or using yarn
yarn add @prisma/client

```

----------------------------------------

TITLE: Install Prisma Client for CockroachDB (TypeScript)
DESCRIPTION: This snippet guides you through installing Prisma Client for a CockroachDB database using TypeScript in an existing project. It covers the necessary steps to integrate Prisma into your Node.js application.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/install-prisma-client-typescript-postgresql

LANGUAGE: bash
CODE:
```
npm install prisma --save-dev
npx prisma init --datasource-provider cockroachdb
```

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'
const prisma = new PrismaClient()
```

----------------------------------------

TITLE: Connect Database with Prisma
DESCRIPTION: Guides on connecting your existing project to a relational database using Prisma. Covers setup for SQL Server with TypeScript.

SOURCE: https://www.prisma.io/docs/getting-started/setup-prisma/add-to-existing-project/relational-databases/evolve-your-schema-typescript-mysql

LANGUAGE: typescript
CODE:
```
console.log('Refer to Prisma documentation for database connection steps.');
// Example: prisma.schema configuration would be detailed here.
```

----------------------------------------

TITLE: Install Prisma Client and Prisma CLI
DESCRIPTION: Installs the latest versions of `@prisma/client` and `prisma` using npm.

SOURCE: https://www.prisma.io/docs/orm/prisma-client/using-raw-sql/typedsql

LANGUAGE: bash
CODE:
```
npm install @prisma/client@latest  
npm install -D prisma@latest  
```

----------------------------------------

TITLE: Prisma Client Setup and Configuration
DESCRIPTION: Guides on setting up and configuring Prisma Client for various environments, including database connections and environment variable management.

SOURCE: https://www.prisma.io/docs/orm/more/ai-tools/github-copilot

LANGUAGE: typescript
CODE:
```
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  // ... your prisma client queries
}

main()
  .catch((e) => {
    throw e
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```

----------------------------------------

TITLE: Prisma Client Setup and Configuration
DESCRIPTION: Guide to setting up and configuring Prisma Client in your Node.js or TypeScript project.

SOURCE: https://www.prisma.io/docs/orm/more/upgrade-guides/upgrade-from-prisma-1/schema-incompatibilities-postgresql

LANGUAGE: javascript
CODE:
```
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  // Example: Create a new user
  const newUser = await prisma.user.create({
    data: {
      email: 'test@example.com',
      name: 'Test User',
    },
  })
  console.log('Created new user:', newUser)

  // Example: Find all users
  const allUsers = await prisma.user.findMany()
  console.log('All users:', allUsers)
}

main()
  .catch((e) => {
    console.error(e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })
```