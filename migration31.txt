-- Migration 31: Re-introduce RPC functions for secure organization chat fetching

-- 1. Create a function to securely fetch all chat threads for an organization.
-- This runs with elevated privileges but performs its own security checks to find
-- the correct host user for the calling organization.
CREATE OR REPLACE FUNCTION public.get_organization_chat_threads()
RETURNS TABLE (
    id bigint,
    last_message text,
    "timestamp" timestamptz,
    unread_count integer,
    match_timestamp timestamptz,
    created_at timestamptz,
    creator_auth_id uuid,
    event_id bigint,
    is_event_chat boolean,
    participants jsonb
)
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
    v_org_id bigint;
    v_host_user_id bigint;
BEGIN
    SELECT o.id INTO v_org_id
    FROM public.organizations o
    WHERE o.auth_id = auth.uid()
    LIMIT 1;

    IF v_org_id IS NULL THEN
        RAISE EXCEPTION 'No organization found for the current user.';
    END IF;

    SELECT u.id INTO v_host_user_id
    FROM public.users u
    JOIN public.organizations o ON u.name = o.host_name
    WHERE o.id = v_org_id
    LIMIT 1;

    IF v_host_user_id IS NULL THEN
        RETURN;
    END IF;

    RETURN QUERY
    SELECT
        mt.id, mt.last_message, mt."timestamp", mt.unread_count, mt.match_timestamp, mt.created_at, mt.creator_auth_id, mt.event_id, mt.is_event_chat,
        (
            SELECT jsonb_agg(
                jsonb_build_object(
                    'user', jsonb_build_object(
                        'id', u.id, 'name', u.name, 'age', u.age, 'avatar_url', u.avatar_url, 'online', u.online,
                        'bio', u.bio, 'location', u.location, 'personality_type', u.personality_type, 'emojis', u.emojis,
                        'personality_test_completed', u.personality_test_completed, 'is_admin', u.is_admin
                    )
                )
            )
            FROM message_thread_participants mtp
            JOIN users u ON mtp.user_id = u.id
            WHERE mtp.thread_id = mt.id
        ) AS participants
    FROM message_threads mt
    WHERE mt.id IN (
        SELECT mtp.thread_id
        FROM message_thread_participants mtp
        WHERE mtp.user_id = v_host_user_id
    )
    ORDER BY mt."timestamp" DESC;
END;
$$;

-- 2. Create a function to securely fetch a single chat thread's details for an organization.
CREATE OR REPLACE FUNCTION public.get_organization_chat_thread_details(p_thread_id bigint)
RETURNS jsonb
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public
AS $$
DECLARE
    v_org_id bigint;
    v_host_user_id bigint;
    is_participant boolean;
    thread_details jsonb;
BEGIN
    SELECT o.id, u.id INTO v_org_id, v_host_user_id
    FROM public.organizations o
    JOIN public.users u ON o.host_name = u.name
    WHERE o.auth_id = auth.uid()
    LIMIT 1;

    IF v_org_id IS NULL OR v_host_user_id IS NULL THEN
        RAISE EXCEPTION 'Organization or host not found for current user.';
    END IF;

    SELECT EXISTS (
        SELECT 1
        FROM message_thread_participants mtp
        WHERE mtp.thread_id = p_thread_id AND mtp.user_id = v_host_user_id
    ) INTO is_participant;

    IF NOT is_participant THEN
        RAISE EXCEPTION 'Organization host is not a participant of this chat thread.';
    END IF;

    SELECT to_jsonb(t) INTO thread_details FROM (
        SELECT
            mt.*,
            (SELECT to_jsonb(e.*) FROM events e WHERE e.id = mt.event_id) AS event,
            (
                SELECT jsonb_agg(
                    jsonb_build_object(
                        'user', jsonb_build_object(
                            'id', u.id, 'name', u.name, 'age', u.age, 'avatar_url', u.avatar_url, 'online', u.online,
                            'bio', u.bio, 'location', u.location, 'personality_type', u.personality_type, 'emojis', u.emojis,
                            'personality_test_completed', u.personality_test_completed, 'is_admin', u.is_admin, 'auth_id', u.auth_id
                        )
                    )
                )
                FROM message_thread_participants mtp
                JOIN users u ON mtp.user_id = u.id
                WHERE mtp.thread_id = mt.id
            ) AS participants
        FROM message_threads mt
        WHERE mt.id = p_thread_id
    ) t;

    RETURN thread_details;
END;
$$;

-- 3. Grant execute permission on the new functions
GRANT EXECUTE ON FUNCTION public.get_organization_chat_threads() TO authenticated;
GRANT EXECUTE ON FUNCTION public.get_organization_chat_thread_details(bigint) TO authenticated;