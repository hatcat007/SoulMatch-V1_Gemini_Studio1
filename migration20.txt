-- Migration 20: Add Event Group Chats

-- 1. Add columns to message_threads for event linking and status
ALTER TABLE "public"."message_threads"
ADD COLUMN IF NOT EXISTS "event_id" bigint UNIQUE,
ADD COLUMN IF NOT EXISTS "is_event_chat" boolean DEFAULT false NOT NULL;

-- Add foreign key constraint to link with events table.
-- Using ON DELETE CASCADE so if an event is deleted, its chat thread is also deleted.
ALTER TABLE "public"."message_threads"
ADD CONSTRAINT "message_threads_event_id_fkey"
FOREIGN KEY (event_id) REFERENCES "public"."events"(id) ON DELETE CASCADE;

-- 2. Create a trigger function to automatically create a chat when an event is created.
CREATE OR REPLACE FUNCTION public.handle_new_event_chat_creation()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.message_threads (event_id, is_event_chat, last_message, "timestamp")
  VALUES (NEW.id, true, 'Velkommen til event chatten! Koordiner og m√∏d nye mennesker her.', NOW());
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 3. Attach the trigger to the events table.
DROP TRIGGER IF EXISTS on_event_created_create_chat ON public.events;
CREATE TRIGGER on_event_created_create_chat
AFTER INSERT ON public.events
FOR EACH ROW EXECUTE FUNCTION public.handle_new_event_chat_creation();


-- 4. Create a trigger function to sync participants between event and chat.
CREATE OR REPLACE FUNCTION public.sync_event_participant_to_chat()
RETURNS TRIGGER AS $$
DECLARE
  v_thread_id bigint;
  v_creator_user_id bigint;
BEGIN
  -- Find the thread_id and creator_user_id for the event
  SELECT mt.id, e.creator_user_id 
  INTO v_thread_id, v_creator_user_id 
  FROM public.message_threads mt
  JOIN public.events e ON mt.event_id = e.id
  WHERE mt.event_id = COALESCE(NEW.event_id, OLD.event_id);

  IF v_thread_id IS NOT NULL THEN
    IF (TG_OP = 'INSERT') THEN
      -- Add user to the chat participants
      INSERT INTO public.message_thread_participants (thread_id, user_id)
      VALUES (v_thread_id, NEW.user_id)
      ON CONFLICT (thread_id, user_id) DO NOTHING;
      
      -- Also ensure the event creator is in the chat
      IF v_creator_user_id IS NOT NULL THEN
         INSERT INTO public.message_thread_participants (thread_id, user_id)
         VALUES (v_thread_id, v_creator_user_id)
         ON CONFLICT (thread_id, user_id) DO NOTHING;
      END IF;

    ELSIF (TG_OP = 'DELETE') THEN
      -- Remove user from chat participants, but NOT if they are the creator
      IF OLD.user_id != v_creator_user_id THEN
          DELETE FROM public.message_thread_participants
          WHERE thread_id = v_thread_id AND user_id = OLD.user_id;
      END IF;
    END IF;
  END IF;

  RETURN COALESCE(NEW, OLD);
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 5. Attach the trigger to the event_participants table for INSERT and DELETE operations.
DROP TRIGGER IF EXISTS on_event_participant_change_sync_chat ON public.event_participants;
CREATE TRIGGER on_event_participant_change_sync_chat
AFTER INSERT OR DELETE ON public.event_participants
FOR EACH ROW EXECUTE FUNCTION public.sync_event_participant_to_chat();

-- 6. Grant execute permissions on new functions to authenticated role
GRANT EXECUTE ON FUNCTION public.handle_new_event_chat_creation() TO authenticated;
GRANT EXECUTE ON FUNCTION public.sync_event_participant_to_chat() TO authenticated;
